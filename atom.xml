<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Next Dream...</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://novaellias.github.io/"/>
  <updated>2019-06-03T12:14:22.594Z</updated>
  <id>https://novaellias.github.io/</id>
  
  <author>
    <name>ELLIAS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OPTIMIZATION</title>
    <link href="https://novaellias.github.io/2018/11/07/OPTIMIZE/"/>
    <id>https://novaellias.github.io/2018/11/07/OPTIMIZE/</id>
    <published>2018-11-07T11:17:42.000Z</published>
    <updated>2019-06-03T12:14:22.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>编译选项 快读 快写 内嵌asm</p></blockquote><a id="more"></a><p><a href="https://ellias.blog.luogu.org/optimize-1" target="_blank" rel="noopener">LuoguBlog</a></p><h3 id="Fast-Read-amp-Write"><a href="#Fast-Read-amp-Write" class="headerlink" title="Fast Read &amp; Write"></a>Fast Read &amp; Write</h3><h4 id="ELLIAS-Old"><a href="#ELLIAS-Old" class="headerlink" title="ELLIAS_Old"></a>ELLIAS_Old</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fastio</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">14</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">14</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getint</span> <span class="params">(<span class="keyword">int</span> &amp;to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (c!=<span class="string">'-'</span>&amp;&amp;(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>) &amp;&amp; c != <span class="string">'-'</span>) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) c = gc(), m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>, c = gc();</span><br><span class="line"><span class="keyword">if</span> (m) <span class="keyword">return</span> -x; <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getuint</span> <span class="params">(<span class="keyword">int</span> &amp;to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = gc();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) c = gc();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>, c = gc();</span><br><span class="line">to = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getdou</span> <span class="params">(<span class="keyword">double</span> &amp;to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">bool</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc ();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>) ch = gc(), m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + (ch<span class="number">-48</span>), ch = gc ();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'.'</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> s = <span class="number">0.1</span>;</span><br><span class="line">ch = gc ();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x + (ch<span class="number">-48</span>)*s,s/=<span class="number">10</span>,ch = gc ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m) to = -x;</span><br><span class="line"><span class="keyword">else</span> to = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getudou</span> <span class="params">(<span class="keyword">double</span> &amp;to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = gc ();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = gc ();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + (ch<span class="number">-48</span>), ch = gc ();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'.'</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> s = <span class="number">0.1</span>;</span><br><span class="line">ch = gc ();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x + (ch<span class="number">-48</span>)*s,s/=<span class="number">10</span>,ch = gc ();</span><br><span class="line">&#125;</span><br><span class="line">to = x;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125; io;</span><br></pre></td></tr></table></figure><h4 id="SJB"><a href="#SJB" class="headerlink" title="SJB"></a>SJB</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> str = <span class="number">1</span>&lt;&lt;<span class="number">20</span>; <span class="keyword">const</span> <span class="keyword">char</span>* kiana = <span class="string">"\n"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Reader</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str], *s, *t;</span><br><span class="line">        <span class="keyword">bool</span> EOF_FLG;</span><br><span class="line">        Reader():s(buf), t(buf), EOF_FLG(<span class="literal">false</span>) &#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> s==t&amp;&amp;((t=(s=buf)+fread(buf,<span class="number">1</span>,str,<span class="built_in">stdin</span>))==s)?EOF:(*s++);&#125;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Reader&amp;<span class="keyword">operator</span> &gt;&gt; (T&amp;x)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span> (EOF_FLG)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> c=<span class="number">0</span>,d;</span><br><span class="line">            <span class="keyword">while</span> (c != EOF &amp;&amp; (!<span class="built_in">isdigit</span>(c)))d=c,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(c == EOF) &#123;EOF_FLG=<span class="literal">true</span>; <span class="keyword">return</span> *<span class="keyword">this</span>;&#125; <span class="keyword">else</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + c - <span class="string">'0'</span>, c = gt();</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="string">'-'</span>) x =- x;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cin</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        Writer():s(buf),t(buf+str) &#123;&#125;</span><br><span class="line">        ~Writer() &#123;fwrite(buf,<span class="number">1</span>,s-buf,<span class="built_in">stdout</span>);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;(s==t)?(fwrite(s=buf,<span class="number">1</span>,str,<span class="built_in">stdout</span>),*s++=c):(*s++=c);&#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Writer&amp;<span class="keyword">operator</span>&lt;&lt;(T x)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(!x) <span class="keyword">return</span> pt(<span class="string">'0'</span>),*<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>) pt(<span class="string">'-'</span>), x = -x;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> a[<span class="number">30</span>],t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x)a[t++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(t--)pt(a[t]+<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span>*s) &#123;<span class="keyword">while</span>(*s)pt(*s++);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    &#125; <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ELLIAS-New"><a href="#ELLIAS-New" class="headerlink" title="ELLIAS_New"></a>ELLIAS_New</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) c = gc(), m = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>); write (x); <span class="built_in">putchar</span> (<span class="string">'\n'</span>);&#125;</span><br></pre></td></tr></table></figure><h3 id="SWITCH"><a href="#SWITCH" class="headerlink" title="SWITCH"></a>SWITCH</h3><h4 id="OLD-2017"><a href="#OLD-2017" class="headerlink" title="OLD (2017)"></a>OLD (2017)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br></pre></td></tr></table></figure><h4 id="OLD-2018-3"><a href="#OLD-2018-3" class="headerlink" title="OLD(2018.3)"></a>OLD(2018.3)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br></pre></td></tr></table></figure><h4 id="NOIp2018"><a href="#NOIp2018" class="headerlink" title="NOIp2018"></a>NOIp2018</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br></pre></td></tr></table></figure><h3 id="内嵌asm优化"><a href="#内嵌asm优化" class="headerlink" title="内嵌asm优化"></a>内嵌asm优化</h3><h4 id="a-b-mo"><a href="#a-b-mo" class="headerlink" title="a * b % mo"></a>a * b % mo</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mul_mod</span> <span class="params">(<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> mo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret;</span><br><span class="line">__asm__ __volatile__ (<span class="string">"\tmull %%ebx\n\tdivl %%ecx\n"</span> : <span class="string">"=d"</span>(ret):<span class="string">"a"</span>(a),<span class="string">"b"</span>(b),<span class="string">"c"</span>(mo));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;编译选项 快读 快写 内嵌asm&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="模板" scheme="https://novaellias.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>SP2713 GSS4 - Can you answer these queries IV</title>
    <link href="https://novaellias.github.io/2018/11/02/GSS4/"/>
    <id>https://novaellias.github.io/2018/11/02/GSS4/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2019-06-03T12:14:03.382Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GSS4 - Can you answer these queries IV</p></blockquote><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/SP2713" target="_blank" rel="noopener">Luogu</a><br><a href="https://vjudge.net/problem/SPOJ-GSS4" target="_blank" rel="noopener">Vjudge</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> root 1,1,n</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) y^=x^=y^=x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dmax 400001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> str=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* endll=<span class="string">"\n"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Reader</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        <span class="keyword">bool</span> EOF_FLG;</span><br><span class="line">        Reader():s(buf),t(buf),EOF_FLG(<span class="literal">false</span>) &#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s==t&amp;&amp;((t=(s=buf)+fread(buf,<span class="number">1</span>,str,<span class="built_in">stdin</span>))==s)?EOF:(*s++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> gt() getchar() </span></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Reader&amp;<span class="keyword">operator</span>&gt;&gt;(T&amp;x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(EOF_FLG)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> c=<span class="number">0</span>,d;</span><br><span class="line">            <span class="keyword">while</span>(c!=EOF&amp;&amp;!<span class="built_in">isdigit</span>(c))d=c,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(c==EOF) &#123;</span><br><span class="line">                EOF_FLG=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="string">'-'</span>)x=-x;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cin</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        Writer():s(buf),t(buf+str) &#123;&#125;</span><br><span class="line">        ~Writer() &#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,s-buf,<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">            (s==t)?(fwrite(s=buf,<span class="number">1</span>,str,<span class="built_in">stdout</span>),*s++=c):(*s++=c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> pt(c) putchar(c)</span></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Writer&amp;<span class="keyword">operator</span>&lt;&lt;(T x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)<span class="keyword">return</span> pt(<span class="string">'0'</span>),*<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)pt(<span class="string">'-'</span>),x=-x;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> a[<span class="number">30</span>],t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x)a[t++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(t--)pt(a[t]+<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span>*s) &#123;</span><br><span class="line">            <span class="keyword">while</span>(*s)pt(*s++);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum, mxx;</span><br><span class="line">&#125; dat[dmax];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> in;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; <span class="title">max</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; x,<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; y)</span> </span>&#123;<span class="keyword">return</span> x&gt;y? x:y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dat[rt].sum = dat[rt&lt;&lt;<span class="number">1</span>].sum + dat[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    dat[rt].mxx = max (dat[rt&lt;&lt;<span class="number">1</span>].mxx, dat[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mxx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dat[rt].l = l, dat[rt].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        fastIO::<span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">        dat[rt].sum = dat[rt].mxx = in;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build (lson); build (rson);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> L = dat[rt].l, R = dat[rt].r;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> dat[rt].sum;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0l</span>l;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;=mid) ret  = query (rt&lt;&lt;<span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r) ret += query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> L = dat[rt].l, R = dat[rt].r;</span><br><span class="line">    <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dat[rt].sum&lt;&lt;" -&gt; ";</span></span><br><span class="line">        dat[rt].sum = <span class="built_in">sqrt</span> (dat[rt].sum),</span><br><span class="line">        dat[rt].mxx = <span class="built_in">sqrt</span> (dat[rt].mxx);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dat[rt].sum&lt;&lt;endll;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid &amp;&amp; dat[rt&lt;&lt;<span class="number">1</span>].mxx  &gt;<span class="number">1</span>) change (rt&lt;&lt;<span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (mid&lt; r &amp;&amp; dat[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mxx&gt;<span class="number">1</span>) change (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//using namespace fastIO;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; query(<span class="number">1</span>, x, y) &lt;&lt; endll;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Change</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;change (<span class="number">1</span>, x, y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> _ = <span class="number">0</span>, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        fastIO::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; ++ _ &lt;&lt; <span class="string">":"</span> &lt;&lt; endll;</span><br><span class="line">        build (root);</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">int</span> m, x, y, ret;</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">bool</span> opt;</span><br><span class="line">        fastIO::<span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m --)</span><br><span class="line">        &#123;</span><br><span class="line">            fastIO::<span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line">                <span class="keyword">if</span> (x &gt; y) swap (x, y);</span><br><span class="line">            opt? Write(x, y):Change (x, y);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="built_in">putchar</span> (<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GSS4 - Can you answer these queries IV&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="GSS" scheme="https://novaellias.github.io/tags/GSS/"/>
    
      <category term="segment tree" scheme="https://novaellias.github.io/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>SP1716 GSS3 - Can you answer these queries III</title>
    <link href="https://novaellias.github.io/2018/11/02/GSS3/"/>
    <id>https://novaellias.github.io/2018/11/02/GSS3/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2019-05-31T12:48:44.478Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GSS3 - Can you answer these queries III</p></blockquote><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/SP1716" target="_blank" rel="noopener">Luogu</a><br><a href="https://vjudge.net/problem/SPOJ-GSS3" target="_blank" rel="noopener">Vjudge</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, in, opt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum, lmax, rmax, dat, l, r;</span><br><span class="line">&#125; tr[<span class="number">200001</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> str=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* <span class="built_in">endl</span>=<span class="string">"\n"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Reader</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        <span class="keyword">bool</span> EOF_FLG;</span><br><span class="line">        Reader():s(buf),t(buf),EOF_FLG(<span class="literal">false</span>) &#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s==t&amp;&amp;((t=(s=buf)+fread(buf,<span class="number">1</span>,str,<span class="built_in">stdin</span>))==s)?EOF:(*s++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Reader&amp;<span class="keyword">operator</span>&gt;&gt;(T&amp;x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(EOF_FLG)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> c=<span class="number">0</span>,d;</span><br><span class="line">            <span class="keyword">while</span>(c!=EOF&amp;&amp;(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>))d=c,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(c==EOF) &#123;</span><br><span class="line">                EOF_FLG=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="string">'-'</span>)x=-x;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cin</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        Writer():s(buf),t(buf+str) &#123;&#125;</span><br><span class="line">        ~Writer() &#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,s-buf,<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">            (s==t)?(fwrite(s=buf,<span class="number">1</span>,str,<span class="built_in">stdout</span>),*s++=c):(*s++=c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Writer&amp;<span class="keyword">operator</span>&lt;&lt;(T x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)<span class="keyword">return</span> pt(<span class="string">'0'</span>),*<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)pt(<span class="string">'-'</span>),x=-x;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> a[<span class="number">30</span>],t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x)a[t++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(t--)pt(a[t]+<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span>*s) &#123;</span><br><span class="line">            <span class="keyword">while</span>(*s)pt(*s++);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">max</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x,<span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    tr[rt].sum =tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    tr[rt].lmax= max (tr[rt&lt;&lt;<span class="number">1</span>].lmax, tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">    tr[rt].rmax= max (tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax, tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>].rmax);</span><br><span class="line">    tr[rt].dat = max (max(tr[rt&lt;&lt;<span class="number">1</span>].dat, tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat), tr[rt&lt;&lt;<span class="number">1</span>].rmax + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[rt].l = l, tr[rt].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">        FastIO::<span class="built_in">cin</span>&gt;&gt;in;</span><br><span class="line">        tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = in;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build (lson);</span><br><span class="line">    build (rson);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">query</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> tr[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt;  mid) <span class="keyword">return</span> query (rson, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> query (lson, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        node ans,a,b;</span><br><span class="line">        a = query (lson,ql,qr);</span><br><span class="line">        b = query (rson,ql,qr);</span><br><span class="line">        ans.sum = a.sum + b.sum;</span><br><span class="line">        ans.dat = max (a.dat, a.rmax + b.lmax), ans.dat = max (ans.dat, b.dat);</span><br><span class="line">        ans.lmax= max (a.lmax, a.sum + b.lmax);</span><br><span class="line">        ans.rmax= max (b.rmax, b.sum + a.rmax);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> to, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[rt].l == tr[rt].r) &#123;</span><br><span class="line">        tr[rt].sum = tr[rt].lmax = tr[rt].rmax = tr[rt].dat = val; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (tr[rt].l + tr[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (to &lt;= mid) work (rt&lt;&lt;<span class="number">1</span>, to, val);</span><br><span class="line">    <span class="keyword">else</span> work (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, to, val);</span><br><span class="line">    update(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FastIO;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen ("nico.in","r",stdin);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span> (m --) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (opt) <span class="built_in">cout</span> &lt;&lt; query (<span class="number">1</span>, <span class="number">1</span>, n, x, y).dat &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> work (<span class="number">1</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GSS3 - Can you answer these queries III&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="GSS" scheme="https://novaellias.github.io/tags/GSS/"/>
    
      <category term="segment tree" scheme="https://novaellias.github.io/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>SP2916 GSS5 - Can you answer these queries V</title>
    <link href="https://novaellias.github.io/2018/11/02/GSS5/"/>
    <id>https://novaellias.github.io/2018/11/02/GSS5/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2019-06-03T12:14:11.748Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GSS4 - Can you answer these queries V</p></blockquote><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/SP2916" target="_blank" rel="noopener">Luogu</a><br><a href="https://vjudge.net/problem/SPOJ-GSS5" target="_blank" rel="noopener">Vjudge</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS], *p1 = buf, *p2 = buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>; c = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="string">'0'</span>), c = gc();</span><br><span class="line">    <span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0l</span>l) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    write (x), <span class="built_in">putchar</span> (<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dmax 40001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((y)^=(x)^=(y)^=(x)) </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum, lmax, rmax, dat;</span><br><span class="line">&#125; tr[dmax], null;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; <span class="title">max</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; x,<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; y)</span> </span>&#123;<span class="keyword">return</span> x&gt;y? x:y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> lson = rt&lt;&lt;<span class="number">1</span>, rson = rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">    tr[rt].sum = tr[lson].sum + tr[rson].sum;</span><br><span class="line">    tr[rt].lmax= max (tr[lson].lmax, tr[lson].sum + tr[rson].lmax);</span><br><span class="line">    tr[rt].rmax= max (tr[rson].rmax, tr[rson].sum + tr[lson].rmax);</span><br><span class="line">    tr[rt].dat = max (max(tr[lson].dat, tr[rson].dat), tr[lson].rmax + tr[rson].lmax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[rt].l = l, tr[rt].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = read (); <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build (rt&lt;&lt;<span class="number">1</span>, l, mid), build (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> node <span class="title">query</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> l = tr[rt].l, r = tr[rt].r;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt; qr) <span class="keyword">return</span> null;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> tr[rt];</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt;  mid) <span class="keyword">return</span> query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,ql,qr);</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> query (rt&lt;&lt;<span class="number">1</span>, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">register</span> node ret, a, b;</span><br><span class="line">        a = query (rt&lt;&lt;<span class="number">1</span>, ql, qr), b = query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, ql, qr);</span><br><span class="line">        ret.sum = a.sum + b.sum;</span><br><span class="line">        ret.dat = max (a.dat, a.rmax + b.lmax), ret.dat = max (ret.dat, b.dat);</span><br><span class="line">        ret.lmax= max (a.lmax, a.sum + b.lmax), ret.rmax= max (b.rmax, b.sum + a.rmax);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> to, <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[rt].l == tr[rt].r) &#123;tr[rt].sum = tr[rt].lmax = tr[rt].rmax = tr[rt].dat = val; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (tr[rt].l + tr[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (to &lt;= mid) modify (rt&lt;&lt;<span class="number">1</span>, to, val);</span><br><span class="line">    <span class="keyword">else</span> modify (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, to, val);</span><br><span class="line">    update(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> _ = read ();</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">register</span> node a, b, c;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> tmp;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> opt;</span><br><span class="line">    <span class="keyword">while</span> (_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        n = read ();<span class="comment">//, m = read ();</span></span><br><span class="line">        build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        m = read ();</span><br><span class="line">        <span class="keyword">while</span> (m --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//opt = 'z';</span></span><br><span class="line">            <span class="comment">//while ((opt ^ 'C') &amp;&amp; (opt ^ 'Q')) opt = gc();</span></span><br><span class="line">            <span class="comment">//if (opt ^ 'C')</span></span><br><span class="line">            &#123;</span><br><span class="line">                x1 = read (), y1 = read (), x2 = read (), y2 = read ();</span><br><span class="line">                <span class="keyword">if</span> (y1&lt;x1) swap(x1,y1); <span class="keyword">if</span> (y2&lt;x2) swap(x2,y2);</span><br><span class="line">                <span class="keyword">if</span> (x1&gt;y2) swap(x1,x2), swap(y1,y2);</span><br><span class="line">                <span class="keyword">if</span> (y1 &lt; x2) &#123;</span><br><span class="line">                    writelen (max(query(<span class="number">1</span>,x1,y1<span class="number">-1</span>).rmax, <span class="number">0</span>) + query(<span class="number">1</span>,y1,x2).sum + max(query(<span class="number">1</span>,x2+<span class="number">1</span>,y2).lmax, <span class="number">0</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    a = query (<span class="number">1</span>, x2, y1), b = query(<span class="number">1</span>,x1,x2<span class="number">-1</span>), c = query(<span class="number">1</span>,y1+<span class="number">1</span>,y2);</span><br><span class="line">                    tmp = a.dat;</span><br><span class="line">                    tmp = max (tmp, a.lmax + b.rmax);</span><br><span class="line">                    tmp = max (tmp, c.lmax + a.rmax);</span><br><span class="line">                    tmp = max (tmp, a.sum + max(<span class="number">0</span>, b.rmax) + max(<span class="number">0</span>, c.lmax));</span><br><span class="line">                    writelen (tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">//else &#123;x1 = read (), tmp = read (); modify (1, x1, tmp);&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GSS4 - Can you answer these queries V&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="GSS" scheme="https://novaellias.github.io/tags/GSS/"/>
    
      <category term="segment tree" scheme="https://novaellias.github.io/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>Nescafé17 守卫者的挑战</title>
    <link href="https://novaellias.github.io/2018/11/02/Nescafe17-%E5%AE%88%E5%8D%AB%E8%80%85%E7%9A%84%E6%8C%91%E6%88%98/"/>
    <id>https://novaellias.github.io/2018/11/02/Nescafe17-守卫者的挑战/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2019-06-03T12:14:17.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nescafé17 守卫者的挑战</p></blockquote><a id="more"></a><h2 id="守卫者的挑战"><a href="#守卫者的挑战" class="headerlink" title="守卫者的挑战"></a>守卫者的挑战</h2><h3 id="Description"><a href="#Description" class="headerlink" title="[Description]"></a>[Description]</h3><p>打开了黑魔法师Vani的大门,队员们在迷宫般的路上漫无目的地搜寻着关押applepi的监狱的所在地.突然,眼前一道亮光闪过.“我,Nizem,是黑魔法圣殿的守卫者.如果你能通过我的挑战,那么你可以带走黑魔法圣殿的地图……”瞬间,队员们被传送到了一个擂台上,最初身边有一个容量为K的包包.</p><p>擂台赛一共有项挑战,各项挑战依次进行.第项挑战有一个属性ai,如果ai≥0,表示这次挑战成功后可以再获得一个容量为ai的包包；如果ai = -1,则表示这次挑战成功后可以得到一个大小为 1 的地图残片.地图残片必须装在包包里才能带出擂台,包包没有必要全部装满,但是队员们必须把获得的所有的地图残片都带走（没有得到的不用考虑,只需要完成所有N项挑战后背包容量足够容纳地图残片即可）,才能拼出完整的地图.并且他们至少要挑战成功L次才能离开擂台.</p><p>队员们一筹莫展之时,善良的守卫者Nizem帮忙预估出了每项挑战成功的概率,其中第i项挑战成功的概率为pi%.现在，请你帮忙预测一下，队员们能够带上他们获得的地图残片离开擂台的概率.</p><h3 id="Data-Size"><a href="#Data-Size" class="headerlink" title="[Data Size]"></a>[Data Size]</h3><p>对于 100% 的数据,保证 $ 0≤K≤2000$ , $ 0≤N≤200$ , $-1≤ai≤1000$ , $0≤L≤N$ , $0≤pi≤100$ .</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="[Solution]"></a>[Solution]</h3><p>刚看到此题时,我被那个概率吓得半死.但看了数据范围,此题就是一道很简单的水题了.</p><p>对于可以赢l把以上并且背包不会溢出的概率 $P_0$ ,通过枚举结束时的背包容量和赢的次数快速求出:</p><p>$$ P_0=\sum_{i=l}^{n}\sum_{j=0}^{K}P_{i, j} $$</p><p>而 $P_{i, j}$ 可以通过刷表法 $O(n^2K)≈8*10^7$ 地求出:</p><p>定义状态 $dp[i][j][k]$ 代表达到第$i$场胜$j$场背包容量为$k$时的概率,转移方程很显然为本次成功的概率和本次失败的概率之和:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j][k] += dp[i<span class="number">-1</span>][j][k] * (<span class="number">1</span> - dat[i].dat);</span><br><span class="line"><span class="keyword">if</span> ((tmp = min (K + dat[i].opt, n)) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">dp[i][j+<span class="number">1</span>][tmp] += dp[i<span class="number">-1</span>][j][k] * dat[i].dat;</span><br></pre></td></tr></table></figure><p>这个时间复杂度看起来很悬,未免会有稍作优化的想法.本题K的范围2000,但是真的需要2000吗?共有N项挑战,对于每一项挑战最多可以获得一块地图残片,所以背包实际的最大容量就是N次挑战中所有类型-1的数量,极限情况下是n,这样复杂度就会降到 $O(n^3)$, 较为稳妥.</p><h3 id="Code"><a href="#Code" class="headerlink" title="[Code]"></a>[Code]</h3><p>考场代码,写得略丑,请谅解.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">getdou</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">double</span> x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) c = gc();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = x * <span class="number">10</span> + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">double</span> s = <span class="number">0.1</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = x + (c-<span class="string">'0'</span>)*s, s/=<span class="number">10</span>, c = gc ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">min</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span></span>&#123;<span class="keyword">return</span> a&lt;b? a:b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> opt;</span><br><span class="line"><span class="keyword">double</span> dat;</span><br><span class="line">&#125; dat[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">(node a, node b)</span> </span>&#123;<span class="keyword">return</span> a.opt &gt; b.opt;&#125;</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">201</span>][<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen (<span class="string">"guard.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen (<span class="string">"guard.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n = read (), l = read (), k = read (), tmp;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) dat[i].dat = getdou()/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) dat[i].opt = read ();</span><br><span class="line"><span class="built_in">std</span>::sort (dat + <span class="number">1</span>, dat + n + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][min(n, k)] = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++ j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> K = <span class="number">0</span>; K &lt;= n; ++ K)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j][K] += dp[i<span class="number">-1</span>][j][K] * (<span class="number">1</span> - dat[i].dat);</span><br><span class="line"><span class="keyword">if</span> ((tmp = min (K + dat[i].opt, n)) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">dp[i][j+<span class="number">1</span>][tmp] += dp[i<span class="number">-1</span>][j][K] * dat[i].dat;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> <span class="keyword">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = l; i &lt;= n; ++ i)</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++ j)</span><br><span class="line">ans += dp[n][i][j];</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">"%.6lf"</span>, ans);</span><br><span class="line"></span><br><span class="line">fclose (<span class="built_in">stdin</span>), fclose (<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cena评测$0.03s$,效率还是可以的.<br><img src="https://novaellias.files.wordpress.com/2018/11/guard.png" alt="guard"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Nescafé17 守卫者的挑战&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="contest" scheme="https://novaellias.github.io/tags/contest/"/>
    
      <category term="DP" scheme="https://novaellias.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>GSS1 - Can you answer these queries I</title>
    <link href="https://novaellias.github.io/2018/11/02/GSS1/"/>
    <id>https://novaellias.github.io/2018/11/02/GSS1/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2019-06-03T12:13:58.625Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GSS1 - Can you answer these queries I</p></blockquote><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/SP1043" target="_blank" rel="noopener">Luogu SP1043</a><br><a href="https://vjudge.net/problem/SPOJ-GSS1" target="_blank" rel="noopener">Vjudge</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, in;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum, lmax, rmax, dat;</span><br><span class="line">&#125; tr[<span class="number">200001</span>];</span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> str=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* <span class="built_in">endl</span>=<span class="string">"\n"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Reader</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        <span class="keyword">bool</span> EOF_FLG;</span><br><span class="line">        Reader():s(buf),t(buf),EOF_FLG(<span class="literal">false</span>) &#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s==t&amp;&amp;((t=(s=buf)+fread(buf,<span class="number">1</span>,str,<span class="built_in">stdin</span>))==s)?EOF:(*s++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Reader&amp;<span class="keyword">operator</span>&gt;&gt;(T&amp;x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(EOF_FLG)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> c=<span class="number">0</span>,d;</span><br><span class="line">            <span class="keyword">while</span>(c!=EOF&amp;&amp;(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>))d=c,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(c==EOF) &#123;</span><br><span class="line">                EOF_FLG=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="string">'-'</span>)x=-x;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cin</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        Writer():s(buf),t(buf+str) &#123;&#125;</span><br><span class="line">        ~Writer() &#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,s-buf,<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">            (s==t)?(fwrite(s=buf,<span class="number">1</span>,str,<span class="built_in">stdout</span>),*s++=c):(*s++=c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Writer&amp;<span class="keyword">operator</span>&lt;&lt;(T x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)<span class="keyword">return</span> pt(<span class="string">'0'</span>),*<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)pt(<span class="string">'-'</span>),x=-x;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> a[<span class="number">30</span>],t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x)a[t++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(t--)pt(a[t]+<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span>*s) &#123;</span><br><span class="line">            <span class="keyword">while</span>(*s)pt(*s++);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">max</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x,<span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    tr[rt].sum =tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    tr[rt].lmax= max (tr[rt&lt;&lt;<span class="number">1</span>].lmax, tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">    tr[rt].rmax= max (tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax, tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>].rmax);</span><br><span class="line">    tr[rt].dat = max (max(tr[rt&lt;&lt;<span class="number">1</span>].dat, tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat), tr[rt&lt;&lt;<span class="number">1</span>].rmax + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">        FastIO::<span class="built_in">cin</span>&gt;&gt;in;</span><br><span class="line">        tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = in;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build (lson);</span><br><span class="line">    build (rson);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">query</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> tr[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt;  mid) <span class="keyword">return</span> query (rson, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> query (lson, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        node ans,a,b;</span><br><span class="line">        a = query (lson,ql,qr);</span><br><span class="line">        b = query (rson,ql,qr);</span><br><span class="line">        ans.sum = a.sum + b.sum;</span><br><span class="line">        ans.dat = max (a.dat, a.rmax + b.lmax), ans.dat = max (ans.dat, b.dat);</span><br><span class="line">        ans.lmax= max (a.lmax, a.sum + b.lmax);</span><br><span class="line">        ans.rmax= max (b.rmax, b.sum + a.rmax);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FastIO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen ("nico.in","r",stdin);</span></span><br><span class="line">    FastIO::<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    FastIO::<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span> (m --) &#123;</span><br><span class="line">        FastIO::<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        FastIO::<span class="built_in">cout</span>&lt;&lt;query(<span class="number">1</span>, <span class="number">1</span>, n, x, y).dat&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GSS1 - Can you answer these queries I&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="GSS" scheme="https://novaellias.github.io/tags/GSS/"/>
    
      <category term="segment tree" scheme="https://novaellias.github.io/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 线段树模板</title>
    <link href="https://novaellias.github.io/2018/06/08/luogu-segment-tree/"/>
    <id>https://novaellias.github.io/2018/06/08/luogu-segment-tree/</id>
    <published>2018-06-08T11:29:26.000Z</published>
    <updated>2019-06-03T12:14:28.685Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>洛谷 线段树1 线段树2 模板</p></blockquote><a id="more"></a><h3 id="P3372-模板-线段树-1"><a href="#P3372-模板-线段树-1" class="headerlink" title="P3372 [模板] 线段树 1"></a>P3372 [模板] 线段树 1</h3><p><a href="https://www.luogu.org/problemnew/show/P3372" target="_blank" rel="noopener">Luogu P3372 线段树加</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="comment">//...略</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>); write (x); <span class="built_in">putchar</span> (<span class="string">'\n'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dmax 400001</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SMT</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum, tag;</span><br><span class="line">&#125; tr[dmax];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(Re <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">tr[rt].sum = tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[rt].l = l, tr[rt].r = r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;tr[rt].sum = read(); <span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build (rt&lt;&lt;<span class="number">1</span>, l, mid), build (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span> <span class="params">(Re <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rt &gt; <span class="number">200000</span> || !tr[rt].tag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> ls = rt&lt;&lt;<span class="number">1</span>, rs = rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">tr[ls].tag += tr[rt].tag, tr[rs].tag += tr[rt].tag;</span><br><span class="line">tr[ls].sum += tr[rt].tag * (tr[ls].r - tr[ls].l + <span class="number">1</span>),</span><br><span class="line">tr[rs].sum += tr[rt].tag * (tr[rs].r - tr[rs].l + <span class="number">1</span>);</span><br><span class="line">tr[rt].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r, Re ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> L = tr[rt].l, R = tr[rt].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) &#123;</span><br><span class="line">tr[rt].sum += val * (R - L + <span class="number">1</span>), tr[rt].tag += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">register</span> <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>; pushdown (rt);</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) modify (rt&lt;&lt;<span class="number">1</span>, l, r, val);</span><br><span class="line"><span class="keyword">if</span> (r  &gt; mid) modify (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r, val);</span><br><span class="line">update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> L = tr[rt].l, R = tr[rt].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> tr[rt].sum;</span><br><span class="line">pushdown (rt); <span class="keyword">register</span> <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) ret  = query (rt&lt;&lt;<span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (r  &gt; mid) ret += query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n=read(), m=read();</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> opt, x, y;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line">build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span> (m --)</span><br><span class="line">&#123;</span><br><span class="line">opt=read(), x=read(), y=read();</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) swap (x, y);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">2</span>) writelen (query (<span class="number">1</span>, x, y));</span><br><span class="line"><span class="keyword">else</span> z = read (), modify (<span class="number">1</span>, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3373-模板-线段树-2"><a href="#P3373-模板-线段树-2" class="headerlink" title="P3373 [模板]线段树 2"></a>P3373 [模板]线段树 2</h3><p><a href="https://www.luogu.org/problemnew/show/P3373" target="_blank" rel="noopener">Luogu P3372 加 乘</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="comment">//..略</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>); write (x); <span class="built_in">putchar</span> (<span class="string">'\n'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mul_mod</span> <span class="params">(<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> mo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret;</span><br><span class="line">__asm__ __volatile__ (<span class="string">"\tmull %%ebx\n\tdivl %%ecx\n"</span> : <span class="string">"=d"</span>(ret):<span class="string">"a"</span>(a),<span class="string">"b"</span>(b),<span class="string">"c"</span>(mo));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dmax 400001</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod(x) (((x)%modn+modn)%modn)</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> modn;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SMT</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum, add, mul;</span><br><span class="line">&#125; tr[dmax];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(Re <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">tr[rt].sum = tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[rt] = &#123;l, r, <span class="number">0l</span>l, <span class="number">0l</span>l, <span class="number">1l</span>l&#125;;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;tr[rt].sum = read()%modn; <span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build (rt&lt;&lt;<span class="number">1</span>, l, mid), build (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span> <span class="params">(Re <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rt &gt; <span class="number">200000</span> || (!tr[rt].add &amp;&amp; tr[rt].mul == <span class="number">1l</span>l)) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> ls = rt &lt;&lt; <span class="number">1</span>, rs = rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">tr[ls].mul = mul_mod (tr[ls].mul, tr[rt].mul, modn);</span><br><span class="line">tr[rs].mul = mul_mod (tr[rs].mul, tr[rt].mul, modn);</span><br><span class="line">tr[ls].add = mod (mul_mod (tr[ls].add , tr[rt].mul, modn) + tr[rt].add);</span><br><span class="line">tr[rs].add = mod (mul_mod (tr[rs].add, tr[rt].mul, modn) + tr[rt].add);</span><br><span class="line">tr[ls].sum = mod (mul_mod (tr[ls].sum, tr[rt].mul, modn) + mul_mod (tr[rt].add, (tr[ls].r - tr[ls].l + <span class="number">1</span>), modn));</span><br><span class="line">tr[rs].sum = mod (mul_mod (tr[rs].sum, tr[rt].mul, modn) + mul_mod (tr[rt].add, (tr[rs].r - tr[rs].l + <span class="number">1</span>), modn));</span><br><span class="line">tr[rt].add = <span class="number">0l</span>l, tr[rt].mul = <span class="number">1l</span>l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// opt==1: mul opt==2: add</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r, Re ll val, Re <span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> L = tr[rt].l, R = tr[rt].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) &#123;</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">tr[rt].add = mod (tr[rt].add + val),\</span><br><span class="line">tr[rt].sum = mod (tr[rt].sum + mul_mod (val, (R - L + <span class="number">1</span>), modn));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tr[rt].mul = mul_mod (tr[rt].mul, val, modn),\</span><br><span class="line">tr[rt].sum = mul_mod (tr[rt].sum, val, modn),\</span><br><span class="line">tr[rt].add = mul_mod (tr[rt].add, val, modn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; pushdown (rt); <span class="keyword">register</span> <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) modify (rt&lt;&lt;<span class="number">1</span>, l, r, val, opt);</span><br><span class="line"><span class="keyword">if</span> (r  &gt; mid) modify (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r, val, opt);</span><br><span class="line">update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> L = tr[rt].l, R = tr[rt].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> tr[rt].sum;</span><br><span class="line">pushdown (rt); <span class="keyword">register</span> <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) ret  = query (rt&lt;&lt;<span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (r  &gt; mid) ret += query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">return</span> ret % modn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n=read(), m=read(); modn=read();</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> opt, x, y;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line">build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span> (m --)</span><br><span class="line">&#123;</span><br><span class="line">opt=read(), x=read(), y=read();</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) swap (x, y);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">3</span>) writelen (query (<span class="number">1</span>,x,y));</span><br><span class="line"><span class="keyword">else</span> z=read()%modn,modify(<span class="number">1</span>,x,y,z,opt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;洛谷 线段树1 线段树2 模板&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="segment tree" scheme="https://novaellias.github.io/tags/segment-tree/"/>
    
      <category term="模板" scheme="https://novaellias.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>最短路模板</title>
    <link href="https://novaellias.github.io/2017/12/05/%E6%9C%80%E7%9F%AD%E8%B7%AF%E6%A8%A1%E6%9D%BF/"/>
    <id>https://novaellias.github.io/2017/12/05/最短路模板/</id>
    <published>2017-12-05T06:47:00.000Z</published>
    <updated>2019-06-03T12:13:53.452Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SPFA 堆优化迪杰斯特拉<br>C++模板</p></blockquote><a id="more"></a><h3 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h3><p><a href="https://www.luogu.org/problemnew/show/P3371" target="_blank" rel="noopener">Luogu P3371</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; c ^ <span class="string">'-'</span>) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">min</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a&lt;b? a:b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], nxt[maxm], too[maxm], ecnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> wei[maxm], dis[maxn];</span><br><span class="line"><span class="keyword">int</span> que[maxm*<span class="number">100</span> + <span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n = read (), m = read (), sta = read ();</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) dis[i] = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> fr, to, va;</span><br><span class="line"><span class="keyword">while</span> (m --)</span><br><span class="line">&#123;</span><br><span class="line">fr = read (), to = read (), va = read ();</span><br><span class="line">nxt[++ ecnt] = head[fr], head[fr] = ecnt, too[ecnt] = to, wei[ecnt] = va;</span><br><span class="line">&#125;</span><br><span class="line">dis[sta] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> hd = <span class="number">0</span>, tl = <span class="number">1</span>; que[tl] = sta;</span><br><span class="line"><span class="keyword">while</span> (hd &lt; tl)</span><br><span class="line">&#123;</span><br><span class="line">fr = que[++ hd], vis[fr] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = head[fr]; i; i = nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">to = too[i], va = wei[i];</span><br><span class="line"><span class="keyword">if</span> (dis[to] &gt; dis[fr] + va)</span><br><span class="line">&#123;</span><br><span class="line">dis[to] = dis[fr] + va;</span><br><span class="line"><span class="keyword">if</span> (!vis[to]) vis[to] = <span class="literal">true</span>, que[++ tl] = to;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dis[i]&lt;<span class="number">0</span>) dis[i] = -dis[i], <span class="built_in">putchar</span> (<span class="string">'-'</span>);</span><br><span class="line">write (dis[i]), <span class="built_in">putchar</span> (<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化迪杰斯特拉"><a href="#堆优化迪杰斯特拉" class="headerlink" title="堆优化迪杰斯特拉"></a>堆优化迪杰斯特拉</h3><p><a href="https://www.luogu.org/problemnew/show/P4779" target="_blank" rel="noopener">Luogu P4779</a></p><h4 id="OLD-2017"><a href="#OLD-2017" class="headerlink" title="OLD (2017)"></a>OLD (2017)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse2"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 200001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inff 2147483647</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">char</span> c = getchar(); <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c) &amp;&amp; c != <span class="string">'-'</span>) c = getchar();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'-'</span>) c = getchar(), m = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = getchar();</span><br><span class="line">    <span class="keyword">if</span> (m) <span class="keyword">return</span> -x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fastwrite</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) fastwrite(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fastwritespace</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    fastwrite(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> node&amp; aa, <span class="keyword">const</span> node&amp; bb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aa.val &gt; bb.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, fro, to, w;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"><span class="built_in">vector</span> &lt;pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; data[maxn];</span><br><span class="line">__gnu_pbds::priority_queue &lt;node, cmp, pairing_heap_tag&gt; nico;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    n = read (), m = read (), s = read ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        fro = read (), to = read (), w = read ();</span><br><span class="line">        data[fro].push_back (make_pair (to, w));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dis[i] = inff;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    nico.push ((node) &#123;</span><br><span class="line">        <span class="number">0</span>, s</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!nico.empty ()) &#123;</span><br><span class="line">        fro = nico.top ().name;</span><br><span class="line">        nico.pop ();</span><br><span class="line">        <span class="keyword">if</span> (visit[fro]) <span class="keyword">continue</span>;</span><br><span class="line">        visit[fro] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data[fro].size (); i ++) &#123;</span><br><span class="line">            to = data[fro][i].first;</span><br><span class="line">            w = data[fro][i].second;</span><br><span class="line">            <span class="keyword">if</span> (!visit[to] &amp;&amp; dis[fro] + w &lt; dis[to]) &#123;</span><br><span class="line">                dis[to] = dis[fro] + w;</span><br><span class="line">                nico.push ((node) &#123;</span><br><span class="line">                    dis[to], to</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) fastwritespace (dis[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NEW-2018-11-5"><a href="#NEW-2018-11-5" class="headerlink" title="NEW(2018/11/5)"></a>NEW(2018/11/5)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::priority_queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nwrite</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;write (x); <span class="built_in">putchar</span> (<span class="string">' '</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 200001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id, val;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a, node b) &#123;</span><br><span class="line"><span class="keyword">return</span> a.val &gt; b.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue &lt;node&gt; que;</span><br><span class="line"><span class="keyword">int</span> head[maxn], wei[maxm], too[maxm], nxt[maxm], ecnt;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n = read (), m = read (), sta = read ();</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> fr, to, va;</span><br><span class="line"><span class="keyword">while</span> (m --)</span><br><span class="line">&#123;</span><br><span class="line">fr = read (), nxt[++ ecnt] = head[fr],\</span><br><span class="line">head[fr] = ecnt, too[ecnt] = read (), wei[ecnt] = read ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span> (dis, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span> dis); dis[sta] = <span class="number">0</span>;</span><br><span class="line">que.push (&#123;sta, <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!que.empty ())</span><br><span class="line">&#123;</span><br><span class="line">fr = que.top ().id, que.pop ();</span><br><span class="line"><span class="keyword">if</span> (!vis[fr])</span><br><span class="line">&#123;</span><br><span class="line">vis[fr] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = head[fr]; i; i = nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">to = too[i], va = wei[i];</span><br><span class="line"><span class="keyword">if</span> (dis[fr] + va &lt; dis[to])</span><br><span class="line">&#123;</span><br><span class="line">dis[to] = dis[fr] + va;</span><br><span class="line">que.push (&#123;to, dis[to]&#125;); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) nwrite (dis[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SPFA 堆优化迪杰斯特拉&lt;br&gt;C++模板&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="模板" scheme="https://novaellias.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="最短路" scheme="https://novaellias.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
</feed>
