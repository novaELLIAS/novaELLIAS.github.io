<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Next Dream...</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="brynhild.online/"/>
  <updated>2020-03-18T08:45:08.144Z</updated>
  <id>brynhild.online/</id>
  
  <author>
    <name>ELLIAS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>珂学上网 基于VultrVPS的SSR服务器的基本搭建</title>
    <link href="brynhild.online/vultr_ssr_vpn_buildup/"/>
    <id>brynhild.online/vultr_ssr_vpn_buildup/</id>
    <published>2020-03-01T22:08:23.000Z</published>
    <updated>2020-03-18T08:45:08.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vultr SSR VPS 锐速 CentOS VPN GoogleBBR 防火墙</p></blockquote><a id="more"></a><h3 id="购买-VPS-服务器">购买 VPS 服务器</h3><p>我们应该选择国外的 VPS(Virtual Private Server) 提供商,这里推荐 <a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a>,性价比较高,最低有 $2.5/m 的,但其只支持 IPv6 ,所以个人搭建推荐 $3.5/m.</p><p>目前新账号充值 $10 可赠送 $50,是相当划算的.如果想要通过注册多个账号来减少资费,请务必注意 IP 地址及 GPS 定位.</p><h3 id="VPS服务器的搭建和连接">VPS服务器的搭建和连接</h3><h4 id="服务器搭建">服务器搭建</h4><p>在 Product 页点击加号新建服务器.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/1.png" alt=""></p></fancybox><p>选择 Cloud Compute.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/2.png" alt=""></p></fancybox><p>选择自己熟悉的 OS.这里以 CentOS 为例. CentOS 版本建议选6以上,否则也许会出现未知的问题.</p><p>Vultr 提供多个地区的服务器,建议一次性搭建多台之后逐个测试速度,速度较慢的删除即可.服务器按照小时计费,不需要担心资费浪费问题.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/3.png" alt=""></p></fancybox><p>扩展功能按需要选择.这里建议勾选 Enable IPv6.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/4.png" alt=""></p></fancybox><p>服务器搭建完成后可以在 Products 页面看到.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/5.png" alt=""></p></fancybox><h4 id="服务器连接">服务器连接</h4><p>在服务器页面,我们需要记下服务器的 IP 用户名 密码.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/6.png" alt=""></p></fancybox><p>我们需要终端用 SSH 来连接 VPS.在 Windows 操作系统上推荐 Xshell. Vultr 网站上也提供了命令行,但不推荐使用.</p><h5 id="在Xshell上连接">在Xshell上连接</h5><p>文件-&gt;新建</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/7.png" alt=""></p></fancybox><p>在连接中填写相关内容.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/8.png" alt=""></p></fancybox><p>在用户身份验证中填写用户名和密码.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/9.png" alt=""></p></fancybox><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/15.png" alt=""></p></fancybox><p>连接即可.</p><h5 id="在终端连接">在终端连接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh your_username@server_IP -p 22 (22是你VPS的SSH端口)</span><br></pre></td></tr></table></figure><p>端口可以省略.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/22.jpg" alt=""></p></fancybox><h3 id="相关内容安装">相关内容安装</h3><h4 id="安装SSR">安装SSR</h4><p>安装 wegt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure><p>安装 SSR</p><blockquote><p>该脚本由 <a href="http://www.qcgzxw.cn" target="_blank" rel="noopener">www.qcgzxw.cn</a> 提供.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</span><br></pre></td></tr></table></figure><p>SSR 相关配置依需要而定.</p><p>搭建成功后会显示 IP,端口,密码,协议等,用于填写 ShadowsocksR 配置信息.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/12.png" alt=""></p></fancybox><h4 id="使用锐速为-SSR-加速">使用锐速为 SSR 加速</h4><p>锐速模块依赖于内核,基本原理是对丢包情况进行评估,并重发可能丢的数据包,即锐速多倍发包,在一定程度上能够提高 VPN 速度.</p><p>首先查询系统内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>如返回值以 2 开头,说明服务器为 CentOS6,可直接安装锐速.</p><p>如返回值以 3 开头,需要对内核降级.</p><p>另: 如果已经安装过 Google BBR 拥塞控制算法,那么无法安装锐速.</p><p>CentOS6 安装锐速:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install <span class="string">'2.6.32-642.el6.x86_64'</span></span><br></pre></td></tr></table></figure><p>更高版本使用以下命令对内核降级:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh &amp;&amp; bash rskernel.sh</span><br></pre></td></tr></table></figure><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/13.png" alt=""></p></fancybox><p>如图所示,系统为 CentOS7,更换内核后系统重启.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/14.png" alt=""></p></fancybox><p>重新连接后使用如下指令安装锐速:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure><p>在过程中图示的三个选项默认即可.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/16.png" alt=""></p></fancybox><p>下图为安装运行成功.与锐速相关的指令会在文末给出.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ssr_basic_setup/17.png" alt=""></p></fancybox><h4 id="使用-Google-BBR-为-SSR-加速">使用 Google BBR 为 SSR 加速</h4><p>这是一个 TCP 拥塞控制算法.Google BBR 的 github 页面: <a href="https://github.com/google/bbr" target="_blank" rel="noopener">https://github.com/google/bbr</a></p><blockquote><p>警告: Google BBR 需要升级内核,锐速需要降级内核,二者不可兼得.</p></blockquote><p>卸载原版内核 headers.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove kernel-headers</span><br></pre></td></tr></table></figure><p>安装高版本内核 headers.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml-headers</span><br></pre></td></tr></table></figure><p>升级 CentOS 系统内核.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install kernel-ml kernel-ml-devel</span><br></pre></td></tr></table></figure><p>升级 headers.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install kernel-ml-headers</span><br></pre></td></tr></table></figure><p>对于 CentOS6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/^default=.*/default=0/g'</span> /boot/grub/grub.conf</span><br></pre></td></tr></table></figure><p>对于更高版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure><p>使用安装脚本安装 Google BBR.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure><blockquote><p>这个脚本由 <a href="https://teddysun.com/" target="_blank" rel="noopener">秋水逸冰</a> 提供.</p></blockquote><p>安装后重启服务器,检查 BBR 是否启动.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>返回值有 tcp_bbr 模块即说明 BBR 已启动.并不是所有的 VPS 都会有此返回值,若没有也属正常.</p><h3 id="SSR多端口配置">SSR多端口配置</h3><p>使用 Vim 打开配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>原有内容大致如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: <span class="number">25565</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"www.qcgzxw.cn"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"udp_timeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_sha1_v4_compatible"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"http_simple_compatible"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"connect_verbose_info"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除原有的 <code>server_port</code> 及 <code>password</code> ,新增 <code>port_password</code> ,前面是端口,后面是密码,需要注意格式问题.</p><p>示例更改后如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"1096"</span>:<span class="string">"hanyuu"</span>,</span><br><span class="line">        <span class="attr">"1919"</span>:<span class="string">"senpai"</span>,</span><br><span class="line">        <span class="attr">"2020"</span>:<span class="string">"evolution"</span>,</span><br><span class="line">        <span class="attr">"417"</span>:<span class="string">"morsunhy"</span>,</span><br><span class="line">        <span class="attr">"2333"</span>:<span class="string">"morsun"</span>,</span><br><span class="line">        <span class="attr">"11451"</span>:<span class="string">"niconiconi"</span>,</span><br><span class="line">        <span class="attr">"10960"</span>:<span class="string">"hanyuu"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"udp_timeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_sha1_v4_compatible"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"http_simple_compatible"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"connect_verbose_info"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后修改防火墙配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/firewalld/zones/public.xml</span><br></pre></td></tr></table></figure><p>原有内容大致如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"dhcpv6-client"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"ssh"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"25565"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"25565"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zone</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入新加入的端口,一行 tcp,一行 udp.</p><p>修改后内容大致如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"dhcpv6-client"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"ssh"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"1096"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"1096"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"1919"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"1919"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"2020"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"2020"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"2333"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"2333"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"11451"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"11451"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"417"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"417"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"10960"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"10960"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zone</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启 SSR.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks restart</span><br></pre></td></tr></table></figure><p>重启防火墙.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>也可以参考下文的指令按照类似流程安装.</p><h3 id="SSR的使用">SSR的使用</h3><p>下载客户端,配置并连接即可.</p><p>Shadowsocks:  <a href="https://shadowsocks.org/" target="_blank" rel="noopener">https://shadowsocks.org/</a></p><p>ShadowsocksR: <a href="https://github.com/Anankke/SSRR-Windows/" target="_blank" rel="noopener">https://github.com/Anankke/SSRR-Windows/</a></p><h3 id="相关指令扩展">相关指令扩展</h3><h4 id="SSR">SSR</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动SSR</span></span><br><span class="line">/etc/init.d/shadowsocks start</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止SSR</span></span><br><span class="line">/etc/init.d/shadowsocks stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启SSR</span></span><br><span class="line">/etc/init.d/shadowsocks restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#状态SSR</span></span><br><span class="line">/etc/init.d/shadowsocks status</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载SSR</span></span><br><span class="line">./shadowsocks-all.sh uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改配置参数</span></span><br><span class="line">vim /etc/shadowsocks-r/config.json</span><br></pre></td></tr></table></figure><h4 id="锐速">锐速</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看运行状态</span></span><br><span class="line">/appex/bin/serverSpeeder.sh status</span><br><span class="line">  </span><br><span class="line"><span class="comment">#启动锐速</span></span><br><span class="line">/appex/bin/serverSpeeder.sh start</span><br><span class="line">  </span><br><span class="line"><span class="comment">#停止锐速</span></span><br><span class="line">/appex/bin/serverSpeeder.sh stop</span><br><span class="line">  </span><br><span class="line"><span class="comment">#重启锐速</span></span><br><span class="line">/appex/bin/serverSpeeder.sh restart</span><br><span class="line">  </span><br><span class="line"><span class="comment">#卸载锐速</span></span><br><span class="line">/appex/bin/serverSpeeder.sh uninstall</span><br></pre></td></tr></table></figure><h4 id="防火墙">防火墙</h4><h5 id="CentOS7之前版本-iptables-命令">CentOS7之前版本 iptables 命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看已经开放的端口:</span></span><br><span class="line">/etc/init.d/iptables status</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启端口</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 端口 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存设置</span></span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动防火墙(永久)</span></span><br><span class="line">chkconfig iptables on</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止防火墙(永久)</span></span><br><span class="line">chkconfig iptables off</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动防火墙(暂时,重启失效)</span></span><br><span class="line">service iptables start</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙(暂时,重启失效)</span></span><br><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><h5 id="CentOS7-firewall-命令">CentOS7 firewall 命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看已经开放的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启端口(永久)</span></span><br><span class="line">firewall-cmd --zone=public --add-port=端口/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止防火墙</span></span><br><span class="line">systemctl stop firewalld.service </span><br><span class="line"></span><br><span class="line"><span class="comment">#禁止开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><blockquote><p>博客内容遵循 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed" target="_blank" rel="noopener">Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)</a> 协议.</p><p>本文永久链接: <a href="https://brynhild.online/vultr_ssr_vpn_buildup/">https://brynhild.online/vultr_ssr_vpn_buildup/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Vultr SSR VPS 锐速 CentOS VPN GoogleBBR 防火墙&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="VPN" scheme="brynhild.online/categories/VPN/"/>
    
    
      <category term="VPN" scheme="brynhild.online/tags/VPN/"/>
    
      <category term="VPS" scheme="brynhild.online/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>扫盲向 利用OBS虚拟摄像头在网课上摸鱼</title>
    <link href="brynhild.online/obs_internet_class_fishing/"/>
    <id>brynhild.online/obs_internet_class_fishing/</id>
    <published>2020-03-01T02:08:23.000Z</published>
    <updated>2020-03-18T10:31:22.384Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Windows OBS OBS-VirtualCam Facerig</p></blockquote><a id="more"></a><h3 id="INTRODUCTION">INTRODUCTION</h3><blockquote><p>「摸鱼之心，人皆有之，咸者能毋丧耳。」    – Hanyuu ELLIAS</p></blockquote><p>近期不少同学问我网课摸鱼的事,于是有了这个扫盲向博客.</p><p>当然,您也可以用它来在课上做一些不对劲的事,</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND@2.2.32/img/OBS_internet_class/10.png" alt=""></p></fancybox><h3 id="REQUIREMENT">REQUIREMENT</h3><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/OBS_internet_class/1.png" alt=""></p><p><a href="https://obsproject.com/" target="_blank" rel="noopener">Open Broadcaster Software</a></p><p><a href="https://obsproject.com/forum/resources/obs-virtualcam.539/" target="_blank" rel="noopener">OBS-VirtualCam</a></p><p>Install and run.</p><h3 id="USE">USE</h3><h4 id="INPUT">INPUT</h4><p>在&quot;来源&quot;中点击加号添加.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/OBS_internet_class/4.png" alt=""></p></fancybox><h5 id="作为视频或图像">作为视频或图像</h5><p>录一段学习时候的视频或选择一张贴纸.</p><p>选择 VLC 视频源或图像.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/OBS_internet_class/5.png" alt=""></p></fancybox><p>点击加号添加文件或路径.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/OBS_internet_class/6.png" alt=""></p></fancybox><h5 id="作为视频源">作为视频源</h5><p>添加视频捕获装置</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/OBS_internet_class/7.png" alt=""></p></fancybox><p>作为示例,这里选择了 Facerig 的虚拟摄像头.</p><p><s>我很可爱,请给我钱!</s></p><blockquote><p>这个模型来自创意工坊,作者为 toribako145.</p></blockquote><p>确保其被激活.分辨率选项视情况而定.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/OBS_internet_class/8.png" alt=""></p></fancybox><p>将画面充满屏幕.</p><p>用上下箭头调整前后位置.确保其出于可视状态.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/OBS_internet_class/9.png" alt=""></p></fancybox><h4 id="OUTPUT">OUTPUT</h4><p>工具-&gt;虚拟摄像头.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/OBS_internet_class/2.png" alt=""></p></fancybox><p>选择目标摄像头(默认即可),水平翻转及保持长宽比例视情况使用.</p><p>缓冲帧视性能调整.</p><p>启动即可.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/OBS_internet_class/3.png" alt=""></p></fancybox><h4 id="IN-CLASS">IN CLASS</h4><p>选择刚才设置的目标摄像头即可.</p><h3 id="OTHERS">OTHERS</h3><ol><li>低配置设备可在设置-&gt;视频中调整分辨率来缓解卡顿.</li><li>不使用物理摄像头时将其遮住是个好习惯.</li><li>使用Facerig时请留意各方面的版权限制.</li><li>摸鱼有风险,使用需谨慎.</li><li>请各位&quot;务必&quot;以学业为重!</li></ol><blockquote><p>博客内容遵循 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed" target="_blank" rel="noopener">Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)</a> 协议.</p><p>本文永久链接: <a href="https://brynhild.online/obs_internet_class_fishing/">https://brynhild.online/obs_internet_class_fishing/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Windows OBS OBS-VirtualCam Facerig&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Trick" scheme="brynhild.online/categories/Trick/"/>
    
    
      <category term="OBS" scheme="brynhild.online/tags/OBS/"/>
    
  </entry>
  
  <entry>
    <title>网易云VIP歌曲NCM格式解密</title>
    <link href="brynhild.online/ncm_unlock/"/>
    <id>brynhild.online/ncm_unlock/</id>
    <published>2020-01-11T08:08:00.000Z</published>
    <updated>2020-03-18T08:47:24.725Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Windows Android ncmdump 网易云</p></blockquote><a id="more"></a><h4 id="INTRODUCTION">INTRODUCTION</h4><p>当发现从网易云音乐下载的 VIP 音乐成了这副样子</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ncm/3.png" alt=""></p></fancybox><p>不禁要吐槽:</p><p>这真是太(    ),太(    )了. (中文填空,每空2字)</p><p>本文将提供几种 NCM 格式的解密方案.</p><h4 id="Web">Web</h4><h5 id="Dev-Tools">Dev Tools</h5><p>在官网播放页&quot;偷&quot;缓存,发现了看起来对劲的东西,果断下载+转码,用 mp3tag 加入封面及歌曲信息,大功告成.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ncm/4.png" alt=""></p></fancybox><h5 id="音乐解锁-By-IXarea">音乐解锁 - By IXarea</h5><p><a href="https://github.com/ix64/unlock-music" target="_blank" rel="noopener">unlock-music on GitHub</a></p><p>音乐解锁用于移除已购音乐的加密保护.目前支持网易云音乐(ncm) QQ音乐(qmc,mflac,mgg,tkm)以及其他格式,并使用 MIT 许可协议开放源代码.其使用浏览器对本地文件进行操作,不需要将文件上传.</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ncm/1.png" alt=""></p></fancybox><h4 id="Windows">Windows</h4><p>使用 <a href="https://github.com/yoki123/ncmdump" target="_blank" rel="noopener">ncmdump</a> 或 <a href="https://github.com/anonymous5l/ncmdump-gui" target="_blank" rel="noopener">ncmdump-gui</a>.链接指向对应的GitHub仓库.</p><p>考虑到 GitHub 要&quot;夜缒而出&quot;,给出一定版本的下载地址:</p><p><a href="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/download/ncm/Release.zip" target="_blank" rel="noopener">Release.zip, ncmdump-gui@25Jan2019</a></p><blockquote><p>大小: 219129 字节</p><p>MD5: D90B1FDFCEC35DD3E5BDE912AB35C436</p><p>SHA1: B57308A46244823EC44996E62AD45FE5DD32BF26</p><p>CRC32: 36B0CD33</p></blockquote><p><a href="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/download/ncm/ncmdump-gui-lastest.tar.gz" target="_blank" rel="noopener">ncmdump-gui-lastest.tar.gz, ncmdump-gui@25Jan2019</a></p><blockquote><p>大小: 72943 字节</p><p>MD5: D21AC64AFD09270C0ABFFADD62D50ECF</p><p>SHA1: 87186625F385E70102DE58E5B8414F99EF1653F6</p><p>CRC32: 7A91F3AE</p></blockquote><p><a href="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/download/ncm/ncmdump-windows-amd64.zip" target="_blank" rel="noopener">ncmdump-windows-amd64.zip, ncmdump@v0.3.0</a></p><blockquote><p>大小: 3318258 字节</p><p>MD5: 9720D5EE3523D377E7F0F7D499665043</p><p>SHA1: 9E4F216562B7CED2533A098255FC16794AAC05CE</p><p>CRC32: 17FC5336</p></blockquote><p><a href="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/download/ncm/ncmdump-darwin-amd64.zip" target="_blank" rel="noopener">ncmdump-darwin-amd64.zip, ncmdump@v0.3.0</a></p><blockquote><p>大小: 3461822 字节</p><p>MD5: 0CD5CB0A46DE5532CCCD62CD22261E3F</p><p>SHA1: A8DDFDA576D703E90F7491BCF6D2A907934534A2</p><p>CRC32: A2F413A9</p></blockquote><p><a href="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/download/ncm/ncmdump-0.3.0.tar.gz" target="_blank" rel="noopener">ncmdump-0.3.0.tar.gz, ncmdump@v0.3.0</a></p><blockquote><p>大小: 104499 字节</p><p>MD5: 23896D0FEDE39F976003661ACFEF810D</p><p>SHA1: 85EE97C5CD995FA88616A8523E6862A1836D9D08</p><p>CRC32: B142A5B6</p></blockquote><h4 id="Android">Android</h4><h5 id="DroidNCM">DroidNCM</h5><p>安卓版的 ncmdump.GitHub 页面: <a href="https://github.com/bunnyblueair/DroidNCM" target="_blank" rel="noopener">https://github.com/bunnyblueair/DroidNCM</a></p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ncm/2.png" alt=""></p></fancybox><p>下载地址:</p><p><a href="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/download/ncm/ncm-release.apk" target="_blank" rel="noopener">ncm-release.apk, DroidNCM@v2.1.1</a></p><blockquote><p>大小: 3054417 字节</p><p>MD5: 4F42A5244E817B485C1DE1CA0FE4E8F6</p><p>SHA1: B70F7A1401A9DBC858C1E1CF87AF49E9442977D0</p><p>CRC32: B3D2E106</p></blockquote><p><a href="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/download/ncm/DroidNCM-2.1.1.tar.gz" target="_blank" rel="noopener">DroidNCM-2.1.1.tar.gz, DroidNCM@v2.1.1</a></p><blockquote><p>大小: 9360077 字节</p><p>MD5: 073D92EA36E3EE388E95C0651D3886DA</p><p>SHA1: F8C50937C661C00D225C00E954F1DA96065A6D38</p><p>CRC32: F99D094B</p></blockquote><blockquote><p>据说这个软件兼容性不是很好,建议下载源码自行编译.</p></blockquote><h5 id="铃声-操作繁琐-不推荐">铃声(操作繁琐,不推荐)</h5><p>在客户端中将歌曲设置为铃声</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ncm/5.jpg" alt=""></p></fancybox><p>每次截取60s,直到全部截取</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ncm/6.jpg" alt=""></p></fancybox><p>在如图所示的目录中会生成解密后的文件</p><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/ncm/7.jpg" alt=""></p></fancybox><p>加.mp3后缀,使用格式工厂拼接即可.</p><blockquote><p>博客内容遵循 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed" target="_blank" rel="noopener">Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)</a> 协议.</p><p>本文永久链接: <a href="https://brynhild.online/ncm_unlock/">https://brynhild.online/ncm_unlock/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Windows Android ncmdump 网易云&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Trick" scheme="brynhild.online/categories/Trick/"/>
    
    
      <category term="Trick" scheme="brynhild.online/tags/Trick/"/>
    
  </entry>
  
  <entry>
    <title>buzzer scale define</title>
    <link href="brynhild.online/buzzer-define/"/>
    <id>brynhild.online/buzzer-define/</id>
    <published>2019-07-07T02:29:42.000Z</published>
    <updated>2020-03-02T06:46:42.162Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>buzzer scale define</p></blockquote><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ddo 262</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dre 294</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dmi 330</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dfa 349</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dso 392</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dla 440</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dsi 494</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> do 523</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re 578</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mi 659</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fa 698</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> so 784</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> la 880</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> si 988</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> udo 1046</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ure 1175</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> umi 1318</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ufa 1480</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uso 1568</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ula 1760</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> usi 1976</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sddo 277</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sdre 311</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sdfa 370</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sdso 415</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sdla 466</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sdo 554</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sre 622</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sfa 740</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sso 831</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sla 932</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sudo 1046</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sure 1245</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sufa 1480</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suso 1661</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sula 1865</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;buzzer scale define&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="buzzer" scheme="brynhild.online/categories/buzzer/"/>
    
    
      <category term="Template" scheme="brynhild.online/tags/Template/"/>
    
      <category term="buzzer" scheme="brynhild.online/tags/buzzer/"/>
    
  </entry>
  
  <entry>
    <title>ELLIAS的OI之路</title>
    <link href="brynhild.online/oi_history/"/>
    <id>brynhild.online/oi_history/</id>
    <published>2019-02-02T05:57:07.000Z</published>
    <updated>2020-03-11T15:35:32.002Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从录取到退役</p><p>ELLIAS的OI之路</p></blockquote><a id="more"></a><h3 id="2017-7-24-YM录取">2017.7.24 YM录取</h3><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/20170724_135654.jpg" alt="2017.7.24.1"></p></fancybox><h3 id="2017-12-29-YM1-12新年联欢会OIer合影">2017.12.29 YM1.12新年联欢会OIer合影</h3><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/72d39e754c42233b.jpg" alt="2017.12.29.1"></p></fancybox><h3 id="2018-1-19-先修调人-YM1-12教室">2018.1.19 先修调人 YM1.12教室</h3><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/20180119_121125.jpg" alt="2018.1.19.1"></p></fancybox><h3 id="2018-4-7-窗外风景-非正式参加LN胜选">2018.4.7 窗外风景 非正式参加LN胜选</h3><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/20180407_070025.jpg" alt="2018.4.7.1"></p><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/20180407_070031.jpg" alt="2018.4.7.2"></p></fancybox><h3 id="2018-7-16-YMOI校内集训">2018.7.16 YMOI校内集训</h3><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/20180716_124407.jpg" alt="2018.7.16.1"></p></fancybox><h3 id="2018-7-25-24中集训">2018.7.25 24中集训</h3><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/20180725_175848.jpg" alt="2018.7.25.1"><br><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/20180725_175938.jpg" alt="2018.7.25.2"><br><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/542e2e5ec1194fa8.jpg" alt="2018.7.25.3"></p></fancybox><h3 id="2019-NOIp2018省一退役">2019 NOIp2018省一退役</h3><fancybox><p><img src="https://cdn.jsdelivr.net/gh/novaELLIAS/CDN_for_ND/img/oi_history/20181219134050.jpg" alt="NOIp2018省一"></p></fancybox><h3 id="次の旅を楽しみにしています">次の旅を楽しみにしています!</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从录取到退役&lt;/p&gt;
&lt;p&gt;ELLIAS的OI之路&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="memory" scheme="brynhild.online/categories/memory/"/>
    
    
  </entry>
  
  <entry>
    <title>倍增 洛谷P1967 货车运输</title>
    <link href="brynhild.online/luogu-P1967-noip2018-day-1/"/>
    <id>brynhild.online/luogu-P1967-noip2018-day-1/</id>
    <published>2018-11-09T13:20:49.000Z</published>
    <updated>2019-06-10T11:32:06.832Z</updated>
    
    <content type="html"><![CDATA[<p>NOIp2018 day-1<br>RP倍增祈愿<br><a href="https://www.luogu.org/problemnew/show/P1967" target="_blank" rel="noopener">luogu P1967</a></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::sort;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxe 50001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'-'</span>) c = gc(), m = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="string">'0'</span>), c = gc();</span><br><span class="line">    <span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>); write (x); <span class="built_in">putchar</span> (<span class="string">'\n'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">min</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a&lt;b? a:b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fr, to, va;</span><br><span class="line">&#125; edge[maxe];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.va &gt; b.va;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], nxt[maxn], too[maxn], wei[maxn], ecnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge_d</span> <span class="params">(Re <span class="keyword">int</span> fr, Re <span class="keyword">int</span> to, Re <span class="keyword">int</span> va)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++ ecnt]=head[fr], head[fr]=ecnt, too[ecnt]=to, wei[ecnt]=va;</span><br><span class="line">    nxt[++ ecnt]=head[to], head[to]=ecnt, too[ecnt]=fr, wei[ecnt]=va;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span> <span class="params">(<span class="keyword">register</span> <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x ^ fa[x]) x = fa[x] = fa[fa[x]];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Kruskal</span> <span class="params">(Re <span class="keyword">int</span> n, Re <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j, fr, to, va, ffr, fto;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fr=edge[i].fr, to=edge[i].to, ffr=find(fr), fto=find(to);</span><br><span class="line">        <span class="keyword">if</span> (ffr ^ fto) addedge_d (fr, to, edge[i].va), fa[ffr]=fto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fl[maxn];</span><br><span class="line"><span class="keyword">int</span> ex[maxn][<span class="number">18</span>], ew[maxn][<span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build_tree</span> <span class="params">(Re <span class="keyword">int</span> x, Re <span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j, to, va;</span><br><span class="line">    <span class="keyword">if</span> (!fl[x])</span><br><span class="line">    &#123;</span><br><span class="line">        fl[x] = dep;</span><br><span class="line">        <span class="keyword">for</span> (i=head[x]; i; i=nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            to=too[i], va=wei[i];</span><br><span class="line">            <span class="keyword">if</span> (!fl[to])</span><br><span class="line">            &#123;</span><br><span class="line">                ex[to][<span class="number">0</span>] = x, ew[to][<span class="number">0</span>] = va;</span><br><span class="line">                build_tree (to, dep + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build_forest</span> <span class="params">(Re <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j, fr, to, va;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!fl[i]) &#123;</span><br><span class="line">            ew[i][<span class="number">0</span>] = <span class="number">0x3f3f3f3f</span>, ex[i][<span class="number">0</span>] = i;</span><br><span class="line">            build_tree (i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">lca_init</span> <span class="params">(Re <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">17</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            ex[j][i] = ex[ex[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">            ew[j][i] = min (ew[ex[j][i<span class="number">-1</span>]][i<span class="number">-1</span>], ew[j][i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_lca</span> <span class="params">(Re <span class="keyword">int</span> fr, Re <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (find(fr) ^ find(to)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> ret=<span class="number">0x3f3f3f3f</span>, i, j;</span><br><span class="line">    <span class="keyword">if</span> (fl[fr] &gt; fl[to]) swap (fr, to);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">17</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (fl[ex[to][i]] &gt;= fl[fr])</span><br><span class="line">            ret=min (ret, ew[to][i]), to=ex[to][i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (fr == to) <span class="keyword">return</span> ret;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">17</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex[fr][i] ^ ex[to][i])</span><br><span class="line">        &#123;</span><br><span class="line">            ret = min (ret, min (ew[to][i], ew[fr][i]));</span><br><span class="line">            to=ex[to][i], fr=ex[fr][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ret=min(ret,min(ew[fr][<span class="number">0</span>], ew[to][<span class="number">0</span>]));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j, fr, to, va;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n=read(), m=read();</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; ++i) fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fr=read(), to=read(), va=read();</span><br><span class="line">        edge[i] = &#123;fr, to, va&#125;;</span><br><span class="line">    &#125; sort (edge+<span class="number">1</span>, edge+m+<span class="number">1</span>, cmp);</span><br><span class="line">    Kruskal (n, m);</span><br><span class="line">    build_forest (n);</span><br><span class="line">    lca_init (n);</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> _ = read ();</span><br><span class="line">    <span class="keyword">while</span> (_ --) writelen (get_lca(read(), read()));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NOIp2018 day-1&lt;br&gt;
RP倍增祈愿&lt;br&gt;
&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1967&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;luogu P1967&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="Template" scheme="brynhild.online/tags/Template/"/>
    
      <category term="倍增" scheme="brynhild.online/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="生成树" scheme="brynhild.online/tags/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="并查集" scheme="brynhild.online/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>OPTIMIZATION</title>
    <link href="brynhild.online/OPTIMIZE/"/>
    <id>brynhild.online/OPTIMIZE/</id>
    <published>2018-11-07T11:17:42.000Z</published>
    <updated>2019-06-10T11:32:32.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>编译选项 快读 快写 内嵌asm</p></blockquote><a id="more"></a><p><a href="https://ellias.blog.luogu.org/optimize-1" target="_blank" rel="noopener">LuoguBlog</a></p><h3 id="Fast-Read-Write">Fast Read &amp; Write</h3><h4 id="ELLIAS-Old">ELLIAS_Old</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fastio</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">14</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">14</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getint</span> <span class="params">(<span class="keyword">int</span> &amp;to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (c!=<span class="string">'-'</span>&amp;&amp;(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>) &amp;&amp; c != <span class="string">'-'</span>) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) c = gc(), m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>, c = gc();</span><br><span class="line"><span class="keyword">if</span> (m) <span class="keyword">return</span> -x; <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getuint</span> <span class="params">(<span class="keyword">int</span> &amp;to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = gc();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) c = gc();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>, c = gc();</span><br><span class="line">to = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getdou</span> <span class="params">(<span class="keyword">double</span> &amp;to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = getchar ();</span><br><span class="line"><span class="keyword">bool</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc ();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>) ch = gc(), m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + (ch<span class="number">-48</span>), ch = gc ();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'.'</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> s = <span class="number">0.1</span>;</span><br><span class="line">ch = gc ();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x + (ch<span class="number">-48</span>)*s,s/=<span class="number">10</span>,ch = gc ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m) to = -x;</span><br><span class="line"><span class="keyword">else</span> to = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getudou</span> <span class="params">(<span class="keyword">double</span> &amp;to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = gc ();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = gc ();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + (ch<span class="number">-48</span>), ch = gc ();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'.'</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> s = <span class="number">0.1</span>;</span><br><span class="line">ch = gc ();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x + (ch<span class="number">-48</span>)*s,s/=<span class="number">10</span>,ch = gc ();</span><br><span class="line">&#125;</span><br><span class="line">to = x;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125; io;</span><br></pre></td></tr></table></figure><h4 id="SJB">SJB</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> str = <span class="number">1</span>&lt;&lt;<span class="number">20</span>; <span class="keyword">const</span> <span class="keyword">char</span>* kiana = <span class="string">"\n"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Reader</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str], *s, *t;</span><br><span class="line">        <span class="keyword">bool</span> EOF_FLG;</span><br><span class="line">        Reader():s(buf), t(buf), EOF_FLG(<span class="literal">false</span>) &#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> s==t&amp;&amp;((t=(s=buf)+fread(buf,<span class="number">1</span>,str,<span class="built_in">stdin</span>))==s)?EOF:(*s++);&#125;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Reader&amp;<span class="keyword">operator</span> &gt;&gt; (T&amp;x)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span> (EOF_FLG)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> c=<span class="number">0</span>,d;</span><br><span class="line">            <span class="keyword">while</span> (c != EOF &amp;&amp; (!<span class="built_in">isdigit</span>(c)))d=c,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(c == EOF) &#123;EOF_FLG=<span class="literal">true</span>; <span class="keyword">return</span> *<span class="keyword">this</span>;&#125; <span class="keyword">else</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + c - <span class="string">'0'</span>, c = gt();</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="string">'-'</span>) x =- x;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cin</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        Writer():s(buf),t(buf+str) &#123;&#125;</span><br><span class="line">        ~Writer() &#123;fwrite(buf,<span class="number">1</span>,s-buf,<span class="built_in">stdout</span>);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;(s==t)?(fwrite(s=buf,<span class="number">1</span>,str,<span class="built_in">stdout</span>),*s++=c):(*s++=c);&#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Writer&amp;<span class="keyword">operator</span>&lt;&lt;(T x)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(!x) <span class="keyword">return</span> pt(<span class="string">'0'</span>),*<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>) pt(<span class="string">'-'</span>), x = -x;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> a[<span class="number">30</span>],t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x)a[t++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(t--)pt(a[t]+<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span>*s) &#123;<span class="keyword">while</span>(*s)pt(*s++);<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    &#125; <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ELLIAS-New">ELLIAS_New</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) c = gc(), m = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>); write (x); <span class="built_in">putchar</span> (<span class="string">'\n'</span>);&#125;</span><br></pre></td></tr></table></figure><h3 id="SWITCH">SWITCH</h3><h4 id="OLD-2017">OLD (2017)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br></pre></td></tr></table></figure><h4 id="OLD-2018-3">OLD(2018.3)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br></pre></td></tr></table></figure><h4 id="NOIp2018">NOIp2018</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br></pre></td></tr></table></figure><h3 id="内嵌asm优化">内嵌asm优化</h3><h4 id="a-b-mo">a * b % mo</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mul_mod</span> <span class="params">(<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> mo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret;</span><br><span class="line">__asm__ __volatile__ (<span class="string">"\tmull %%ebx\n\tdivl %%ecx\n"</span> : <span class="string">"=d"</span>(ret):<span class="string">"a"</span>(a),<span class="string">"b"</span>(b),<span class="string">"c"</span>(mo));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;编译选项 快读 快写 内嵌asm&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="Template" scheme="brynhild.online/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>GSS1 - Can you answer these queries I</title>
    <link href="brynhild.online/GSS1/"/>
    <id>brynhild.online/GSS1/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2019-06-10T11:31:26.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GSS1 - Can you answer these queries I</p></blockquote><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/SP1043" target="_blank" rel="noopener">Luogu SP1043</a><br><a href="https://vjudge.net/problem/SPOJ-GSS1" target="_blank" rel="noopener">Vjudge</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, in;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum, lmax, rmax, dat;</span><br><span class="line">&#125; tr[<span class="number">200001</span>];</span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> str=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* <span class="built_in">endl</span>=<span class="string">"\n"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Reader</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        <span class="keyword">bool</span> EOF_FLG;</span><br><span class="line">        Reader():s(buf),t(buf),EOF_FLG(<span class="literal">false</span>) &#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s==t&amp;&amp;((t=(s=buf)+fread(buf,<span class="number">1</span>,str,<span class="built_in">stdin</span>))==s)?EOF:(*s++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Reader&amp;<span class="keyword">operator</span>&gt;&gt;(T&amp;x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(EOF_FLG)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> c=<span class="number">0</span>,d;</span><br><span class="line">            <span class="keyword">while</span>(c!=EOF&amp;&amp;(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>))d=c,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(c==EOF) &#123;</span><br><span class="line">                EOF_FLG=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="string">'-'</span>)x=-x;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cin</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        Writer():s(buf),t(buf+str) &#123;&#125;</span><br><span class="line">        ~Writer() &#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,s-buf,<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">            (s==t)?(fwrite(s=buf,<span class="number">1</span>,str,<span class="built_in">stdout</span>),*s++=c):(*s++=c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Writer&amp;<span class="keyword">operator</span>&lt;&lt;(T x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)<span class="keyword">return</span> pt(<span class="string">'0'</span>),*<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)pt(<span class="string">'-'</span>),x=-x;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> a[<span class="number">30</span>],t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x)a[t++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(t--)pt(a[t]+<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span>*s) &#123;</span><br><span class="line">            <span class="keyword">while</span>(*s)pt(*s++);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">max</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x,<span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    tr[rt].sum =tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    tr[rt].lmax= max (tr[rt&lt;&lt;<span class="number">1</span>].lmax, tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">    tr[rt].rmax= max (tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax, tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>].rmax);</span><br><span class="line">    tr[rt].dat = max (max(tr[rt&lt;&lt;<span class="number">1</span>].dat, tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat), tr[rt&lt;&lt;<span class="number">1</span>].rmax + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">        FastIO::<span class="built_in">cin</span>&gt;&gt;in;</span><br><span class="line">        tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = in;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build (lson);</span><br><span class="line">    build (rson);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">query</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> tr[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt;  mid) <span class="keyword">return</span> query (rson, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> query (lson, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        node ans,a,b;</span><br><span class="line">        a = query (lson,ql,qr);</span><br><span class="line">        b = query (rson,ql,qr);</span><br><span class="line">        ans.sum = a.sum + b.sum;</span><br><span class="line">        ans.dat = max (a.dat, a.rmax + b.lmax), ans.dat = max (ans.dat, b.dat);</span><br><span class="line">        ans.lmax= max (a.lmax, a.sum + b.lmax);</span><br><span class="line">        ans.rmax= max (b.rmax, b.sum + a.rmax);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FastIO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen ("nico.in","r",stdin);</span></span><br><span class="line">    FastIO::<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    FastIO::<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span> (m --) &#123;</span><br><span class="line">        FastIO::<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        FastIO::<span class="built_in">cout</span>&lt;&lt;query(<span class="number">1</span>, <span class="number">1</span>, n, x, y).dat&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GSS1 - Can you answer these queries I&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="GSS" scheme="brynhild.online/tags/GSS/"/>
    
      <category term="segment tree" scheme="brynhild.online/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>SP1716 GSS3 - Can you answer these queries III</title>
    <link href="brynhild.online/GSS3/"/>
    <id>brynhild.online/GSS3/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2019-06-10T11:31:22.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GSS3 - Can you answer these queries III</p></blockquote><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/SP1716" target="_blank" rel="noopener">Luogu</a><br><a href="https://vjudge.net/problem/SPOJ-GSS3" target="_blank" rel="noopener">Vjudge</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, in, opt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum, lmax, rmax, dat, l, r;</span><br><span class="line">&#125; tr[<span class="number">200001</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> str=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* <span class="built_in">endl</span>=<span class="string">"\n"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Reader</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        <span class="keyword">bool</span> EOF_FLG;</span><br><span class="line">        Reader():s(buf),t(buf),EOF_FLG(<span class="literal">false</span>) &#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s==t&amp;&amp;((t=(s=buf)+fread(buf,<span class="number">1</span>,str,<span class="built_in">stdin</span>))==s)?EOF:(*s++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Reader&amp;<span class="keyword">operator</span>&gt;&gt;(T&amp;x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(EOF_FLG)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> c=<span class="number">0</span>,d;</span><br><span class="line">            <span class="keyword">while</span>(c!=EOF&amp;&amp;(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>))d=c,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(c==EOF) &#123;</span><br><span class="line">                EOF_FLG=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="string">'-'</span>)x=-x;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cin</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        Writer():s(buf),t(buf+str) &#123;&#125;</span><br><span class="line">        ~Writer() &#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,s-buf,<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">            (s==t)?(fwrite(s=buf,<span class="number">1</span>,str,<span class="built_in">stdout</span>),*s++=c):(*s++=c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Writer&amp;<span class="keyword">operator</span>&lt;&lt;(T x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)<span class="keyword">return</span> pt(<span class="string">'0'</span>),*<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)pt(<span class="string">'-'</span>),x=-x;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> a[<span class="number">30</span>],t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x)a[t++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(t--)pt(a[t]+<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span>*s) &#123;</span><br><span class="line">            <span class="keyword">while</span>(*s)pt(*s++);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">max</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x,<span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    tr[rt].sum =tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    tr[rt].lmax= max (tr[rt&lt;&lt;<span class="number">1</span>].lmax, tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">    tr[rt].rmax= max (tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax, tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>].rmax);</span><br><span class="line">    tr[rt].dat = max (max(tr[rt&lt;&lt;<span class="number">1</span>].dat, tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].dat), tr[rt&lt;&lt;<span class="number">1</span>].rmax + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[rt].l = l, tr[rt].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">        FastIO::<span class="built_in">cin</span>&gt;&gt;in;</span><br><span class="line">        tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = in;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build (lson);</span><br><span class="line">    build (rson);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">query</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> tr[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt;  mid) <span class="keyword">return</span> query (rson, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> query (lson, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        node ans,a,b;</span><br><span class="line">        a = query (lson,ql,qr);</span><br><span class="line">        b = query (rson,ql,qr);</span><br><span class="line">        ans.sum = a.sum + b.sum;</span><br><span class="line">        ans.dat = max (a.dat, a.rmax + b.lmax), ans.dat = max (ans.dat, b.dat);</span><br><span class="line">        ans.lmax= max (a.lmax, a.sum + b.lmax);</span><br><span class="line">        ans.rmax= max (b.rmax, b.sum + a.rmax);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> to, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[rt].l == tr[rt].r) &#123;</span><br><span class="line">        tr[rt].sum = tr[rt].lmax = tr[rt].rmax = tr[rt].dat = val; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (tr[rt].l + tr[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (to &lt;= mid) work (rt&lt;&lt;<span class="number">1</span>, to, val);</span><br><span class="line">    <span class="keyword">else</span> work (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, to, val);</span><br><span class="line">    update(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FastIO;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen ("nico.in","r",stdin);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span> (m --) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (opt) <span class="built_in">cout</span> &lt;&lt; query (<span class="number">1</span>, <span class="number">1</span>, n, x, y).dat &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> work (<span class="number">1</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GSS3 - Can you answer these queries III&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="GSS" scheme="brynhild.online/tags/GSS/"/>
    
      <category term="segment tree" scheme="brynhild.online/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>SP2916 GSS5 - Can you answer these queries V</title>
    <link href="brynhild.online/GSS5/"/>
    <id>brynhild.online/GSS5/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2020-02-13T14:46:22.452Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GSS4 - Can you answer these queries V</p></blockquote><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/SP2916" target="_blank" rel="noopener">Luogu</a><br><a href="https://vjudge.net/problem/SPOJ-GSS5" target="_blank" rel="noopener">Vjudge</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS], *p1 = buf, *p2 = buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>; c = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="string">'0'</span>), c = gc();</span><br><span class="line">    <span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0l</span>l) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    write (x), <span class="built_in">putchar</span> (<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dmax 40001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((y)^=(x)^=(y)^=(x)) </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum, lmax, rmax, dat;</span><br><span class="line">&#125; tr[dmax], null;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; <span class="title">max</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; x,<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; y)</span> </span>&#123;<span class="keyword">return</span> x&gt;y? x:y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> lson = rt&lt;&lt;<span class="number">1</span>, rson = rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">    tr[rt].sum = tr[lson].sum + tr[rson].sum;</span><br><span class="line">    tr[rt].lmax= max (tr[lson].lmax, tr[lson].sum + tr[rson].lmax);</span><br><span class="line">    tr[rt].rmax= max (tr[rson].rmax, tr[rson].sum + tr[lson].rmax);</span><br><span class="line">    tr[rt].dat = max (max(tr[lson].dat, tr[rson].dat), tr[lson].rmax + tr[rson].lmax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[rt].l = l, tr[rt].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = read (); <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build (rt&lt;&lt;<span class="number">1</span>, l, mid), build (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> node <span class="title">query</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> l = tr[rt].l, r = tr[rt].r;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt; qr) <span class="keyword">return</span> null;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; qr &gt;= r) <span class="keyword">return</span> tr[rt];</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &gt;  mid) <span class="keyword">return</span> query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,ql,qr);</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid) <span class="keyword">return</span> query (rt&lt;&lt;<span class="number">1</span>, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">register</span> node ret, a, b;</span><br><span class="line">        a = query (rt&lt;&lt;<span class="number">1</span>, ql, qr), b = query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, ql, qr);</span><br><span class="line">        ret.sum = a.sum + b.sum;</span><br><span class="line">        ret.dat = max (a.dat, a.rmax + b.lmax), ret.dat = max (ret.dat, b.dat);</span><br><span class="line">        ret.lmax= max (a.lmax, a.sum + b.lmax), ret.rmax= max (b.rmax, b.sum + a.rmax);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> to, <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[rt].l == tr[rt].r) &#123;tr[rt].sum = tr[rt].lmax = tr[rt].rmax = tr[rt].dat = val; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (tr[rt].l + tr[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (to &lt;= mid) modify (rt&lt;&lt;<span class="number">1</span>, to, val);</span><br><span class="line">    <span class="keyword">else</span> modify (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, to, val);</span><br><span class="line">    update(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> _ = read ();</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">register</span> node a, b, c;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> tmp;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> opt;</span><br><span class="line">    <span class="keyword">while</span> (_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        n = read ();<span class="comment">//, m = read ();</span></span><br><span class="line">        build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        m = read ();</span><br><span class="line">        <span class="keyword">while</span> (m --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//opt = 'z';</span></span><br><span class="line">            <span class="comment">//while ((opt ^ 'C') &amp;&amp; (opt ^ 'Q')) opt = gc();</span></span><br><span class="line">            <span class="comment">//if (opt ^ 'C')</span></span><br><span class="line">            &#123;</span><br><span class="line">                x1 = read (), y1 = read (), x2 = read (), y2 = read ();</span><br><span class="line">                <span class="keyword">if</span> (y1&lt;x1) swap(x1,y1); <span class="keyword">if</span> (y2&lt;x2) swap(x2,y2);</span><br><span class="line">                <span class="keyword">if</span> (x1&gt;y2) swap(x1,x2), swap(y1,y2);</span><br><span class="line">                <span class="keyword">if</span> (y1 &lt; x2) &#123;</span><br><span class="line">                    writelen (max(query(<span class="number">1</span>,x1,y1<span class="number">-1</span>).rmax, <span class="number">0</span>) + query(<span class="number">1</span>,y1,x2).sum + max(query(<span class="number">1</span>,x2+<span class="number">1</span>,y2).lmax, <span class="number">0</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    a = query (<span class="number">1</span>, x2, y1), b = query(<span class="number">1</span>,x1,x2<span class="number">-1</span>), c = query(<span class="number">1</span>,y1+<span class="number">1</span>,y2);</span><br><span class="line">                    tmp = a.dat;</span><br><span class="line">                    tmp = max (tmp, a.lmax + b.rmax);</span><br><span class="line">                    tmp = max (tmp, c.lmax + a.rmax);</span><br><span class="line">                    tmp = max (tmp, a.sum + max(<span class="number">0</span>, b.rmax) + max(<span class="number">0</span>, c.lmax));</span><br><span class="line">                    writelen (tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">//else &#123;x1 = read (), tmp = read (); modify (1, x1, tmp);&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GSS4 - Can you answer these queries V&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="GSS" scheme="brynhild.online/tags/GSS/"/>
    
      <category term="segment tree" scheme="brynhild.online/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>SP2713 GSS4 - Can you answer these queries IV</title>
    <link href="brynhild.online/GSS4/"/>
    <id>brynhild.online/GSS4/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2019-06-10T11:31:32.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GSS4 - Can you answer these queries IV</p></blockquote><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/SP2713" target="_blank" rel="noopener">Luogu</a><br><a href="https://vjudge.net/problem/SPOJ-GSS4" target="_blank" rel="noopener">Vjudge</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"sse3"</span>,<span class="meta-string">"sse2"</span>,<span class="meta-string">"sse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse4"</span>,<span class="meta-string">"sse4.1"</span>,<span class="meta-string">"sse4.2"</span>,<span class="meta-string">"ssse3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> root 1,1,n</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) y^=x^=y^=x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dmax 400001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> str=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* endll=<span class="string">"\n"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Reader</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        <span class="keyword">bool</span> EOF_FLG;</span><br><span class="line">        Reader():s(buf),t(buf),EOF_FLG(<span class="literal">false</span>) &#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s==t&amp;&amp;((t=(s=buf)+fread(buf,<span class="number">1</span>,str,<span class="built_in">stdin</span>))==s)?EOF:(*s++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> gt() getchar() </span></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Reader&amp;<span class="keyword">operator</span>&gt;&gt;(T&amp;x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(EOF_FLG)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> c=<span class="number">0</span>,d;</span><br><span class="line">            <span class="keyword">while</span>(c!=EOF&amp;&amp;!<span class="built_in">isdigit</span>(c))d=c,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(c==EOF) &#123;</span><br><span class="line">                EOF_FLG=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>,c=gt();</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="string">'-'</span>)x=-x;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cin</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str],*s,*t;</span><br><span class="line">        Writer():s(buf),t(buf+str) &#123;&#125;</span><br><span class="line">        ~Writer() &#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,s-buf,<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">            (s==t)?(fwrite(s=buf,<span class="number">1</span>,str,<span class="built_in">stdout</span>),*s++=c):(*s++=c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> pt(c) putchar(c)</span></span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;Writer&amp;<span class="keyword">operator</span>&lt;&lt;(T x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)<span class="keyword">return</span> pt(<span class="string">'0'</span>),*<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)pt(<span class="string">'-'</span>),x=-x;</span><br><span class="line">            <span class="keyword">register</span> <span class="keyword">char</span> a[<span class="number">30</span>],t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x)a[t++]=x%<span class="number">10</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(t--)pt(a[t]+<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span>*s) &#123;</span><br><span class="line">            <span class="keyword">while</span>(*s)pt(*s++);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum, mxx;</span><br><span class="line">&#125; dat[dmax];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> in;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; <span class="title">max</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; x,<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; y)</span> </span>&#123;<span class="keyword">return</span> x&gt;y? x:y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dat[rt].sum = dat[rt&lt;&lt;<span class="number">1</span>].sum + dat[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    dat[rt].mxx = max (dat[rt&lt;&lt;<span class="number">1</span>].mxx, dat[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mxx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dat[rt].l = l, dat[rt].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        fastIO::<span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">        dat[rt].sum = dat[rt].mxx = in;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build (lson); build (rson);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> L = dat[rt].l, R = dat[rt].r;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> dat[rt].sum;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0l</span>l;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;=mid) ret  = query (rt&lt;&lt;<span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r) ret += query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span> <span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> L = dat[rt].l, R = dat[rt].r;</span><br><span class="line">    <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dat[rt].sum&lt;&lt;" -&gt; ";</span></span><br><span class="line">        dat[rt].sum = <span class="built_in">sqrt</span> (dat[rt].sum),</span><br><span class="line">        dat[rt].mxx = <span class="built_in">sqrt</span> (dat[rt].mxx);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dat[rt].sum&lt;&lt;endll;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid &amp;&amp; dat[rt&lt;&lt;<span class="number">1</span>].mxx  &gt;<span class="number">1</span>) change (rt&lt;&lt;<span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (mid&lt; r &amp;&amp; dat[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mxx&gt;<span class="number">1</span>) change (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//using namespace fastIO;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; query(<span class="number">1</span>, x, y) &lt;&lt; endll;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Change</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;change (<span class="number">1</span>, x, y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> _ = <span class="number">0</span>, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        fastIO::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; ++ _ &lt;&lt; <span class="string">":"</span> &lt;&lt; endll;</span><br><span class="line">        build (root);</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">int</span> m, x, y, ret;</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">bool</span> opt;</span><br><span class="line">        fastIO::<span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m --)</span><br><span class="line">        &#123;</span><br><span class="line">            fastIO::<span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line">                <span class="keyword">if</span> (x &gt; y) swap (x, y);</span><br><span class="line">            opt? Write(x, y):Change (x, y);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="built_in">putchar</span> (<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GSS4 - Can you answer these queries IV&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="GSS" scheme="brynhild.online/tags/GSS/"/>
    
      <category term="segment tree" scheme="brynhild.online/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>Nescafé17 守卫者的挑战</title>
    <link href="brynhild.online/Nescafe17-Defenders&#39;-Challenge/"/>
    <id>brynhild.online/Nescafe17-Defenders&#39;-Challenge/</id>
    <published>2018-11-02T02:08:23.000Z</published>
    <updated>2019-06-10T11:32:24.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nescafé17 守卫者的挑战</p></blockquote><a id="more"></a><h2 id="守卫者的挑战">守卫者的挑战</h2><h3 id="Description">[Description]</h3><p>打开了黑魔法师Vani的大门,队员们在迷宫般的路上漫无目的地搜寻着关押applepi的监狱的所在地.突然,眼前一道亮光闪过.“我,Nizem,是黑魔法圣殿的守卫者.如果你能通过我的挑战,那么你可以带走黑魔法圣殿的地图……”瞬间,队员们被传送到了一个擂台上,最初身边有一个容量为K的包包.</p><p>擂台赛一共有项挑战,各项挑战依次进行.第项挑战有一个属性ai,如果ai≥0,表示这次挑战成功后可以再获得一个容量为ai的包包；如果ai = -1,则表示这次挑战成功后可以得到一个大小为 1 的地图残片.地图残片必须装在包包里才能带出擂台,包包没有必要全部装满,但是队员们必须把获得的所有的地图残片都带走（没有得到的不用考虑,只需要完成所有N项挑战后背包容量足够容纳地图残片即可）,才能拼出完整的地图.并且他们至少要挑战成功L次才能离开擂台.</p><p>队员们一筹莫展之时,善良的守卫者Nizem帮忙预估出了每项挑战成功的概率,其中第i项挑战成功的概率为pi%.现在，请你帮忙预测一下，队员们能够带上他们获得的地图残片离开擂台的概率.</p><h3 id="Data-Size">[Data Size]</h3><p>对于 100% 的数据,保证 $ 0≤K≤2000$ , $ 0≤N≤200$ , $-1≤ai≤1000$ , $0≤L≤N$ , $0≤pi≤100$ .</p><h3 id="Solution">[Solution]</h3><p>刚看到此题时,我被那个概率吓得半死.但看了数据范围,此题就是一道很简单的水题了.</p><p>对于可以赢l把以上并且背包不会溢出的概率 $P_0$ ,通过枚举结束时的背包容量和赢的次数快速求出:</p><p>$$ P_0=\sum_{i=l}<sup>{n}\sum_{j=0}</sup>{K}P_{i, j} $$</p><p>而 $P_{i, j}$ 可以通过刷表法 $O(n<sup>2K)≈8*10</sup>7$ 地求出:</p><p>定义状态 $dp[i][j][k]$ 代表达到第$i$场胜$j$场背包容量为$k$时的概率,转移方程很显然为本次成功的概率和本次失败的概率之和:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j][k] += dp[i<span class="number">-1</span>][j][k] * (<span class="number">1</span> - dat[i].dat);</span><br><span class="line"><span class="keyword">if</span> ((tmp = min (K + dat[i].opt, n)) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">dp[i][j+<span class="number">1</span>][tmp] += dp[i<span class="number">-1</span>][j][k] * dat[i].dat;</span><br></pre></td></tr></table></figure><p>这个时间复杂度看起来很悬,未免会有稍作优化的想法.本题K的范围2000,但是真的需要2000吗?共有N项挑战,对于每一项挑战最多可以获得一块地图残片,所以背包实际的最大容量就是N次挑战中所有类型-1的数量,极限情况下是n,这样复杂度就会降到 $O(n^3)$, 较为稳妥.</p><h3 id="Code">[Code]</h3><p>考场代码,写得略丑,请谅解.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">getdou</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">double</span> x=<span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) c = gc();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = x * <span class="number">10</span> + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">double</span> s = <span class="number">0.1</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = x + (c-<span class="string">'0'</span>)*s, s/=<span class="number">10</span>, c = gc ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">min</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span></span>&#123;<span class="keyword">return</span> a&lt;b? a:b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> opt;</span><br><span class="line"><span class="keyword">double</span> dat;</span><br><span class="line">&#125; dat[<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">(node a, node b)</span> </span>&#123;<span class="keyword">return</span> a.opt &gt; b.opt;&#125;</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">201</span>][<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen (<span class="string">"guard.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen (<span class="string">"guard.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n = read (), l = read (), k = read (), tmp;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) dat[i].dat = getdou()/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) dat[i].opt = read ();</span><br><span class="line"><span class="built_in">std</span>::sort (dat + <span class="number">1</span>, dat + n + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][min(n, k)] = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++ j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> K = <span class="number">0</span>; K &lt;= n; ++ K)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j][K] += dp[i<span class="number">-1</span>][j][K] * (<span class="number">1</span> - dat[i].dat);</span><br><span class="line"><span class="keyword">if</span> ((tmp = min (K + dat[i].opt, n)) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">dp[i][j+<span class="number">1</span>][tmp] += dp[i<span class="number">-1</span>][j][K] * dat[i].dat;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> <span class="keyword">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = l; i &lt;= n; ++ i)</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++ j)</span><br><span class="line">ans += dp[n][i][j];</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">"%.6lf"</span>, ans);</span><br><span class="line"></span><br><span class="line">fclose (<span class="built_in">stdin</span>), fclose (<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cena评测$0.03s$,效率还是可以的.<br><img src="https://novaellias.files.wordpress.com/2018/11/guard.png" alt="guard"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Nescafé17 守卫者的挑战&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="contest" scheme="brynhild.online/tags/contest/"/>
    
      <category term="DP" scheme="brynhild.online/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>STL 洛谷P3369 普通平衡树</title>
    <link href="brynhild.online/lg-P3369-STL/"/>
    <id>brynhild.online/lg-P3369-STL/</id>
    <published>2018-10-30T08:31:14.000Z</published>
    <updated>2019-06-10T11:32:01.705Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3369" target="_blank" rel="noopener">luogu P3369 普通平衡树</a></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; c ^ <span class="string">'-'</span>) c = gc();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc();</span><br><span class="line">    <span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line">    <span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x, <span class="built_in">putchar</span>(<span class="string">'-'</span>);write (x);<span class="built_in">putchar</span> (<span class="string">'\n'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; eli;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> n = read (), x, opt;</span><br><span class="line">    <span class="keyword">while</span> (n --)</span><br><span class="line">    &#123;</span><br><span class="line">        opt = read (), x = read ();</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) eli.insert(upper_bound(eli.begin(), eli.end(), x), x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) eli.erase(lower_bound(eli.begin(), eli.end(), x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) writelen(lower_bound(eli.begin(), eli.end(), x)-eli.begin()+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">4</span>) writelen(eli[x - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">5</span>) writelen(*--lower_bound(eli.begin(), eli.end(), x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">6</span>) writelen(*upper_bound(eli.begin(), eli.end(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3369&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;luogu P3369 普通平衡树&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="Template" scheme="brynhild.online/tags/Template/"/>
    
      <category term="STL" scheme="brynhild.online/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 线段树模板</title>
    <link href="brynhild.online/luogu-segment-tree/"/>
    <id>brynhild.online/luogu-segment-tree/</id>
    <published>2018-06-08T11:29:26.000Z</published>
    <updated>2019-06-10T11:32:20.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>洛谷 线段树1 线段树2 模板</p></blockquote><a id="more"></a><h3 id="P3372-模板-线段树-1">P3372 [模板] 线段树 1</h3><p><a href="https://www.luogu.org/problemnew/show/P3372" target="_blank" rel="noopener">Luogu P3372 线段树加</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="comment">//...略</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>); write (x); <span class="built_in">putchar</span> (<span class="string">'\n'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dmax 400001</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SMT</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum, tag;</span><br><span class="line">&#125; tr[dmax];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(Re <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">tr[rt].sum = tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[rt].l = l, tr[rt].r = r;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;tr[rt].sum = read(); <span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build (rt&lt;&lt;<span class="number">1</span>, l, mid), build (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span> <span class="params">(Re <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rt &gt; <span class="number">200000</span> || !tr[rt].tag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> ls = rt&lt;&lt;<span class="number">1</span>, rs = rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">tr[ls].tag += tr[rt].tag, tr[rs].tag += tr[rt].tag;</span><br><span class="line">tr[ls].sum += tr[rt].tag * (tr[ls].r - tr[ls].l + <span class="number">1</span>),</span><br><span class="line">tr[rs].sum += tr[rt].tag * (tr[rs].r - tr[rs].l + <span class="number">1</span>);</span><br><span class="line">tr[rt].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r, Re ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> L = tr[rt].l, R = tr[rt].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) &#123;</span><br><span class="line">tr[rt].sum += val * (R - L + <span class="number">1</span>), tr[rt].tag += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">register</span> <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>; pushdown (rt);</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) modify (rt&lt;&lt;<span class="number">1</span>, l, r, val);</span><br><span class="line"><span class="keyword">if</span> (r  &gt; mid) modify (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r, val);</span><br><span class="line">update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> L = tr[rt].l, R = tr[rt].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> tr[rt].sum;</span><br><span class="line">pushdown (rt); <span class="keyword">register</span> <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) ret  = query (rt&lt;&lt;<span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (r  &gt; mid) ret += query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n=read(), m=read();</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> opt, x, y;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line">build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span> (m --)</span><br><span class="line">&#123;</span><br><span class="line">opt=read(), x=read(), y=read();</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) swap (x, y);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">2</span>) writelen (query (<span class="number">1</span>, x, y));</span><br><span class="line"><span class="keyword">else</span> z = read (), modify (<span class="number">1</span>, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3373-模板-线段树-2">P3373 [模板]线段树 2</h3><p><a href="https://www.luogu.org/problemnew/show/P3373" target="_blank" rel="noopener">Luogu P3372 加 乘</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (2)</span></span><br><span class="line"><span class="comment">//..略</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"f16c"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writelen</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>); write (x); <span class="built_in">putchar</span> (<span class="string">'\n'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mul_mod</span> <span class="params">(<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> mo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret;</span><br><span class="line">__asm__ __volatile__ (<span class="string">"\tmull %%ebx\n\tdivl %%ecx\n"</span> : <span class="string">"=d"</span>(ret):<span class="string">"a"</span>(a),<span class="string">"b"</span>(b),<span class="string">"c"</span>(mo));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dmax 400001</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(x,y) ((x)^=(y)^=(x)^=(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod(x) (((x)%modn+modn)%modn)</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> modn;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SMT</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum, add, mul;</span><br><span class="line">&#125; tr[dmax];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(Re <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">tr[rt].sum = tr[rt&lt;&lt;<span class="number">1</span>].sum + tr[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[rt] = &#123;l, r, <span class="number">0l</span>l, <span class="number">0l</span>l, <span class="number">1l</span>l&#125;;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;tr[rt].sum = read()%modn; <span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build (rt&lt;&lt;<span class="number">1</span>, l, mid), build (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span> <span class="params">(Re <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rt &gt; <span class="number">200000</span> || (!tr[rt].add &amp;&amp; tr[rt].mul == <span class="number">1l</span>l)) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> ls = rt &lt;&lt; <span class="number">1</span>, rs = rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">tr[ls].mul = mul_mod (tr[ls].mul, tr[rt].mul, modn);</span><br><span class="line">tr[rs].mul = mul_mod (tr[rs].mul, tr[rt].mul, modn);</span><br><span class="line">tr[ls].add = mod (mul_mod (tr[ls].add , tr[rt].mul, modn) + tr[rt].add);</span><br><span class="line">tr[rs].add = mod (mul_mod (tr[rs].add, tr[rt].mul, modn) + tr[rt].add);</span><br><span class="line">tr[ls].sum = mod (mul_mod (tr[ls].sum, tr[rt].mul, modn) + mul_mod (tr[rt].add, (tr[ls].r - tr[ls].l + <span class="number">1</span>), modn));</span><br><span class="line">tr[rs].sum = mod (mul_mod (tr[rs].sum, tr[rt].mul, modn) + mul_mod (tr[rt].add, (tr[rs].r - tr[rs].l + <span class="number">1</span>), modn));</span><br><span class="line">tr[rt].add = <span class="number">0l</span>l, tr[rt].mul = <span class="number">1l</span>l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// opt==1: mul opt==2: add</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r, Re ll val, Re <span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> L = tr[rt].l, R = tr[rt].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) &#123;</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">tr[rt].add = mod (tr[rt].add + val),\</span><br><span class="line">tr[rt].sum = mod (tr[rt].sum + mul_mod (val, (R - L + <span class="number">1</span>), modn));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tr[rt].mul = mul_mod (tr[rt].mul, val, modn),\</span><br><span class="line">tr[rt].sum = mul_mod (tr[rt].sum, val, modn),\</span><br><span class="line">tr[rt].add = mul_mod (tr[rt].add, val, modn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; pushdown (rt); <span class="keyword">register</span> <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) modify (rt&lt;&lt;<span class="number">1</span>, l, r, val, opt);</span><br><span class="line"><span class="keyword">if</span> (r  &gt; mid) modify (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r, val, opt);</span><br><span class="line">update (rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span> <span class="params">(Re <span class="keyword">int</span> rt, Re <span class="keyword">int</span> l, Re <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> L = tr[rt].l, R = tr[rt].r;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= L &amp;&amp; R &lt;= r) <span class="keyword">return</span> tr[rt].sum;</span><br><span class="line">pushdown (rt); <span class="keyword">register</span> <span class="keyword">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) ret  = query (rt&lt;&lt;<span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (r  &gt; mid) ret += query (rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">return</span> ret % modn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n=read(), m=read(); modn=read();</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> opt, x, y;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line">build (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span> (m --)</span><br><span class="line">&#123;</span><br><span class="line">opt=read(), x=read(), y=read();</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) swap (x, y);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">3</span>) writelen (query (<span class="number">1</span>,x,y));</span><br><span class="line"><span class="keyword">else</span> z=read()%modn,modify(<span class="number">1</span>,x,y,z,opt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;洛谷 线段树1 线段树2 模板&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="segment tree" scheme="brynhild.online/tags/segment-tree/"/>
    
      <category term="Template" scheme="brynhild.online/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>最短路模板</title>
    <link href="brynhild.online/shortest-path/"/>
    <id>brynhild.online/shortest-path/</id>
    <published>2017-12-05T06:47:00.000Z</published>
    <updated>2019-06-10T11:32:38.796Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SPFA 堆优化迪杰斯特拉<br>C++模板</p></blockquote><a id="more"></a><h3 id="SPFA">SPFA</h3><p><a href="https://www.luogu.org/problemnew/show/P3371" target="_blank" rel="noopener">Luogu P3371</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; c ^ <span class="string">'-'</span>) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">min</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a&lt;b? a:b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], nxt[maxm], too[maxm], ecnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> wei[maxm], dis[maxn];</span><br><span class="line"><span class="keyword">int</span> que[maxm*<span class="number">100</span> + <span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n = read (), m = read (), sta = read ();</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) dis[i] = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> fr, to, va;</span><br><span class="line"><span class="keyword">while</span> (m --)</span><br><span class="line">&#123;</span><br><span class="line">fr = read (), to = read (), va = read ();</span><br><span class="line">nxt[++ ecnt] = head[fr], head[fr] = ecnt, too[ecnt] = to, wei[ecnt] = va;</span><br><span class="line">&#125;</span><br><span class="line">dis[sta] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> hd = <span class="number">0</span>, tl = <span class="number">1</span>; que[tl] = sta;</span><br><span class="line"><span class="keyword">while</span> (hd &lt; tl)</span><br><span class="line">&#123;</span><br><span class="line">fr = que[++ hd], vis[fr] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = head[fr]; i; i = nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">to = too[i], va = wei[i];</span><br><span class="line"><span class="keyword">if</span> (dis[to] &gt; dis[fr] + va)</span><br><span class="line">&#123;</span><br><span class="line">dis[to] = dis[fr] + va;</span><br><span class="line"><span class="keyword">if</span> (!vis[to]) vis[to] = <span class="literal">true</span>, que[++ tl] = to;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dis[i]&lt;<span class="number">0</span>) dis[i] = -dis[i], <span class="built_in">putchar</span> (<span class="string">'-'</span>);</span><br><span class="line">write (dis[i]), <span class="built_in">putchar</span> (<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化迪杰斯特拉">堆优化迪杰斯特拉</h3><p><a href="https://www.luogu.org/problemnew/show/P4779" target="_blank" rel="noopener">Luogu P4779</a></p><h4 id="OLD-2017">OLD (2017)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (<span class="meta-string">"Ofast"</span>, 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target (<span class="meta-string">"avx"</span>,<span class="meta-string">"sse2"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 200001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inff 2147483647</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">char</span> c = getchar(); <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c) &amp;&amp; c != <span class="string">'-'</span>) c = getchar();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'-'</span>) c = getchar(), m = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = getchar();</span><br><span class="line">    <span class="keyword">if</span> (m) <span class="keyword">return</span> -x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fastwrite</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) fastwrite(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fastwritespace</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    fastwrite(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> node&amp; aa, <span class="keyword">const</span> node&amp; bb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aa.val &gt; bb.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, fro, to, w;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"><span class="built_in">vector</span> &lt;pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; data[maxn];</span><br><span class="line">__gnu_pbds::priority_queue &lt;node, cmp, pairing_heap_tag&gt; nico;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    n = read (), m = read (), s = read ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        fro = read (), to = read (), w = read ();</span><br><span class="line">        data[fro].push_back (make_pair (to, w));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dis[i] = inff;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    nico.push ((node) &#123;</span><br><span class="line">        <span class="number">0</span>, s</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!nico.empty ()) &#123;</span><br><span class="line">        fro = nico.top ().name;</span><br><span class="line">        nico.pop ();</span><br><span class="line">        <span class="keyword">if</span> (visit[fro]) <span class="keyword">continue</span>;</span><br><span class="line">        visit[fro] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data[fro].size (); i ++) &#123;</span><br><span class="line">            to = data[fro][i].first;</span><br><span class="line">            w = data[fro][i].second;</span><br><span class="line">            <span class="keyword">if</span> (!visit[to] &amp;&amp; dis[fro] + w &lt; dis[to]) &#123;</span><br><span class="line">                dis[to] = dis[fro] + w;</span><br><span class="line">                nico.push ((node) &#123;</span><br><span class="line">                    dis[to], to</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) fastwritespace (dis[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NEW-2018-11-5">NEW(2018/11/5)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> G++ optimize (3)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::priority_queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ELAS = <span class="number">1</span>&lt;&lt;<span class="number">14</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[ELAS],*p1=buf,*p2=buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,ELAS,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = gc(); <span class="keyword">register</span> <span class="keyword">bool</span> m = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> ((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c ^ <span class="string">'-'</span>)) c = gc();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) m = <span class="literal">true</span>, c = gc ();</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) x = (x&lt;&lt;<span class="number">3</span>) + (x&lt;&lt;<span class="number">1</span>) + (c^<span class="string">'0'</span>), c = gc();</span><br><span class="line"><span class="keyword">return</span> m? -x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write (x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span> (x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nwrite</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;write (x); <span class="built_in">putchar</span> (<span class="string">' '</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 200001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id, val;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a, node b) &#123;</span><br><span class="line"><span class="keyword">return</span> a.val &gt; b.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue &lt;node&gt; que;</span><br><span class="line"><span class="keyword">int</span> head[maxn], wei[maxm], too[maxm], nxt[maxm], ecnt;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> n = read (), m = read (), sta = read ();</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> fr, to, va;</span><br><span class="line"><span class="keyword">while</span> (m --)</span><br><span class="line">&#123;</span><br><span class="line">fr = read (), nxt[++ ecnt] = head[fr],\</span><br><span class="line">head[fr] = ecnt, too[ecnt] = read (), wei[ecnt] = read ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span> (dis, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span> dis); dis[sta] = <span class="number">0</span>;</span><br><span class="line">que.push (&#123;sta, <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!que.empty ())</span><br><span class="line">&#123;</span><br><span class="line">fr = que.top ().id, que.pop ();</span><br><span class="line"><span class="keyword">if</span> (!vis[fr])</span><br><span class="line">&#123;</span><br><span class="line">vis[fr] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = head[fr]; i; i = nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">to = too[i], va = wei[i];</span><br><span class="line"><span class="keyword">if</span> (dis[fr] + va &lt; dis[to])</span><br><span class="line">&#123;</span><br><span class="line">dis[to] = dis[fr] + va;</span><br><span class="line">que.push (&#123;to, dis[to]&#125;); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) nwrite (dis[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SPFA 堆优化迪杰斯特拉&lt;br&gt;
C++模板&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Olympiad in Informatics" scheme="brynhild.online/categories/Olympiad-in-Informatics/"/>
    
    
      <category term="Template" scheme="brynhild.online/tags/Template/"/>
    
      <category term="最短路" scheme="brynhild.online/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>HEXO博客的基本搭建</title>
    <link href="brynhild.online/hexo-buildup/"/>
    <id>brynhild.online/hexo-buildup/</id>
    <published>2017-11-13T03:10:00.000Z</published>
    <updated>2020-03-18T08:45:58.118Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HEXO博客的基本搭建</p><p>安装 初始化 部署</p></blockquote><a id="more"></a><h2 id="事前准备">事前准备</h2><h3 id="准备仓库">准备仓库</h3><p>在 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 上注册账号并创建仓库 <a href="http://yourname.github.io" target="_blank" rel="noopener">yourname.github.io</a></p><h3 id="安装必要环境">安装必要环境</h3><p>安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">node.js</a> 及 <a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></p><p>完成后在命令窗口分别输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git- version</span><br></pre></td></tr></table></figure><p>如显示正确版本号即为成功.</p><h3 id="SSH授权">SSH授权</h3><p>在目录下右键,git bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>在C盘用户目录下用记事本打开公钥,复制内容添加到 GitHub.</p><p>在 git bash 中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>测试是否成功.</p><h2 id="安装及运行">安装及运行</h2><h3 id="安装和初始化-HEXO">安装和初始化 <a href="https://hexo.io/" target="_blank" rel="noopener">HEXO</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h3 id="HEXO-命令一览">HEXO 命令一览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line">  clean     Remove generated files and cache.</span><br><span class="line">  config    Get or <span class="built_in">set</span> configurations.</span><br><span class="line">  deploy    Deploy your website.</span><br><span class="line">  generate  Generate static files.</span><br><span class="line">  <span class="built_in">help</span>      Get <span class="built_in">help</span> on a <span class="built_in">command</span>.</span><br><span class="line">  init      Create a new Hexo folder.</span><br><span class="line">  list      List the information of the site</span><br><span class="line">  migrate   Migrate your site from other system to Hexo.</span><br><span class="line">  new       Create a new post.</span><br><span class="line">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class="line">  render    Render files with renderer plugins.</span><br><span class="line">  server    Start the server.</span><br><span class="line">  version   Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages <span class="keyword">in</span> the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HEXO博客的基本搭建&lt;/p&gt;
&lt;p&gt;安装 初始化 部署&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="HEXO" scheme="brynhild.online/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="brynhild.online/tags/HEXO/"/>
    
  </entry>
  
</feed>
