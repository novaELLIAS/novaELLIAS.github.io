{"meta":{"title":"Next Dream...","subtitle":"","description":"ELLIAS's blog. This object has escaped into fantasy.","author":"ELLIAS","url":"https://brynhild.online","root":"/"},"pages":[{"title":"","date":"2020-09-03T11:57:55.704Z","updated":"2020-03-09T11:18:16.133Z","comments":true,"path":"archives/index.html","permalink":"https://brynhild.online/archives/index.html","excerpt":"","text":""},{"title":"Donate","date":"2020-09-04T08:49:46.756Z","updated":"2020-09-04T08:49:46.756Z","comments":true,"path":"donatepage/index.html","permalink":"https://brynhild.online/donatepage/index.html","excerpt":"","text":"DonateThank you!"},{"title":"404 Not Found","date":"2020-09-01T08:30:58.408Z","updated":"2019-06-05T11:45:47.777Z","comments":true,"path":"404.html","permalink":"https://brynhild.online/404.html","excerpt":"","text":"404 Not Found This object has escaped into fantasy Please contact the Administrator"},{"title":"","date":"2020-09-01T08:30:58.409Z","updated":"2020-03-08T12:26:06.703Z","comments":true,"path":"baidu_verify_oFoINJ957S.html","permalink":"https://brynhild.online/baidu_verify_oFoINJ957S.html","excerpt":"","text":"oFoINJ957S"},{"title":"","date":"2020-09-01T08:30:58.413Z","updated":"2019-06-01T11:31:37.462Z","comments":true,"path":"googleee23d67b90dfc2e5.html","permalink":"https://brynhild.online/googleee23d67b90dfc2e5.html","excerpt":"","text":"google-site-verification: googleee23d67b90dfc2e5.html"},{"title":"About","date":"2020-09-03T03:31:36.557Z","updated":"2020-09-03T03:31:36.557Z","comments":true,"path":"about/index.html","permalink":"https://brynhild.online/about/index.html","excerpt":"","text":"Dream started at Oct 13, 2017 A.D. body,html,#container{ width: 100%; height: 100%; margin: 0px } API加载 window.init = function(){ var map = new AMap.Map('container', { resizeEnable: true, center:[121.5370, 38.8785], zoom:17 }); if (location.href.indexOf('guide=1') !== -1) { map.setStatus({scrollWheel: false}); map.plugin([\"AMap.ToolBar\"], function() { map.addControl(new AMap.ToolBar({liteStyle:true})) }); } }"},{"title":"archives","date":"2020-03-09T11:24:37.000Z","updated":"2020-03-09T11:24:37.942Z","comments":true,"path":"archives/index-1.html","permalink":"https://brynhild.online/archives/index-1.html","excerpt":"","text":""},{"title":"History of NextDream","date":"2017-10-12T16:00:00.000Z","updated":"2020-09-04T08:21:00.528Z","comments":true,"path":"bloghistory/index.html","permalink":"https://brynhild.online/bloghistory/index.html","excerpt":"","text":"注意: 下文提到的版本号为开发时的内部版本号 与 GitHub 仓库中的 Release 版本号无法一一对应. 2020-09-01 v3.0.0 alpha 使用 volantis 主题, 开始进行持续更新. 制作并使用新像素风格魔法师个设作为网站图标和看板娘. 警告: 这个图像受到版权保护. 2019-03-16 v2.2.0 完成基于 material-x 特性的功能更新, 由 v2.1.72 更新至 v2.2.0. 2019-01-05 v2.1.53 alpha 在进行功能更新时发生整体性崩溃, 开始重构. 2018-12-21 v2.1.0 引入 live2d 看板娘 z16. 使用自定义图标 favicon_KK. 2018-11-03 v2.0.0 改用 material-x 主题, 完成基本样式迁移. 2018-10-13 v1.2.0 庆祝博客一周年.新增 HiddenList 页面, 集成周边页面 地獄通信 2018-06-08 v1.1.0 结束了持续三个月的连续更新, 由 v1.0.13 alpha 更新至 v1.1.0. 重要的更新内容 启用 valine 评论系统.启用卜蒜子统计.启用字数统计.背景 导航栏 鼠标样式 footer等方面的美工优化使用 WordPress 托管全站全部静态图像 2018-03-05 v1.0.1 alpha 开始在 NexT 主题的基础上更新博客功能. 2017-12-05 v1.0.0 开始进行 OI 方面写作, 首次上传模板 最短路模板. 2017-11-13 v1.0.0 基于 Hexo 框架, 使用 NexT 主题, 新站点正式建成并命名为 Next Dream.托管于 GitHub, 使用二级域名 novaellias.github.io.同时发布第一篇文章 HEXO博客的基本搭建. 2017-10-13 v0.0.0 作为洛谷账号的附属品, Ellias的洛谷博客 正式上线."},{"title":"categories","date":"2020-09-01T08:30:58.410Z","updated":"2019-06-05T11:25:35.240Z","comments":true,"path":"categories/index.html","permalink":"https://brynhild.online/categories/index.html","excerpt":"","text":""},{"title":"Friends","date":"2020-09-03T04:10:29.842Z","updated":"2020-08-07T05:38:45.475Z","comments":true,"path":"friends/index.html","permalink":"https://brynhild.online/friends/index.html","excerpt":"","text":""},{"title":"HiddenList","date":"2018-10-12T16:00:00.000Z","updated":"2020-09-04T08:08:40.539Z","comments":true,"path":"hiddenlist/index.html","permalink":"https://brynhild.online/hiddenlist/index.html","excerpt":"","text":"Music RoomArcaeaupd till 2.2.0 Toolselement元素周期表 calculator在线计算器 Entertainment2048 Pac Man Tetris 3D3D俄罗斯方块 Minesweeper pri初级扫雷(样式初级) Minesweeper adv仿 `Windows` 样式的扫雷 Sudoku数独 地獄通信地獄通信 full-time地狱通信(全时可以访问) 地獄通信 night地狱通信(夜间可以访问) 地獄通信地狱通信(只有0000-0001可以访问) にっこにっこにーNICO LOOPER循环播放 `にっこにっこにー`"},{"title":"HiddenList","date":"2018-10-12T16:00:00.000Z","updated":"2020-09-03T14:41:13.587Z","comments":true,"path":"hiddenlist/index-p.html","permalink":"https://brynhild.online/hiddenlist/index-p.html","excerpt":"Welcome to Hiddel List!!","text":"Welcome to Hiddel List!!"},{"title":"tags","date":"2020-09-01T08:30:58.425Z","updated":"2019-06-05T11:26:48.096Z","comments":true,"path":"tags/index.html","permalink":"https://brynhild.online/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-09-02T13:52:59.361Z","updated":"2020-09-02T13:52:59.361Z","comments":true,"path":"webboard/index.html","permalink":"https://brynhild.online/webboard/index.html","excerpt":"","text":""},{"title":"","date":"2020-09-01T08:30:58.423Z","updated":"2020-03-11T11:39:36.367Z","comments":true,"path":"jigokutsushin/full/index.html","permalink":"https://brynhild.online/jigokutsushin/full/index.html","excerpt":"","text":"地獄通信 Not Found あなたの怨み、晴らします。 この怨み、地狱へ流します！"},{"title":"","date":"2020-09-01T08:30:58.424Z","updated":"2020-03-12T02:17:10.349Z","comments":true,"path":"jigokutsushin/mid/index.html","permalink":"https://brynhild.online/jigokutsushin/mid/index.html","excerpt":"","text":"地獄通信 Not Found あなたの怨み、晴らします。 この怨み、地狱へ流します！"},{"title":"","date":"2020-09-01T08:30:58.424Z","updated":"2020-03-11T11:40:28.902Z","comments":true,"path":"jigokutsushin/night/index.html","permalink":"https://brynhild.online/jigokutsushin/night/index.html","excerpt":"","text":"地獄通信 Not Found あなたの怨み、晴らします。 この怨み、地狱へ流します！"},{"title":"","date":"2020-09-01T08:30:58.425Z","updated":"2020-03-21T11:42:26.581Z","comments":true,"path":"tools/2048/index.html","permalink":"https://brynhild.online/tools/2048/index.html","excerpt":"","text":"2048 2048 Welcome! BEST: 0 SCORE: 0 GAME OVERRETRY RESTART"},{"title":"NICO LOOPER","date":"2018-12-11T02:08:23.000Z","updated":"2020-03-12T02:17:41.251Z","comments":true,"path":"tools/niconi/index.html","permalink":"https://brynhild.online/tools/niconi/index.html","excerpt":"","text":"window.onload = function () { var local1 = document.getElementById('videoID'); local1.autoplay = true; local1.loop = true; local1.muted = false; if (local1.paused) { local1.play(); } else { local1.pause(); } }"},{"title":"","date":"2020-09-01T08:30:58.433Z","updated":"2020-03-13T02:47:04.041Z","comments":true,"path":"tools/pac-man/index.html","permalink":"https://brynhild.online/tools/pac-man/index.html","excerpt":"","text":"Pac-Man body { background-color: #292929 } * { padding: 0; margin: 0; } .wrapper { width: 960px; margin: 0 auto; line-height: 36px; text-align: center; color: #999; } canvas { display: block; background: #000; } .mod-botton { height: 32px; padding: 15px 0; text-align: center; } unavailable. Press [space] or [enter] to pause or continue."},{"title":"","date":"2020-09-01T16:26:35.824Z","updated":"2020-03-29T14:31:13.685Z","comments":true,"path":"tools/sudoku/index.html","permalink":"https://brynhild.online/tools/sudoku/index.html","excerpt":"","text":"Sudoku SUBMIT RESET RETRY var sd = new SD; sd.init(30);"},{"title":"","date":"2020-09-03T07:36:58.994Z","updated":"2019-08-30T14:53:02.000Z","comments":true,"path":"aboutme/assets/css/noscript.css","permalink":"https://brynhild.online/aboutme/assets/css/noscript.css","excerpt":"","text":"/* Ethereal by HTML5 UP html5up.net | @ajlkn Free for personal and commercial use under the CCA 3.0 license (html5up.net/license) */ /* Page */ body { overflow-x: scroll; } /* Wrapper */ body.is-preload #wrapper { -moz-transform: none; -webkit-transform: none; -ms-transform: none; transform: none; opacity: 1; }"},{"title":"","date":"2020-09-03T07:36:58.990Z","updated":"2019-08-30T14:53:02.000Z","comments":true,"path":"aboutme/assets/js/breakpoints.min.js","permalink":"https://brynhild.online/aboutme/assets/js/breakpoints.min.js","excerpt":"","text":"/* breakpoints.js v1.0 | @ajlkn | MIT licensed */ var breakpoints=function(){\"use strict\";function e(e){t.init(e)}var t={list:null,media:{},events:[],init:function(e){t.list=e,window.addEventListener(\"resize\",t.poll),window.addEventListener(\"orientationchange\",t.poll),window.addEventListener(\"load\",t.poll),window.addEventListener(\"fullscreenchange\",t.poll)},active:function(e){var n,a,s,i,r,d,c;if(!(e in t.media)){if(\">=\"==e.substr(0,2)?(a=\"gte\",n=e.substr(2)):\"\"==e.substr(0,1)?(a=\"gt\",n=e.substr(1)):\""},{"title":"","date":"2020-09-03T07:36:58.992Z","updated":"2019-08-30T14:53:02.000Z","comments":true,"path":"aboutme/assets/js/browser.min.js","permalink":"https://brynhild.online/aboutme/assets/js/browser.min.js","excerpt":"","text":"/* browser.js v1.0 | @ajlkn | MIT licensed */ var browser=function(){\"use strict\";var e={name:null,version:null,os:null,osVersion:null,touch:null,mobile:null,_canUse:null,canUse:function(n){e._canUse||(e._canUse=document.createElement(\"div\"));var o=e._canUse.style,r=n.charAt(0).toUpperCase()+n.slice(1);return n in o||\"Moz\"+r in o||\"Webkit\"+r in o||\"O\"+r in o||\"ms\"+r in o},init:function(){var n,o,r,i,t=navigator.userAgent;for(n=\"other\",o=0,r=[[\"firefox\",/Firefox\\/([0-9\\.]+)/],[\"bb\",/BlackBerry.+Version\\/([0-9\\.]+)/],[\"bb\",/BB[0-9]+.+Version\\/([0-9\\.]+)/],[\"opera\",/OPR\\/([0-9\\.]+)/],[\"opera\",/Opera\\/([0-9\\.]+)/],[\"edge\",/Edge\\/([0-9\\.]+)/],[\"safari\",/Version\\/([0-9\\.]+).+Safari/],[\"chrome\",/Chrome\\/([0-9\\.]+)/],[\"ie\",/MSIE ([0-9]+)/],[\"ie\",/Trident\\/.+rv:([0-9]+)/]],i=0;i"},{"title":"","date":"2020-09-03T07:51:01.766Z","updated":"2020-03-13T11:39:26.258Z","comments":true,"path":"tools/calc/calc-adv1/index.html","permalink":"https://brynhild.online/tools/calc/calc-adv1/index.html","excerpt":"","text":"CALCULATOR body { background: linear-gradient(to right, #85D8CE, #085078); } #app { font-family: 'Avenir', Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; display: flex; flex-wrap: wrap; justify-content: center; align-item: center; } .calculator { width: 440px; padding: 20px; border-radius: 5px; margin: 20px auto; font-size: 16px; background-color: #333333; } .input { width: 420px; height: 50px; border-radius: 0px; border: 1px solid black; background-color: #333333; color: #d9d9d9; padding: 0 5px 0 5px; margin: 0 0px 10px 0px; font-size: 30px; } .input:focus, .input:active { border-color: #03a9f4; box-shadow: 0 0 4px #03A9F4; outline: none 0; } .button { margin: 3px; width: 63px; border: 1px solid #0d0d0d; height: 30px; border-radius: 4px; color: #d9d9d9; background-color: #1a1a1a; cursor: pointer; outline: none; } .mode { display: flex; flex-wrap: wrap; justify-content: space-evenly; } .equal-sign { background-color: green; width: 133px; } .toggle-button { border: none; background-color: #333333; cursor: pointer; outline: none; font-size: 1rem; color: #fff; text-shadow: -1px -1px 0 rgba(0, 0, 0, 0.35); } p { margin-top: 0; } button::-moz-focus-inner { border-color: transparent; } Show Advanced Mode ⚈ Show Basic Mode ⚆ 7 8 9 *"},{"title":"","date":"2020-09-01T08:30:58.432Z","updated":"2020-03-16T06:10:47.787Z","comments":true,"path":"tools/minesweeper/minesweeper-adv/index.html","permalink":"https://brynhild.online/tools/minesweeper/minesweeper-adv/index.html","excerpt":"","text":"Minesweeper Minesweeper Setting Easy Normal Hard Lunatic custome var mine1; window.onload = function () { document.getElementsByClassName('mine-wrap')[0].style.display = \"block\"; mine1 = new Mine(\"mine1\", 'face', 30, 16, 99, \"game-tag-images\", \"game-time-images\"); mine1.init(); var inputEle = document.getElementsByTagName('input'); for (var i = 0; i < inputEle.length; i++) { inputEle[i].onclick = function () { var width, height, minenum; if (this.value == 0) { width = 9; height = 9; minenum = 10; } else if (this.value == 1) { width = 16; height = 16; minenum = 40; } else if (this.value == 2) { width = 30; height = 16; minenum = 99; } else if (this.value == 4) { width = 30; height = 24; minenum = 160; } else if (this.value == 3) { width = prompt(\"line: (9-30)\"); height = width && prompt(\"row: (9-24)\"); minenum = height && prompt(\"boom: (10-200)\"); if (!(width && height && minenum)) { return; } if (width < 9) { width = 9; } if (width > 30) { width = 30; } if (height < 9) { height = 9; } if (height > 24) { height = 24; } if (minenum < 10) { minenum = 10; } if (minenum > 200) { minenum = 200; } if (minenum > height * width) { minenum = 10; } } mine1.paneheight = height; mine1.panewidth = width; mine1.minenum = minenum; mine1.init(); document.getElementsByClassName(\"mine-wrap\")[0].style.width = width * mine1.PANE_SIZE + 25 + \"px\"; } }; }"},{"title":"","date":"2020-09-01T08:30:58.432Z","updated":"2020-03-16T06:10:41.264Z","comments":true,"path":"tools/minesweeper/minesweeper-adv/test.html","permalink":"https://brynhild.online/tools/minesweeper/minesweeper-adv/test.html","excerpt":"","text":"Minesweeper Minesweeper Setting Easy Normal Hard Lunatic custome var mine1; window.onload = function () { document.getElementsByClassName('mine-wrap')[0].style.display = \"block\"; mine1 = new Mine(\"mine1\", 'face', 30, 16, 99, \"game-tag-images\", \"game-time-images\"); mine1.init(); var inputEle = document.getElementsByTagName('input'); for (var i = 0; i < inputEle.length; i++) { inputEle[i].onclick = function () { var width, height, minenum; if (this.value == 0) { width = 9; height = 9; minenum = 10; } else if (this.value == 1) { width = 16; height = 16; minenum = 40; } else if (this.value == 2) { width = 30; height = 16; minenum = 99; } else if (this.value == 3) { width = 30; height = 24; minenum = 160; } else if (this.value == 4) { width = prompt(\"line: (9-30)\"); height = width && prompt(\"row: (9-24)\"); minenum = height && prompt(\"mine: (10-200)\"); if (!(width && height && minenum)) { return; } if (width < 9) { width = 9; } if (width > 30) { width = 30; } if (height < 9) { height = 9; } if (height > 24) { height = 24; } if (minenum < 10) { minenum = 10; } if (minenum > 200) { minenum = 200; } if (minenum > height * width) { minenum = 10; } } mine1.paneheight = height; mine1.panewidth = width; mine1.minenum = minenum; mine1.init(); document.getElementsByClassName(\"mine-wrap\")[0].style.width = width * mine1.PANE_SIZE + 25 + \"px\"; } }; }"},{"title":"","date":"2020-09-01T08:30:58.432Z","updated":"2020-03-16T05:53:57.113Z","comments":true,"path":"tools/minesweeper/minesweeper-pri/index.html","permalink":"https://brynhild.online/tools/minesweeper/minesweeper-pri/index.html","excerpt":"","text":"Minesweeper #bar { text-align: center; margin-bottom: 20px; } .bar { height: 25px; width: 150px; line-height: 25px; display: inline-block; border: solid 1px #000; margin-left: 20px; margin-right: 20px; } #grid { margin: auto; } .blocks { width: 30px; height: 30px; line-height: 30px; display: block; text-align: center; border: solid 1px #000; user-select: none; cursor: pointer; } .blocks:hover { background: #0af; } Left: 0 Time: 0s var row = 10; var col = 10; var maxCount = 10; var isFirstOpen = true; var grid = init_grid(); var count = document.getElementById('count'); var time = document.getElementById('time'); count.innerHTML = maxCount; var timer = setInterval(function () { let seconds = (parseFloat(time.innerHTML) + 0.1).toFixed(1); time.innerHTML = seconds; }, 100) function init_grid() { let gridHtml = ''; for (let i = 0; i < row; i++) { gridHtml += '' for (let j = 0; j < col; j++) { gridHtml += ''; } gridHtml += '' } document.getElementById('grid').innerHTML = gridHtml; let blocks = document.getElementsByClassName('blocks'); let grid = new Array(); for (let i = 0; i < blocks.length; i++) { if (i % col === 0) { grid.push(new Array()); } blocks[i].count = 0; grid[parseInt(i / col)].push(blocks[i]); } return grid; } function block_click(_i, _j, e) { if (grid[_i][_j].isOpen) { return; } if (e.button === 0) { if (isFirstOpen) { isFirstOpen = false; let count = 0; while (count < maxCount) { let ri = Math.floor(Math.random() * row); let rj = Math.floor(Math.random() * col); if (!(ri === _i && rj === _j) && !grid[ri][rj].isMine) { grid[ri][rj].isMine = true; count++; for (let i = ri - 1; i < ri + 2; i++) { for (let j = rj - 1; j < rj + 2; j++) { if (i > -1 && j > -1 && i < row && j < col) { grid[i][j].count++; } } } } } } block_open(_i, _j); function block_open(_i, _j) { let block = grid[_i][_j]; op(block); function op(block) { block.isOpen = true; block.style.background = '#ccc'; block.style.cursor = 'default'; } if (block.isMine) { block.innerHTML = '雷'; for (let i = 0; i < row; i++) { for (let j = 0; j < col; j++) { block = grid[i][j]; if (!block.isOpen && block.isMine) { op(block); block.innerHTML = '雷'; } } } clearInterval(timer); alert(\"GAME OVER\"); } else if (block.count === 0) { for (let i = _i - 1; i < _i + 2; i++) { for (let j = _j - 1; j < _j + 2; j++) { if (i > -1 && j > -1 && i < row && j < col && !grid[i][j].isOpen && !grid[i][j] .ismine) { block_open(i, j); } } } } else { block.innerHTML = block.count; } } } else if (e.button === 2) { let block = grid[_i][_j]; if (block.innerHTML !== '▲') { count.innerHTML = parseInt(count.innerHTML) - 1; block.innerHTML = '▲'; } else { block.innerHTML = ''; count.innerHTML = parseInt(count.innerHTML) + 1; } } for (let i = 0; i < row; i++) { for (let j = 0; j < col; j++) { if (!grid[i][j].isMine && !grid[i][j].isOpen) { return; } } } clearInterval(timer); alert(\"YOU WIN!\"); }"},{"title":"Tetris 3D","date":"2019-07-06T15:20:12.000Z","updated":"2020-03-13T15:42:41.868Z","comments":true,"path":"tools/tetris/tetris3d/index.html","permalink":"https://brynhild.online/tools/tetris/tetris3d/index.html","excerpt":"","text":"Tetris 3D #container{margin:0 auto;text-align:center;} .cyr{text-align:center;} Loading game... How to play Use the arrow keys to guide the falling blocks, spacebar and the up-arrow will rotate the block in opposite directions. Alternatively the keys A,W,S and D can be used as arrow keys for the same purpose. When a complete horizontal ring of 15 blocks is occupied by pieces the row will collapse and earn 100 points. If multiple rows are cleared at a time you will earn bonus points. \"A circle may be small, yet it may be as mathematically beautiful and perfect as a large one.\" - Isaac Disraeli Traditional Time Attack Garbage Traditional 1. Empty (0) 2. Empty (0) 3. Empty (0) Time Attack 1. Empty (0) 2. Empty (0) 3. Empty (0) Garbage 1. Empty (59:59) 2. Empty (59:59) 3. Empty (59:59) Skin: Glass Show ghost 0 0:00 You have achieved a high score, please enter your name:"},{"title":"","date":"2020-09-03T08:14:08.029Z","updated":"2020-09-03T08:14:08.029Z","comments":true,"path":"aboutme/index.html","permalink":"https://brynhild.online/aboutme/index.html","excerpt":"","text":"ELLIAS Hello, my name is Ellias K Stuart This is Ethereal, a free site template by AJ for HTML5 UP. It’s fully responsive, built on HTML5 and CSS3, and released entirely for free under the Creative Commons license. Hope you dig it :) Next Sed etiam aenean Mauris et ligula arcu. Proin dapibus convallis accumsan. Lorem maximus hendrerit orci, sit amet elementum massa hendrerit sed. Donec et ullamcorper ligula. Suspendisse amet potenti. Ut pretium libero eleifend euismod sed tristique. Quisque dictum magna risus, id ultricies justo sagittis vitae. Sed id odio tempor, porttitor elit amet, gravida hendrerit fringilla lorem ipsum dolor. Amet lorem Sed vel nibh libero. Mauris et lorem pharetra massa lorem turpis congue pulvinar. Vivamus sed feugiat finibus. Duis amet bibendum amet sed. Duis mauris ex, dapibus sed ligula tempus volutpat magna etiam. Lorem Ipsum Dolor Sit Amet Nullam Magna amet tempus Mauris a cursus velit. Nunc lacinia sollicitudin egestas bibendum, magna dui bibendum ex, sagittis commodo enim risus sed magna nulla. Vestibulum ut consequat velit. Curabitur vitae libero lorem. Quisque iaculis porttitor blandit. Nullam quis sagittis maximus. Sed vel nibh libero. Mauris et lorem pharetra massa lorem turpis congue pulvinar. Elit integer Sed vel nibh libero. Mauris et lorem pharetra massa lorem turpis congue pulvinar. Vivamus sed feugiat finibus. Duis amet bibendum amet sed. Duis mauris ex, dapibus sed ligula tempus volutpat magna etiam. Contact Sed vel nibh libero. Mauris et lorem pharetra massa lorem turpis congue pulvinar. Vivamus sed feugiat finibus. Duis amet bibendum amet sed. Duis mauris ex, dapibus sed ligula tempus volutpat magna etiam. Name Email Message @untitled-tld facebook.com/untitled @untitled-tld @untitled-tld medium.com/untitled Elements Sed vel nibh libero. Mauris et lorem pharetra massa lorem turpis congue pulvinar. Vivamus sed feugiat finibus. Duis amet bibendum amet sed. Duis mauris ex, dapibus sed ligula tempus volutpat magna etiam. Text This is bold and this is strong. This is italic and this is emphasized. This is superscript text and this is subscript text. This is underlined and this is code: for (;;) &#123; ... &#125;. Finally, this is a link. Heading Level 1 Heading Level 2 Heading Level 3 Heading Level 4 Heading Level 5 Heading Level 6 Blockquote Lorem ipsum dolor sit amet. Felis sagittis eget tempus euismod. Vestibulum ante ipsum primis in vestibulum. Blandit adipiscing eu iaculis volutpat ac adipiscing volutpat ac adipiscing faucibus. Preformatted i = 0; while (!deck.isInOrder()) &#123; print 'Iteration ' + (i++); deck.shuffle(); &#125; print 'It took ' + i + ' iterations to sort the deck.'; Lists Unordered Lorem ipsum dolor sit. Dolor pulvinar etiam. Etiam vel felis viverra. Alternate Lorem ipsum dolor sit. Dolor pulvinar etiam. Etiam vel felis viverra. Felis enim feugiat. Ordered Lorem ipsum dolor sit. Dolor pulvinar etiam. Etiam vel felis viverra. Felis enim feugiat. Etiam vel felis lorem. Actions Default Default Default Default Icons Twitter Facebook Instagram GitHub Medium Contact Icons Twitter Facebook Instagram GitHub Medium Table Default Name Description Price Item One Ante turpis integer aliquet porttitor. 29.99 Item Two Vis ac commodo adipiscing arcu aliquet. 19.99 Item Three Morbi faucibus arcu accumsan lorem. 29.99 Item Four Vitae integer tempus condimentum. 19.99 100.00 Alternate Name Description Price Item One Ante turpis integer aliquet porttitor. 29.99 Item Two Vis ac commodo adipiscing arcu aliquet. 19.99 Item Three Morbi faucibus arcu accumsan lorem. 29.99 Item Four Vitae integer tempus condimentum. 19.99 Item Five Ante turpis integer aliquet porttitor. 29.99 100.00 Buttons Primary Default Default Large Small Icon Icon Disabled Disabled Icon Icon Form Name Email Category - Manufacturing Shipping Administration Human Resources Low Priority High Priority Email a copy Not a robot Message &copy; Untitled. Design: HTML5 UP."},{"title":"","date":"2020-09-01T08:30:58.431Z","updated":"2020-02-17T08:15:02.160Z","comments":true,"path":"tools/element/index.html","permalink":"https://brynhild.online/tools/element/index.html","excerpt":"","text":"Elements html, body { height: 100%; } body { background-color: #000000; margin: 0; font-family: Helvetica, sans-serif; ; overflow: hidden; } a { color: #ffffff; } #info { position: absolute; width: 100%; color: #ffffff; padding: 5px; font-family: Monospace; font-size: 13px; font-weight: bold; text-align: center; z-index: 1; } #menu { position: absolute; bottom: 20px; width: 100%; text-align: center; font-family: verdana, Tahoma, Arial, Hei, \"Microsoft Yahei\", SimHei; } .element { width: 120px; height: 160px; box-shadow: 0px 0px 12px rgba(0, 255, 255, 0.5); border: 1px solid rgba(127, 255, 255, 0.25); text-align: center; cursor: default; } .element:hover { box-shadow: 0px 0px 12px rgba(0, 255, 255, 0.75); border: 1px solid rgba(127, 255, 255, 0.75); } .element .number { position: absolute; top: 20px; right: 20px; font-size: 12px; color: rgba(127, 255, 255, 0.75); } .element .symbol { position: absolute; top: 40px; left: 0px; right: 0px; font-size: 60px; font-weight: bold; color: rgba(255, 255, 255, 0.75); text-shadow: 0 0 10px rgba(0, 255, 255, 0.95); } .element .details { position: absolute; bottom: 15px; left: 0px; right: 0px; font-size: 12px; color: rgba(127, 255, 255, 0.75); } button { color: rgba(127, 255, 255, 0.75); background: transparent; outline: 1px solid rgba(127, 255, 255, 0.75); border: 0px; padding: 5px 10px; cursor: pointer; } button:hover { background-color: rgba(0, 255, 255, 0.5); } button:active { color: #000000; background-color: rgba(0, 255, 255, 0.75); } TABLE SPHERE HELIX GRID var table = [ \"H\", \"Hydrogen\", \"1.00794\", 1, 1, \"He\", \"Helium\", \"4.002602\", 18, 1, \"Li\", \"Lithium\", \"#6.941\", 1, 2, \"Be\", \"Beryllium\", \"9.012182\", 2, 2, \"B\", \"Boron\", \"#10.811\", 13, 2, \"C\", \"Carbon\", \"#12.0107\", 14, 2, \"N\", \"Nitrogen\", \"#14.0067\", 15, 2, \"O\", \"Oxygen\", \"#15.9994\", 16, 2, \"F\", \"Fluorine\", \"18.9984032\", 17, 2, \"Ne\", \"Neon\", \"#20.1797\", 18, 2, \"Na\", \"Sodium\", \"22.98976...\", 1, 3, \"Mg\", \"Magnesium\", \"#24.305\", 2, 3, \"Al\", \"Aluminium\", \"26.9815386\", 13, 3, \"Si\", \"Silicon\", \"#28.0855\", 14, 3, \"P\", \"Phosphorus\", \"30.973762\", 15, 3, \"S\", \"Sulfur\", \"#32.065\", 16, 3, \"Cl\", \"Chlorine\", \"#35.453\", 17, 3, \"Ar\", \"Argon\", \"#39.948\", 18, 3, \"K\", \"Potassium\", \"#39.948\", 1, 4, \"Ca\", \"Calcium\", \"#40.078\", 2, 4, \"Sc\", \"Scandium\", \"44.955912\", 3, 4, \"Ti\", \"Titanium\", \"#47.867\", 4, 4, \"V\", \"Vanadium\", \"#50.9415\", 5, 4, \"Cr\", \"Chromium\", \"#51.9961\", 6, 4, \"Mn\", \"Manganese\", \"54.938045\", 7, 4, \"Fe\", \"Iron\", \"#55.845\", 8, 4, \"Co\", \"Cobalt\", \"58.933195\", 9, 4, \"Ni\", \"Nickel\", \"#58.6934\", 10, 4, \"Cu\", \"Copper\", \"#63.546\", 11, 4, \"Zn\", \"Zinc\", \"#65.38\", 12, 4, \"Ga\", \"Gallium\", \"#69.723\", 13, 4, \"Ge\", \"Germanium\", \"#72.63\", 14, 4, \"As\", \"Arsenic\", \"#74.9216\", 15, 4, \"Se\", \"Selenium\", \"#78.96\", 16, 4, \"Br\", \"Bromine\", \"#79.904\", 17, 4, \"Kr\", \"Krypton\", \"#83.798\", 18, 4, \"Rb\", \"Rubidium\", \"#85.4678\", 1, 5, \"Sr\", \"Strontium\", \"#87.62\", 2, 5, \"Y\", \"Yttrium\", \"88.90585\", 3, 5, \"Zr\", \"Zirconium\", \"#91.224\", 4, 5, \"Nb\", \"Niobium\", \"92.90628\", 5, 5, \"Mo\", \"Molybdenum\", \"#95.96\", 6, 5, \"Tc\", \"Technetium\", \"(98)\", 7, 5, \"Ru\", \"Ruthenium\", \"#101.07\", 8, 5, \"Rh\", \"Rhodium\", \"#102.9055\", 9, 5, \"Pd\", \"Palladium\", \"#106.42\", 10, 5, \"Ag\", \"Silver\", \"#107.8682\", 11, 5, \"Cd\", \"Cadmium\", \"#112.411\", 12, 5, \"In\", \"Indium\", \"#114.818\", 13, 5, \"Sn\", \"Tin\", \"#118.71\", 14, 5, \"Sb\", \"Antimony\", \"#121.76\", 15, 5, \"Te\", \"Tellurium\", \"127.6\", 16, 5, \"I\", \"Iodine\", \"126.90447\", 17, 5, \"Xe\", \"Xenon\", \"#131.293\", 18, 5, \"Cs\", \"Caesium\", \"#132.9054\", 1, 6, \"Ba\", \"Barium\", \"#132.9054\", 2, 6, \"La\", \"Lanthanum\", \"138.90547\", 4, 9, \"Ce\", \"Cerium\", \"#140.116\", 5, 9, \"Pr\", \"Praseodymium\", \"140.90765\", 6, 9, \"Nd\", \"Neodymium\", \"#144.242\", 7, 9, \"Pm\", \"Promethium\", \"(145)\", 8, 9, \"Sm\", \"Samarium\", \"#150.36\", 9, 9, \"Eu\", \"Europium\", \"#151.964\", 10, 9, \"Gd\", \"Gadolinium\", \"#157.25\", 11, 9, \"Tb\", \"Terbium\", \"158.92535\", 12, 9, \"Dy\", \"Dysprosium\", \"162.5\", 13, 9, \"Ho\", \"Holmium\", \"164.93032\", 14, 9, \"Er\", \"Erbium\", \"#167.259\", 15, 9, \"Tm\", \"Thulium\", \"168.93421\", 16, 9, \"Yb\", \"Ytterbium\", \"#173.054\", 17, 9, \"Lu\", \"Lutetium\", \"#174.9668\", 18, 9, \"Hf\", \"Hafnium\", \"#178.49\", 4, 6, \"Ta\", \"Tantalum\", \"180.94788\", 5, 6, \"W\", \"Tungsten\", \"#183.84\", 6, 6, \"Re\", \"Rhenium\", \"#186.207\", 7, 6, \"Os\", \"Osmium\", \"#190.23\", 8, 6, \"Ir\", \"Iridium\", \"#192.217\", 9, 6, \"Pt\", \"Platinum\", \"#195.084\", 10, 6, \"Au\", \"Gold\", \"196.966569\", 11, 6, \"Hg\", \"Mercury\", \"#200.59\", 12, 6, \"Tl\", \"Thallium\", \"#204.3833\", 13, 6, \"Pb\", \"Lead\", \"207.2\", 14, 6, \"Bi\", \"Bismuth\", \"#208.9804\", 15, 6, \"Po\", \"Polonium\", \"(209)\", 16, 6, \"At\", \"Astatine\", \"(210)\", 17, 6, \"Rn\", \"Radon\", \"(222)\", 18, 6, \"Fr\", \"Francium\", \"(223)\", 1, 7, \"Ra\", \"Radium\", \"(226)\", 2, 7, \"Ac\", \"Actinium\", \"(227)\", 4, 10, \"Th\", \"Thorium\", \"232.03806\", 5, 10, \"Pa\", \"Protactinium\", \"#231.0588\", 6, 10, \"U\", \"Uranium\", \"238.02891\", 7, 10, \"Np\", \"Neptunium\", \"(237)\", 8, 10, \"Pu\", \"Plutonium\", \"(244)\", 9, 10, \"Am\", \"Americium\", \"(243)\", 10, 10, \"Cm\", \"Curium\", \"(247)\", 11, 10, \"Bk\", \"Berkelium\", \"(247)\", 12, 10, \"Cf\", \"Californium\", \"(251)\", 13, 10, \"Es\", \"Einstenium\", \"(252)\", 14, 10, \"Fm\", \"Fermium\", \"(257)\", 15, 10, \"Md\", \"Mendelevium\", \"(258)\", 16, 10, \"No\", \"Nobelium\", \"(259)\", 17, 10, \"Lr\", \"Lawrencium\", \"(262)\", 18, 10, \"Rf\", \"Rutherfordium\", \"(267)\", 4, 7, \"Db\", \"Dubnium\", \"(268)\", 5, 7, \"Sg\", \"Seaborgium\", \"(271)\", 6, 7, \"Bh\", \"Bohrium\", \"(272)\", 7, 7, \"Hs\", \"Hassium\", \"(270)\", 8, 7, \"Mt\", \"Meitnerium\", \"(276)\", 9, 7, \"Ds\", \"Darmstadium\", \"(281)\", 10, 7, \"Rg\", \"Roentgenium\", \"(280)\", 11, 7, \"Cn\", \"Copernicium\", \"(285)\", 12, 7, \"Uut\", \"Unutrium\", \"(284)\", 13, 7, \"Fl\", \"Flerovium\", \"(289)\", 14, 7, \"Uup\", \"Ununpentium\", \"(288)\", 15, 7, \"Lv\", \"Livermorium\", \"(293)\", 16, 7, \"Uus\", \"Ununseptium\", \"(294)\", 17, 7, \"Uuo\", \"Ununoctium\", \"(294)\", 18, 7 ]; var camera, scene, renderer; var controls; var objects = []; var targets = { table: [], sphere: [], helix: [], grid: [] }; init(); animate(); function init() { camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 10000); camera.position.z = 3000; scene = new THREE.Scene(); // table for (var i = 0; i < table.length; i += 5) { var element = document.createElement('div'); element.className = 'element'; element.style.backgroundColor = 'rgba(0,127,127,' + (Math.random() * 0.5 + 0.25) + ')'; var number = document.createElement('div'); number.className = 'number'; number.textContent = (i / 5) + 1; element.appendChild(number); var symbol = document.createElement('div'); symbol.className = 'symbol'; symbol.textContent = table[i]; element.appendChild(symbol); var details = document.createElement('div'); details.className = 'details'; details.innerHTML = table[i + 1] + '' + table[i + 2]; element.appendChild(details); var object = new THREE.CSS3DObject(element); object.position.x = Math.random() * 4000 - 2000; object.position.y = Math.random() * 4000 - 2000; object.position.z = Math.random() * 4000 - 2000; scene.add(object); objects.push(object); // var object = new THREE.Object3D(); object.position.x = (table[i + 3] * 140) - 1330; object.position.y = -(table[i + 4] * 180) + 990; targets.table.push(object); } // sphere var vector = new THREE.Vector3(); for (var i = 0, l = objects.length; i < l; i++) { var phi = Math.acos(-1 + (2 * i) / l); var theta = Math.sqrt(l * Math.PI) * phi; var object = new THREE.Object3D(); object.position.x = 800 * Math.cos(theta) * Math.sin(phi); object.position.y = 800 * Math.sin(theta) * Math.sin(phi); object.position.z = 800 * Math.cos(phi); vector.copy(object.position).multiplyScalar(2); object.lookAt(vector); targets.sphere.push(object); } // helix var vector = new THREE.Vector3(); for (var i = 0, l = objects.length; i < l; i++) { var phi = i * 0.175 + Math.PI; var object = new THREE.Object3D(); object.position.x = 900 * Math.sin(phi); object.position.y = -(i * 8) + 450; object.position.z = 900 * Math.cos(phi); vector.x = object.position.x * 2; vector.y = object.position.y; vector.z = object.position.z * 2; object.lookAt(vector); targets.helix.push(object); } // grid for (var i = 0; i < objects.length; i++) { var object = new THREE.Object3D(); object.position.x = ((i % 5) * 400) - 800; object.position.y = (-(Math.floor(i / 5) % 5) * 400) + 800; object.position.z = (Math.floor(i / 25)) * 1000 - 2000; targets.grid.push(object); } // renderer = new THREE.CSS3DRenderer(); renderer.setSize(window.innerWidth, window.innerHeight); renderer.domElement.style.position = 'absolute'; document.getElementById('container').appendChild(renderer.domElement); // controls = new THREE.TrackballControls(camera, renderer.domElement); controls.rotateSpeed = 0.5; controls.minDistance = 500; controls.maxDistance = 6000; controls.addEventListener('change', render); var button = document.getElementById('table'); button.addEventListener('click', function (event) { transform(targets.table, 2000); }, false); var button = document.getElementById('sphere'); button.addEventListener('click', function (event) { transform(targets.sphere, 2000); }, false); var button = document.getElementById('helix'); button.addEventListener('click', function (event) { transform(targets.helix, 2000); }, false); var button = document.getElementById('grid'); button.addEventListener('click', function (event) { transform(targets.grid, 2000); }, false); transform(targets.table, 5000); // window.addEventListener('resize', onWindowResize, false); } function transform(targets, duration) { TWEEN.removeAll(); for (var i = 0; i < objects.length; i++) { var object = objects[i]; var target = targets[i]; new TWEEN.Tween(object.position) .to({ x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration) .easing(TWEEN.Easing.Exponential.InOut) .start(); new TWEEN.Tween(object.rotation) .to({ x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration) .easing(TWEEN.Easing.Exponential.InOut) .start(); } new TWEEN.Tween(this) .to({}, duration * 2) .onUpdate(render) .start(); } function onWindowResize() { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); render(); } function animate() { requestAnimationFrame(animate); TWEEN.update(); controls.update(); } function render() { renderer.render(scene, camera); } document.onkeydown = function (e) { var currKey = 0, evt = e || window.event; currKey = evt.keyCode || evt.which || evt.charCode; if (currKey == 123) { window.event.cancelBubble = true; window.event.returnValue = false; } }"},{"title":"","date":"2020-09-03T07:36:58.992Z","updated":"2019-08-30T14:53:02.000Z","comments":true,"path":"aboutme/assets/js/main.js","permalink":"https://brynhild.online/aboutme/assets/js/main.js","excerpt":"","text":"/* Ethereal by HTML5 UP html5up.net | @ajlkn Free for personal and commercial use under the CCA 3.0 license (html5up.net/license) */ (function($) { // Settings. var settings = { // Keyboard shortcuts. keyboardShortcuts: { // If true, enables scrolling via keyboard shortcuts. enabled: true, // Sets the distance to scroll when using the left/right arrow keys. distance: 50 }, // Scroll wheel. scrollWheel: { // If true, enables scrolling via the scroll wheel. enabled: true, // Sets the scroll wheel factor. (Ideally) a value between 0 and 1 (lower = slower scroll, higher = faster scroll). factor: 1 }, // Scroll zones. scrollZones: { // If true, enables scrolling via scroll zones on the left/right edges of the scren. enabled: true, // Sets the speed at which the page scrolls when a scroll zone is active (higher = faster scroll, lower = slower scroll). speed: 15 }, // Dragging. dragging: { // If true, enables scrolling by dragging the main wrapper with the mouse. enabled: true, // Sets the momentum factor. Must be a value between 0 and 1 (lower = less momentum, higher = more momentum, 0 = disable momentum scrolling). momentum: 0.875, // Sets the drag threshold (in pixels). threshold: 10 }, // If set to a valid selector , prevents key/mouse events from bubbling from these elements. excludeSelector: 'input:focus, select:focus, textarea:focus, audio, video, iframe', // Link scroll speed. linkScrollSpeed: 1000 }; // Vars. var $window = $(window), $document = $(document), $body = $('body'), $html = $('html'), $bodyHtml = $('body,html'), $wrapper = $('#wrapper'); // Breakpoints. breakpoints({ xlarge: [ '1281px', '1680px' ], large: [ '981px', '1280px' ], medium: [ '737px', '980px' ], small: [ '481px', '736px' ], xsmall: [ '361px', '480px' ], xxsmall: [ null, '360px' ], short: '(min-aspect-ratio: 16/7)', xshort: '(min-aspect-ratio: 16/6)' }); // Play initial animations on page load. $window.on('load', function() { window.setTimeout(function() { $body.removeClass('is-preload'); }, 100); }); // Tweaks/fixes. // Mobile: Revert to native scrolling. if (browser.mobile) { // Disable all scroll-assist features. settings.keyboardShortcuts.enabled = false; settings.scrollWheel.enabled = false; settings.scrollZones.enabled = false; settings.dragging.enabled = false; // Re-enable overflow on body. $body.css('overflow-x', 'auto'); } // IE: Various fixes. if (browser.name == 'ie') { // Enable IE mode. $body.addClass('is-ie'); // Page widths. $window .on('load resize', function() { // Calculate wrapper width. var w = 0; $wrapper.children().each(function() { w += $(this).width(); }); // Apply to page. $html.css('width', w + 'px'); }); } // Polyfill: Object fit. if (!browser.canUse('object-fit')) { $('.image[data-position]').each(function() { var $this = $(this), $img = $this.children('img'); // Apply img as background. $this .css('background-image', 'url(\"' + $img.attr('src') + '\")') .css('background-position', $this.data('position')) .css('background-size', 'cover') .css('background-repeat', 'no-repeat'); // Hide img. $img .css('opacity', '0'); }); } // Keyboard shortcuts. if (settings.keyboardShortcuts.enabled) (function() { $wrapper // Prevent keystrokes inside excluded elements from bubbling. .on('keypress keyup keydown', settings.excludeSelector, function(event) { // Stop propagation. event.stopPropagation(); }); $window // Keypress event. .on('keydown', function(event) { var scrolled = false; switch (event.keyCode) { // Left arrow. case 37: $document.scrollLeft($document.scrollLeft() - settings.keyboardShortcuts.distance); scrolled = true; break; // Right arrow. case 39: $document.scrollLeft($document.scrollLeft() + settings.keyboardShortcuts.distance); scrolled = true; break; // Page Up. case 33: $document.scrollLeft($document.scrollLeft() - $window.width() + 100); scrolled = true; break; // Page Down, Space. case 34: case 32: $document.scrollLeft($document.scrollLeft() + $window.width() - 100); scrolled = true; break; // Home. case 36: $document.scrollLeft(0); scrolled = true; break; // End. case 35: $document.scrollLeft($document.width()); scrolled = true; break; } // Scrolled? if (scrolled) { // Prevent default. event.preventDefault(); event.stopPropagation(); // Stop link scroll. $bodyHtml.stop(); } }); })(); // Scroll wheel. if (settings.scrollWheel.enabled) (function() { // Based on code by @miorel + @pieterv of Facebook (thanks guys :) // github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js var normalizeWheel = function(event) { var pixelStep = 10, lineHeight = 40, pageHeight = 800, sX = 0, sY = 0, pX = 0, pY = 0; // Legacy. if ('detail' in event) sY = event.detail; else if ('wheelDelta' in event) sY = event.wheelDelta / -120; else if ('wheelDeltaY' in event) sY = event.wheelDeltaY / -120; if ('wheelDeltaX' in event) sX = event.wheelDeltaX / -120; // Side scrolling on FF with DOMMouseScroll. if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) { sX = sY; sY = 0; } // Calculate. pX = sX * pixelStep; pY = sY * pixelStep; if ('deltaY' in event) pY = event.deltaY; if ('deltaX' in event) pX = event.deltaX; if ((pX || pY) && event.deltaMode) { if (event.deltaMode == 1) { pX *= lineHeight; pY *= lineHeight; } else { pX *= pageHeight; pY *= pageHeight; } } // Fallback if spin cannot be determined. if (pX && !sX) sX = (pX < 1) ? -1 : 1; if (pY && !sY) sY = (pY < 1) ? -1 : 1; // Return. return { spinX: sX, spinY: sY, pixelX: pX, pixelY: pY }; }; // Wheel event. $body.on('wheel', function(event) { // Disable on 0 ? 1 : -1; // Scroll page. $document.scrollLeft($document.scrollLeft() + (delta * direction)); }); })(); // Scroll zones. if (settings.scrollZones.enabled) (function() { var $left = $(''), $right = $(''), $zones = $left.add($right), paused = false, intervalId = null, direction, activate = function(d) { // Disable on settings.dragging.threshold) { $wrapper.addClass('is-dragged'); dragged = true; } }) // Mouseup/mouseleave event. .on('mouseup mouseleave', function(event) { var m; // Not dragging? Bail. if (!dragging) return; // Dragged? Re-enable pointer events on all descendents. if (dragged) { setTimeout(function() { $wrapper.removeClass('is-dragged'); }, 100); dragged = false; } // Distance exceeds threshold? Prevent default. if (distance > settings.dragging.threshold) event.preventDefault(); // End drag. dragging = false; $wrapper.removeClass('is-dragging'); clearInterval(velocityIntervalId); clearInterval(momentumIntervalId); // Pause scroll zone. $wrapper.triggerHandler('---pauseScrollZone'); // Initialize momentum interval. if (settings.dragging.momentum > 0) { m = velocity; momentumIntervalId = setInterval(function() { // Momentum is NaN? Bail. if (isNaN(m)) { clearInterval(momentumIntervalId); return; } // Scroll page. $document.scrollLeft($document.scrollLeft() + (m * direction)); // Decrease momentum. m = m * settings.dragging.momentum; // Negligible momentum? Clear interval and end. if (Math.abs(m) < 1) clearInterval(momentumIntervalId); }, 15); } }); })(); // Link scroll. $wrapper .on('mousedown mouseup', 'a[href^=\"#\"]', function(event) { // Stop propagation. event.stopPropagation(); }) .on('click', 'a[href^=\"#\"]', function(event) { var $this = $(this), href = $this.attr('href'), $target, x, y; // Get target. if (href == '#' || ($target = $(href)).length == 0) return; // Prevent default. event.preventDefault(); event.stopPropagation(); // Calculate x, y. if (breakpoints.active('"},{"title":"Arcaea","date":"2020-09-03T07:50:49.810Z","updated":"2020-04-06T13:55:56.937Z","comments":true,"path":"tools/arcaea/index.html","permalink":"https://brynhild.online/tools/arcaea/index.html","excerpt":"","text":"A Wandering Melody of Love AI[UE]OON Alexandrite amygdata Anökumene Antithese Arcaea v2.2.0 Title Astral tale Auxesia Avant Raze Axium Crisis Babaroque BATTLE NO.1 Be There Black Territory Blaster Blossoms BLRINK Bookmaker (2D Version) Brand new world Call My Name feat. Yukacco carmine：scythe Chelsea Chronostasis Clotho and the stargazer conflict corps-sans-organes Corruption CROSS✝︎SOUL cry of viyella Cyaegha cyanine Cybernecia Catharsis Dandelion DataErr0r Dement after legend Diode Dot to Dot feat. shully Dreadnought Dream goes on Dreamin’ Attraction!! dropdead DX Choseinou Full Metal Shojo Einherjar Joker Empire of Winter Essence of Twilight Ether Strike Evoltex(poppi’n mix) Fairytale Fallensquare Filament Flashback Flyburg and Endroll Fracture Ray FREEF4LL Garakuta Doll Play Genesis GLORY：ROAD GOODTEK (Arcaea Edit) Grievous Lady (Full ver.) Grievous Lady Grimheart Halcyon Hall of Mirrors Harutopia Utopia of Spring Heavenly caress Heavensdoor Hikari iconoclast Ignotus Afterburn ignotus Ikazuchi Illegal Paradise Impure Bird Infinity Heaven inkar-usi I’ve heard it said IZANA Journey Kanagawa Cyber Culvert La’qryma of the Wasteland Lethaeus Libertas Linear Accelerator Lost Civilization Lucifer Lumia LunarOrbit -believe in the Espebranch road- Maze No.9 Memory Forest memoryfactory.lzh Menu MERLIN Metallic Punisher Mirzam Modelista Monochrome Princess Moonheart Moonlight of Sand Castle next to you Nhelv Nirv lucE Oblivia OMAKENO Stroke One Last Drive Oracle ouroboros -twin stroke of the end- Paradise Particle Arts Party Vinyl Phantasia PRAGMATISM Purgatorium qualia -ideaesthesia- Quon Rabbit In The Black Room REconstruction Red and Blue and Green Red and Blue Reinvent Relentless ReviXy Ringed Genesis Rise Romance Wars Rugie SAIKYO STRONGER Sayonara Hatsukoi Scarlet Lance Senkyou Shades of Light in a Transcendent Realm Sheriruth Silent Rush Singularity Singularity VVVIP Snow White Solitary Dream SOUNDWiTCH Specta STAGER Story mode(Full+Loop) Strongholds Sulfur Suomi SUPERNOVA Surrender Syro The Message Tie me down gently Tiferet Title OP trappola bewitching Tutorial Valhalla：0 VECTOЯ Vexaria Vicious Heroism Vindication World bgm World Vanquisher world.execute(me); Yosakura Fubuki Your voice so… feat. Such αterlβus γuarδina"},{"title":"","date":"2020-09-03T07:36:58.994Z","updated":"2019-08-30T14:53:02.000Z","comments":true,"path":"aboutme/assets/css/fontawesome-all.min.css","permalink":"https://brynhild.online/aboutme/assets/css/fontawesome-all.min.css","excerpt":"","text":"/*! * Font Awesome Free 5.9.0 by @fontawesome - https://fontawesome.com * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) */ .fa,.fab,.fal,.far,.fas{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-block;font-style:normal;font-variant:normal;text-rendering:auto;line-height:1}.fa-lg{font-size:1.33333em;line-height:.75em;vertical-align:-.0667em}.fa-xs{font-size:.75em}.fa-sm{font-size:.875em}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:2.5em;padding-left:0}.fa-ul>li{position:relative}.fa-li{left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}.fa-border{border:.08em solid #eee;border-radius:.1em;padding:.2em .25em .15em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left{margin-right:.3em}.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right{margin-left:.3em}.fa-spin{animation:fa-spin 2s infinite linear}.fa-pulse{animation:fa-spin 1s infinite steps(8)}@keyframes fa-spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.fa-rotate-90{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\";transform:rotate(90deg)}.fa-rotate-180{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\";transform:rotate(180deg)}.fa-rotate-270{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\";transform:rotate(270deg)}.fa-flip-horizontal{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\";transform:scaleX(-1)}.fa-flip-vertical{transform:scaleY(-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical,.fa-flip-vertical{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\"}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{transform:scale(-1)}:root .fa-flip-both,:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270{filter:none}.fa-stack{display:inline-block;height:2em;line-height:2em;position:relative;vertical-align:middle;width:2.5em}.fa-stack-1x,.fa-stack-2x{left:0;position:absolute;text-align:center;width:100%}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-500px:before{content:\"\\f26e\"}.fa-accessible-icon:before{content:\"\\f368\"}.fa-accusoft:before{content:\"\\f369\"}.fa-acquisitions-incorporated:before{content:\"\\f6af\"}.fa-ad:before{content:\"\\f641\"}.fa-address-book:before{content:\"\\f2b9\"}.fa-address-card:before{content:\"\\f2bb\"}.fa-adjust:before{content:\"\\f042\"}.fa-adn:before{content:\"\\f170\"}.fa-adobe:before{content:\"\\f778\"}.fa-adversal:before{content:\"\\f36a\"}.fa-affiliatetheme:before{content:\"\\f36b\"}.fa-air-freshener:before{content:\"\\f5d0\"}.fa-airbnb:before{content:\"\\f834\"}.fa-algolia:before{content:\"\\f36c\"}.fa-align-center:before{content:\"\\f037\"}.fa-align-justify:before{content:\"\\f039\"}.fa-align-left:before{content:\"\\f036\"}.fa-align-right:before{content:\"\\f038\"}.fa-alipay:before{content:\"\\f642\"}.fa-allergies:before{content:\"\\f461\"}.fa-amazon:before{content:\"\\f270\"}.fa-amazon-pay:before{content:\"\\f42c\"}.fa-ambulance:before{content:\"\\f0f9\"}.fa-american-sign-language-interpreting:before{content:\"\\f2a3\"}.fa-amilia:before{content:\"\\f36d\"}.fa-anchor:before{content:\"\\f13d\"}.fa-android:before{content:\"\\f17b\"}.fa-angellist:before{content:\"\\f209\"}.fa-angle-double-down:before{content:\"\\f103\"}.fa-angle-double-left:before{content:\"\\f100\"}.fa-angle-double-right:before{content:\"\\f101\"}.fa-angle-double-up:before{content:\"\\f102\"}.fa-angle-down:before{content:\"\\f107\"}.fa-angle-left:before{content:\"\\f104\"}.fa-angle-right:before{content:\"\\f105\"}.fa-angle-up:before{content:\"\\f106\"}.fa-angry:before{content:\"\\f556\"}.fa-angrycreative:before{content:\"\\f36e\"}.fa-angular:before{content:\"\\f420\"}.fa-ankh:before{content:\"\\f644\"}.fa-app-store:before{content:\"\\f36f\"}.fa-app-store-ios:before{content:\"\\f370\"}.fa-apper:before{content:\"\\f371\"}.fa-apple:before{content:\"\\f179\"}.fa-apple-alt:before{content:\"\\f5d1\"}.fa-apple-pay:before{content:\"\\f415\"}.fa-archive:before{content:\"\\f187\"}.fa-archway:before{content:\"\\f557\"}.fa-arrow-alt-circle-down:before{content:\"\\f358\"}.fa-arrow-alt-circle-left:before{content:\"\\f359\"}.fa-arrow-alt-circle-right:before{content:\"\\f35a\"}.fa-arrow-alt-circle-up:before{content:\"\\f35b\"}.fa-arrow-circle-down:before{content:\"\\f0ab\"}.fa-arrow-circle-left:before{content:\"\\f0a8\"}.fa-arrow-circle-right:before{content:\"\\f0a9\"}.fa-arrow-circle-up:before{content:\"\\f0aa\"}.fa-arrow-down:before{content:\"\\f063\"}.fa-arrow-left:before{content:\"\\f060\"}.fa-arrow-right:before{content:\"\\f061\"}.fa-arrow-up:before{content:\"\\f062\"}.fa-arrows-alt:before{content:\"\\f0b2\"}.fa-arrows-alt-h:before{content:\"\\f337\"}.fa-arrows-alt-v:before{content:\"\\f338\"}.fa-artstation:before{content:\"\\f77a\"}.fa-assistive-listening-systems:before{content:\"\\f2a2\"}.fa-asterisk:before{content:\"\\f069\"}.fa-asymmetrik:before{content:\"\\f372\"}.fa-at:before{content:\"\\f1fa\"}.fa-atlas:before{content:\"\\f558\"}.fa-atlassian:before{content:\"\\f77b\"}.fa-atom:before{content:\"\\f5d2\"}.fa-audible:before{content:\"\\f373\"}.fa-audio-description:before{content:\"\\f29e\"}.fa-autoprefixer:before{content:\"\\f41c\"}.fa-avianex:before{content:\"\\f374\"}.fa-aviato:before{content:\"\\f421\"}.fa-award:before{content:\"\\f559\"}.fa-aws:before{content:\"\\f375\"}.fa-baby:before{content:\"\\f77c\"}.fa-baby-carriage:before{content:\"\\f77d\"}.fa-backspace:before{content:\"\\f55a\"}.fa-backward:before{content:\"\\f04a\"}.fa-bacon:before{content:\"\\f7e5\"}.fa-balance-scale:before{content:\"\\f24e\"}.fa-balance-scale-left:before{content:\"\\f515\"}.fa-balance-scale-right:before{content:\"\\f516\"}.fa-ban:before{content:\"\\f05e\"}.fa-band-aid:before{content:\"\\f462\"}.fa-bandcamp:before{content:\"\\f2d5\"}.fa-barcode:before{content:\"\\f02a\"}.fa-bars:before{content:\"\\f0c9\"}.fa-baseball-ball:before{content:\"\\f433\"}.fa-basketball-ball:before{content:\"\\f434\"}.fa-bath:before{content:\"\\f2cd\"}.fa-battery-empty:before{content:\"\\f244\"}.fa-battery-full:before{content:\"\\f240\"}.fa-battery-half:before{content:\"\\f242\"}.fa-battery-quarter:before{content:\"\\f243\"}.fa-battery-three-quarters:before{content:\"\\f241\"}.fa-battle-net:before{content:\"\\f835\"}.fa-bed:before{content:\"\\f236\"}.fa-beer:before{content:\"\\f0fc\"}.fa-behance:before{content:\"\\f1b4\"}.fa-behance-square:before{content:\"\\f1b5\"}.fa-bell:before{content:\"\\f0f3\"}.fa-bell-slash:before{content:\"\\f1f6\"}.fa-bezier-curve:before{content:\"\\f55b\"}.fa-bible:before{content:\"\\f647\"}.fa-bicycle:before{content:\"\\f206\"}.fa-biking:before{content:\"\\f84a\"}.fa-bimobject:before{content:\"\\f378\"}.fa-binoculars:before{content:\"\\f1e5\"}.fa-biohazard:before{content:\"\\f780\"}.fa-birthday-cake:before{content:\"\\f1fd\"}.fa-bitbucket:before{content:\"\\f171\"}.fa-bitcoin:before{content:\"\\f379\"}.fa-bity:before{content:\"\\f37a\"}.fa-black-tie:before{content:\"\\f27e\"}.fa-blackberry:before{content:\"\\f37b\"}.fa-blender:before{content:\"\\f517\"}.fa-blender-phone:before{content:\"\\f6b6\"}.fa-blind:before{content:\"\\f29d\"}.fa-blog:before{content:\"\\f781\"}.fa-blogger:before{content:\"\\f37c\"}.fa-blogger-b:before{content:\"\\f37d\"}.fa-bluetooth:before{content:\"\\f293\"}.fa-bluetooth-b:before{content:\"\\f294\"}.fa-bold:before{content:\"\\f032\"}.fa-bolt:before{content:\"\\f0e7\"}.fa-bomb:before{content:\"\\f1e2\"}.fa-bone:before{content:\"\\f5d7\"}.fa-bong:before{content:\"\\f55c\"}.fa-book:before{content:\"\\f02d\"}.fa-book-dead:before{content:\"\\f6b7\"}.fa-book-medical:before{content:\"\\f7e6\"}.fa-book-open:before{content:\"\\f518\"}.fa-book-reader:before{content:\"\\f5da\"}.fa-bookmark:before{content:\"\\f02e\"}.fa-bootstrap:before{content:\"\\f836\"}.fa-border-all:before{content:\"\\f84c\"}.fa-border-none:before{content:\"\\f850\"}.fa-border-style:before{content:\"\\f853\"}.fa-bowling-ball:before{content:\"\\f436\"}.fa-box:before{content:\"\\f466\"}.fa-box-open:before{content:\"\\f49e\"}.fa-boxes:before{content:\"\\f468\"}.fa-braille:before{content:\"\\f2a1\"}.fa-brain:before{content:\"\\f5dc\"}.fa-bread-slice:before{content:\"\\f7ec\"}.fa-briefcase:before{content:\"\\f0b1\"}.fa-briefcase-medical:before{content:\"\\f469\"}.fa-broadcast-tower:before{content:\"\\f519\"}.fa-broom:before{content:\"\\f51a\"}.fa-brush:before{content:\"\\f55d\"}.fa-btc:before{content:\"\\f15a\"}.fa-buffer:before{content:\"\\f837\"}.fa-bug:before{content:\"\\f188\"}.fa-building:before{content:\"\\f1ad\"}.fa-bullhorn:before{content:\"\\f0a1\"}.fa-bullseye:before{content:\"\\f140\"}.fa-burn:before{content:\"\\f46a\"}.fa-buromobelexperte:before{content:\"\\f37f\"}.fa-bus:before{content:\"\\f207\"}.fa-bus-alt:before{content:\"\\f55e\"}.fa-business-time:before{content:\"\\f64a\"}.fa-buysellads:before{content:\"\\f20d\"}.fa-calculator:before{content:\"\\f1ec\"}.fa-calendar:before{content:\"\\f133\"}.fa-calendar-alt:before{content:\"\\f073\"}.fa-calendar-check:before{content:\"\\f274\"}.fa-calendar-day:before{content:\"\\f783\"}.fa-calendar-minus:before{content:\"\\f272\"}.fa-calendar-plus:before{content:\"\\f271\"}.fa-calendar-times:before{content:\"\\f273\"}.fa-calendar-week:before{content:\"\\f784\"}.fa-camera:before{content:\"\\f030\"}.fa-camera-retro:before{content:\"\\f083\"}.fa-campground:before{content:\"\\f6bb\"}.fa-canadian-maple-leaf:before{content:\"\\f785\"}.fa-candy-cane:before{content:\"\\f786\"}.fa-cannabis:before{content:\"\\f55f\"}.fa-capsules:before{content:\"\\f46b\"}.fa-car:before{content:\"\\f1b9\"}.fa-car-alt:before{content:\"\\f5de\"}.fa-car-battery:before{content:\"\\f5df\"}.fa-car-crash:before{content:\"\\f5e1\"}.fa-car-side:before{content:\"\\f5e4\"}.fa-caret-down:before{content:\"\\f0d7\"}.fa-caret-left:before{content:\"\\f0d9\"}.fa-caret-right:before{content:\"\\f0da\"}.fa-caret-square-down:before{content:\"\\f150\"}.fa-caret-square-left:before{content:\"\\f191\"}.fa-caret-square-right:before{content:\"\\f152\"}.fa-caret-square-up:before{content:\"\\f151\"}.fa-caret-up:before{content:\"\\f0d8\"}.fa-carrot:before{content:\"\\f787\"}.fa-cart-arrow-down:before{content:\"\\f218\"}.fa-cart-plus:before{content:\"\\f217\"}.fa-cash-register:before{content:\"\\f788\"}.fa-cat:before{content:\"\\f6be\"}.fa-cc-amazon-pay:before{content:\"\\f42d\"}.fa-cc-amex:before{content:\"\\f1f3\"}.fa-cc-apple-pay:before{content:\"\\f416\"}.fa-cc-diners-club:before{content:\"\\f24c\"}.fa-cc-discover:before{content:\"\\f1f2\"}.fa-cc-jcb:before{content:\"\\f24b\"}.fa-cc-mastercard:before{content:\"\\f1f1\"}.fa-cc-paypal:before{content:\"\\f1f4\"}.fa-cc-stripe:before{content:\"\\f1f5\"}.fa-cc-visa:before{content:\"\\f1f0\"}.fa-centercode:before{content:\"\\f380\"}.fa-centos:before{content:\"\\f789\"}.fa-certificate:before{content:\"\\f0a3\"}.fa-chair:before{content:\"\\f6c0\"}.fa-chalkboard:before{content:\"\\f51b\"}.fa-chalkboard-teacher:before{content:\"\\f51c\"}.fa-charging-station:before{content:\"\\f5e7\"}.fa-chart-area:before{content:\"\\f1fe\"}.fa-chart-bar:before{content:\"\\f080\"}.fa-chart-line:before{content:\"\\f201\"}.fa-chart-pie:before{content:\"\\f200\"}.fa-check:before{content:\"\\f00c\"}.fa-check-circle:before{content:\"\\f058\"}.fa-check-double:before{content:\"\\f560\"}.fa-check-square:before{content:\"\\f14a\"}.fa-cheese:before{content:\"\\f7ef\"}.fa-chess:before{content:\"\\f439\"}.fa-chess-bishop:before{content:\"\\f43a\"}.fa-chess-board:before{content:\"\\f43c\"}.fa-chess-king:before{content:\"\\f43f\"}.fa-chess-knight:before{content:\"\\f441\"}.fa-chess-pawn:before{content:\"\\f443\"}.fa-chess-queen:before{content:\"\\f445\"}.fa-chess-rook:before{content:\"\\f447\"}.fa-chevron-circle-down:before{content:\"\\f13a\"}.fa-chevron-circle-left:before{content:\"\\f137\"}.fa-chevron-circle-right:before{content:\"\\f138\"}.fa-chevron-circle-up:before{content:\"\\f139\"}.fa-chevron-down:before{content:\"\\f078\"}.fa-chevron-left:before{content:\"\\f053\"}.fa-chevron-right:before{content:\"\\f054\"}.fa-chevron-up:before{content:\"\\f077\"}.fa-child:before{content:\"\\f1ae\"}.fa-chrome:before{content:\"\\f268\"}.fa-chromecast:before{content:\"\\f838\"}.fa-church:before{content:\"\\f51d\"}.fa-circle:before{content:\"\\f111\"}.fa-circle-notch:before{content:\"\\f1ce\"}.fa-city:before{content:\"\\f64f\"}.fa-clinic-medical:before{content:\"\\f7f2\"}.fa-clipboard:before{content:\"\\f328\"}.fa-clipboard-check:before{content:\"\\f46c\"}.fa-clipboard-list:before{content:\"\\f46d\"}.fa-clock:before{content:\"\\f017\"}.fa-clone:before{content:\"\\f24d\"}.fa-closed-captioning:before{content:\"\\f20a\"}.fa-cloud:before{content:\"\\f0c2\"}.fa-cloud-download-alt:before{content:\"\\f381\"}.fa-cloud-meatball:before{content:\"\\f73b\"}.fa-cloud-moon:before{content:\"\\f6c3\"}.fa-cloud-moon-rain:before{content:\"\\f73c\"}.fa-cloud-rain:before{content:\"\\f73d\"}.fa-cloud-showers-heavy:before{content:\"\\f740\"}.fa-cloud-sun:before{content:\"\\f6c4\"}.fa-cloud-sun-rain:before{content:\"\\f743\"}.fa-cloud-upload-alt:before{content:\"\\f382\"}.fa-cloudscale:before{content:\"\\f383\"}.fa-cloudsmith:before{content:\"\\f384\"}.fa-cloudversify:before{content:\"\\f385\"}.fa-cocktail:before{content:\"\\f561\"}.fa-code:before{content:\"\\f121\"}.fa-code-branch:before{content:\"\\f126\"}.fa-codepen:before{content:\"\\f1cb\"}.fa-codiepie:before{content:\"\\f284\"}.fa-coffee:before{content:\"\\f0f4\"}.fa-cog:before{content:\"\\f013\"}.fa-cogs:before{content:\"\\f085\"}.fa-coins:before{content:\"\\f51e\"}.fa-columns:before{content:\"\\f0db\"}.fa-comment:before{content:\"\\f075\"}.fa-comment-alt:before{content:\"\\f27a\"}.fa-comment-dollar:before{content:\"\\f651\"}.fa-comment-dots:before{content:\"\\f4ad\"}.fa-comment-medical:before{content:\"\\f7f5\"}.fa-comment-slash:before{content:\"\\f4b3\"}.fa-comments:before{content:\"\\f086\"}.fa-comments-dollar:before{content:\"\\f653\"}.fa-compact-disc:before{content:\"\\f51f\"}.fa-compass:before{content:\"\\f14e\"}.fa-compress:before{content:\"\\f066\"}.fa-compress-arrows-alt:before{content:\"\\f78c\"}.fa-concierge-bell:before{content:\"\\f562\"}.fa-confluence:before{content:\"\\f78d\"}.fa-connectdevelop:before{content:\"\\f20e\"}.fa-contao:before{content:\"\\f26d\"}.fa-cookie:before{content:\"\\f563\"}.fa-cookie-bite:before{content:\"\\f564\"}.fa-copy:before{content:\"\\f0c5\"}.fa-copyright:before{content:\"\\f1f9\"}.fa-couch:before{content:\"\\f4b8\"}.fa-cpanel:before{content:\"\\f388\"}.fa-creative-commons:before{content:\"\\f25e\"}.fa-creative-commons-by:before{content:\"\\f4e7\"}.fa-creative-commons-nc:before{content:\"\\f4e8\"}.fa-creative-commons-nc-eu:before{content:\"\\f4e9\"}.fa-creative-commons-nc-jp:before{content:\"\\f4ea\"}.fa-creative-commons-nd:before{content:\"\\f4eb\"}.fa-creative-commons-pd:before{content:\"\\f4ec\"}.fa-creative-commons-pd-alt:before{content:\"\\f4ed\"}.fa-creative-commons-remix:before{content:\"\\f4ee\"}.fa-creative-commons-sa:before{content:\"\\f4ef\"}.fa-creative-commons-sampling:before{content:\"\\f4f0\"}.fa-creative-commons-sampling-plus:before{content:\"\\f4f1\"}.fa-creative-commons-share:before{content:\"\\f4f2\"}.fa-creative-commons-zero:before{content:\"\\f4f3\"}.fa-credit-card:before{content:\"\\f09d\"}.fa-critical-role:before{content:\"\\f6c9\"}.fa-crop:before{content:\"\\f125\"}.fa-crop-alt:before{content:\"\\f565\"}.fa-cross:before{content:\"\\f654\"}.fa-crosshairs:before{content:\"\\f05b\"}.fa-crow:before{content:\"\\f520\"}.fa-crown:before{content:\"\\f521\"}.fa-crutch:before{content:\"\\f7f7\"}.fa-css3:before{content:\"\\f13c\"}.fa-css3-alt:before{content:\"\\f38b\"}.fa-cube:before{content:\"\\f1b2\"}.fa-cubes:before{content:\"\\f1b3\"}.fa-cut:before{content:\"\\f0c4\"}.fa-cuttlefish:before{content:\"\\f38c\"}.fa-d-and-d:before{content:\"\\f38d\"}.fa-d-and-d-beyond:before{content:\"\\f6ca\"}.fa-dashcube:before{content:\"\\f210\"}.fa-database:before{content:\"\\f1c0\"}.fa-deaf:before{content:\"\\f2a4\"}.fa-delicious:before{content:\"\\f1a5\"}.fa-democrat:before{content:\"\\f747\"}.fa-deploydog:before{content:\"\\f38e\"}.fa-deskpro:before{content:\"\\f38f\"}.fa-desktop:before{content:\"\\f108\"}.fa-dev:before{content:\"\\f6cc\"}.fa-deviantart:before{content:\"\\f1bd\"}.fa-dharmachakra:before{content:\"\\f655\"}.fa-dhl:before{content:\"\\f790\"}.fa-diagnoses:before{content:\"\\f470\"}.fa-diaspora:before{content:\"\\f791\"}.fa-dice:before{content:\"\\f522\"}.fa-dice-d20:before{content:\"\\f6cf\"}.fa-dice-d6:before{content:\"\\f6d1\"}.fa-dice-five:before{content:\"\\f523\"}.fa-dice-four:before{content:\"\\f524\"}.fa-dice-one:before{content:\"\\f525\"}.fa-dice-six:before{content:\"\\f526\"}.fa-dice-three:before{content:\"\\f527\"}.fa-dice-two:before{content:\"\\f528\"}.fa-digg:before{content:\"\\f1a6\"}.fa-digital-ocean:before{content:\"\\f391\"}.fa-digital-tachograph:before{content:\"\\f566\"}.fa-directions:before{content:\"\\f5eb\"}.fa-discord:before{content:\"\\f392\"}.fa-discourse:before{content:\"\\f393\"}.fa-divide:before{content:\"\\f529\"}.fa-dizzy:before{content:\"\\f567\"}.fa-dna:before{content:\"\\f471\"}.fa-dochub:before{content:\"\\f394\"}.fa-docker:before{content:\"\\f395\"}.fa-dog:before{content:\"\\f6d3\"}.fa-dollar-sign:before{content:\"\\f155\"}.fa-dolly:before{content:\"\\f472\"}.fa-dolly-flatbed:before{content:\"\\f474\"}.fa-donate:before{content:\"\\f4b9\"}.fa-door-closed:before{content:\"\\f52a\"}.fa-door-open:before{content:\"\\f52b\"}.fa-dot-circle:before{content:\"\\f192\"}.fa-dove:before{content:\"\\f4ba\"}.fa-download:before{content:\"\\f019\"}.fa-draft2digital:before{content:\"\\f396\"}.fa-drafting-compass:before{content:\"\\f568\"}.fa-dragon:before{content:\"\\f6d5\"}.fa-draw-polygon:before{content:\"\\f5ee\"}.fa-dribbble:before{content:\"\\f17d\"}.fa-dribbble-square:before{content:\"\\f397\"}.fa-dropbox:before{content:\"\\f16b\"}.fa-drum:before{content:\"\\f569\"}.fa-drum-steelpan:before{content:\"\\f56a\"}.fa-drumstick-bite:before{content:\"\\f6d7\"}.fa-drupal:before{content:\"\\f1a9\"}.fa-dumbbell:before{content:\"\\f44b\"}.fa-dumpster:before{content:\"\\f793\"}.fa-dumpster-fire:before{content:\"\\f794\"}.fa-dungeon:before{content:\"\\f6d9\"}.fa-dyalog:before{content:\"\\f399\"}.fa-earlybirds:before{content:\"\\f39a\"}.fa-ebay:before{content:\"\\f4f4\"}.fa-edge:before{content:\"\\f282\"}.fa-edit:before{content:\"\\f044\"}.fa-egg:before{content:\"\\f7fb\"}.fa-eject:before{content:\"\\f052\"}.fa-elementor:before{content:\"\\f430\"}.fa-ellipsis-h:before{content:\"\\f141\"}.fa-ellipsis-v:before{content:\"\\f142\"}.fa-ello:before{content:\"\\f5f1\"}.fa-ember:before{content:\"\\f423\"}.fa-empire:before{content:\"\\f1d1\"}.fa-envelope:before{content:\"\\f0e0\"}.fa-envelope-open:before{content:\"\\f2b6\"}.fa-envelope-open-text:before{content:\"\\f658\"}.fa-envelope-square:before{content:\"\\f199\"}.fa-envira:before{content:\"\\f299\"}.fa-equals:before{content:\"\\f52c\"}.fa-eraser:before{content:\"\\f12d\"}.fa-erlang:before{content:\"\\f39d\"}.fa-ethereum:before{content:\"\\f42e\"}.fa-ethernet:before{content:\"\\f796\"}.fa-etsy:before{content:\"\\f2d7\"}.fa-euro-sign:before{content:\"\\f153\"}.fa-evernote:before{content:\"\\f839\"}.fa-exchange-alt:before{content:\"\\f362\"}.fa-exclamation:before{content:\"\\f12a\"}.fa-exclamation-circle:before{content:\"\\f06a\"}.fa-exclamation-triangle:before{content:\"\\f071\"}.fa-expand:before{content:\"\\f065\"}.fa-expand-arrows-alt:before{content:\"\\f31e\"}.fa-expeditedssl:before{content:\"\\f23e\"}.fa-external-link-alt:before{content:\"\\f35d\"}.fa-external-link-square-alt:before{content:\"\\f360\"}.fa-eye:before{content:\"\\f06e\"}.fa-eye-dropper:before{content:\"\\f1fb\"}.fa-eye-slash:before{content:\"\\f070\"}.fa-facebook:before{content:\"\\f09a\"}.fa-facebook-f:before{content:\"\\f39e\"}.fa-facebook-messenger:before{content:\"\\f39f\"}.fa-facebook-square:before{content:\"\\f082\"}.fa-fan:before{content:\"\\f863\"}.fa-fantasy-flight-games:before{content:\"\\f6dc\"}.fa-fast-backward:before{content:\"\\f049\"}.fa-fast-forward:before{content:\"\\f050\"}.fa-fax:before{content:\"\\f1ac\"}.fa-feather:before{content:\"\\f52d\"}.fa-feather-alt:before{content:\"\\f56b\"}.fa-fedex:before{content:\"\\f797\"}.fa-fedora:before{content:\"\\f798\"}.fa-female:before{content:\"\\f182\"}.fa-fighter-jet:before{content:\"\\f0fb\"}.fa-figma:before{content:\"\\f799\"}.fa-file:before{content:\"\\f15b\"}.fa-file-alt:before{content:\"\\f15c\"}.fa-file-archive:before{content:\"\\f1c6\"}.fa-file-audio:before{content:\"\\f1c7\"}.fa-file-code:before{content:\"\\f1c9\"}.fa-file-contract:before{content:\"\\f56c\"}.fa-file-csv:before{content:\"\\f6dd\"}.fa-file-download:before{content:\"\\f56d\"}.fa-file-excel:before{content:\"\\f1c3\"}.fa-file-export:before{content:\"\\f56e\"}.fa-file-image:before{content:\"\\f1c5\"}.fa-file-import:before{content:\"\\f56f\"}.fa-file-invoice:before{content:\"\\f570\"}.fa-file-invoice-dollar:before{content:\"\\f571\"}.fa-file-medical:before{content:\"\\f477\"}.fa-file-medical-alt:before{content:\"\\f478\"}.fa-file-pdf:before{content:\"\\f1c1\"}.fa-file-powerpoint:before{content:\"\\f1c4\"}.fa-file-prescription:before{content:\"\\f572\"}.fa-file-signature:before{content:\"\\f573\"}.fa-file-upload:before{content:\"\\f574\"}.fa-file-video:before{content:\"\\f1c8\"}.fa-file-word:before{content:\"\\f1c2\"}.fa-fill:before{content:\"\\f575\"}.fa-fill-drip:before{content:\"\\f576\"}.fa-film:before{content:\"\\f008\"}.fa-filter:before{content:\"\\f0b0\"}.fa-fingerprint:before{content:\"\\f577\"}.fa-fire:before{content:\"\\f06d\"}.fa-fire-alt:before{content:\"\\f7e4\"}.fa-fire-extinguisher:before{content:\"\\f134\"}.fa-firefox:before{content:\"\\f269\"}.fa-first-aid:before{content:\"\\f479\"}.fa-first-order:before{content:\"\\f2b0\"}.fa-first-order-alt:before{content:\"\\f50a\"}.fa-firstdraft:before{content:\"\\f3a1\"}.fa-fish:before{content:\"\\f578\"}.fa-fist-raised:before{content:\"\\f6de\"}.fa-flag:before{content:\"\\f024\"}.fa-flag-checkered:before{content:\"\\f11e\"}.fa-flag-usa:before{content:\"\\f74d\"}.fa-flask:before{content:\"\\f0c3\"}.fa-flickr:before{content:\"\\f16e\"}.fa-flipboard:before{content:\"\\f44d\"}.fa-flushed:before{content:\"\\f579\"}.fa-fly:before{content:\"\\f417\"}.fa-folder:before{content:\"\\f07b\"}.fa-folder-minus:before{content:\"\\f65d\"}.fa-folder-open:before{content:\"\\f07c\"}.fa-folder-plus:before{content:\"\\f65e\"}.fa-font:before{content:\"\\f031\"}.fa-font-awesome:before{content:\"\\f2b4\"}.fa-font-awesome-alt:before{content:\"\\f35c\"}.fa-font-awesome-flag:before{content:\"\\f425\"}.fa-font-awesome-logo-full:before{content:\"\\f4e6\"}.fa-fonticons:before{content:\"\\f280\"}.fa-fonticons-fi:before{content:\"\\f3a2\"}.fa-football-ball:before{content:\"\\f44e\"}.fa-fort-awesome:before{content:\"\\f286\"}.fa-fort-awesome-alt:before{content:\"\\f3a3\"}.fa-forumbee:before{content:\"\\f211\"}.fa-forward:before{content:\"\\f04e\"}.fa-foursquare:before{content:\"\\f180\"}.fa-free-code-camp:before{content:\"\\f2c5\"}.fa-freebsd:before{content:\"\\f3a4\"}.fa-frog:before{content:\"\\f52e\"}.fa-frown:before{content:\"\\f119\"}.fa-frown-open:before{content:\"\\f57a\"}.fa-fulcrum:before{content:\"\\f50b\"}.fa-funnel-dollar:before{content:\"\\f662\"}.fa-futbol:before{content:\"\\f1e3\"}.fa-galactic-republic:before{content:\"\\f50c\"}.fa-galactic-senate:before{content:\"\\f50d\"}.fa-gamepad:before{content:\"\\f11b\"}.fa-gas-pump:before{content:\"\\f52f\"}.fa-gavel:before{content:\"\\f0e3\"}.fa-gem:before{content:\"\\f3a5\"}.fa-genderless:before{content:\"\\f22d\"}.fa-get-pocket:before{content:\"\\f265\"}.fa-gg:before{content:\"\\f260\"}.fa-gg-circle:before{content:\"\\f261\"}.fa-ghost:before{content:\"\\f6e2\"}.fa-gift:before{content:\"\\f06b\"}.fa-gifts:before{content:\"\\f79c\"}.fa-git:before{content:\"\\f1d3\"}.fa-git-alt:before{content:\"\\f841\"}.fa-git-square:before{content:\"\\f1d2\"}.fa-github:before{content:\"\\f09b\"}.fa-github-alt:before{content:\"\\f113\"}.fa-github-square:before{content:\"\\f092\"}.fa-gitkraken:before{content:\"\\f3a6\"}.fa-gitlab:before{content:\"\\f296\"}.fa-gitter:before{content:\"\\f426\"}.fa-glass-cheers:before{content:\"\\f79f\"}.fa-glass-martini:before{content:\"\\f000\"}.fa-glass-martini-alt:before{content:\"\\f57b\"}.fa-glass-whiskey:before{content:\"\\f7a0\"}.fa-glasses:before{content:\"\\f530\"}.fa-glide:before{content:\"\\f2a5\"}.fa-glide-g:before{content:\"\\f2a6\"}.fa-globe:before{content:\"\\f0ac\"}.fa-globe-africa:before{content:\"\\f57c\"}.fa-globe-americas:before{content:\"\\f57d\"}.fa-globe-asia:before{content:\"\\f57e\"}.fa-globe-europe:before{content:\"\\f7a2\"}.fa-gofore:before{content:\"\\f3a7\"}.fa-golf-ball:before{content:\"\\f450\"}.fa-goodreads:before{content:\"\\f3a8\"}.fa-goodreads-g:before{content:\"\\f3a9\"}.fa-google:before{content:\"\\f1a0\"}.fa-google-drive:before{content:\"\\f3aa\"}.fa-google-play:before{content:\"\\f3ab\"}.fa-google-plus:before{content:\"\\f2b3\"}.fa-google-plus-g:before{content:\"\\f0d5\"}.fa-google-plus-square:before{content:\"\\f0d4\"}.fa-google-wallet:before{content:\"\\f1ee\"}.fa-gopuram:before{content:\"\\f664\"}.fa-graduation-cap:before{content:\"\\f19d\"}.fa-gratipay:before{content:\"\\f184\"}.fa-grav:before{content:\"\\f2d6\"}.fa-greater-than:before{content:\"\\f531\"}.fa-greater-than-equal:before{content:\"\\f532\"}.fa-grimace:before{content:\"\\f57f\"}.fa-grin:before{content:\"\\f580\"}.fa-grin-alt:before{content:\"\\f581\"}.fa-grin-beam:before{content:\"\\f582\"}.fa-grin-beam-sweat:before{content:\"\\f583\"}.fa-grin-hearts:before{content:\"\\f584\"}.fa-grin-squint:before{content:\"\\f585\"}.fa-grin-squint-tears:before{content:\"\\f586\"}.fa-grin-stars:before{content:\"\\f587\"}.fa-grin-tears:before{content:\"\\f588\"}.fa-grin-tongue:before{content:\"\\f589\"}.fa-grin-tongue-squint:before{content:\"\\f58a\"}.fa-grin-tongue-wink:before{content:\"\\f58b\"}.fa-grin-wink:before{content:\"\\f58c\"}.fa-grip-horizontal:before{content:\"\\f58d\"}.fa-grip-lines:before{content:\"\\f7a4\"}.fa-grip-lines-vertical:before{content:\"\\f7a5\"}.fa-grip-vertical:before{content:\"\\f58e\"}.fa-gripfire:before{content:\"\\f3ac\"}.fa-grunt:before{content:\"\\f3ad\"}.fa-guitar:before{content:\"\\f7a6\"}.fa-gulp:before{content:\"\\f3ae\"}.fa-h-square:before{content:\"\\f0fd\"}.fa-hacker-news:before{content:\"\\f1d4\"}.fa-hacker-news-square:before{content:\"\\f3af\"}.fa-hackerrank:before{content:\"\\f5f7\"}.fa-hamburger:before{content:\"\\f805\"}.fa-hammer:before{content:\"\\f6e3\"}.fa-hamsa:before{content:\"\\f665\"}.fa-hand-holding:before{content:\"\\f4bd\"}.fa-hand-holding-heart:before{content:\"\\f4be\"}.fa-hand-holding-usd:before{content:\"\\f4c0\"}.fa-hand-lizard:before{content:\"\\f258\"}.fa-hand-middle-finger:before{content:\"\\f806\"}.fa-hand-paper:before{content:\"\\f256\"}.fa-hand-peace:before{content:\"\\f25b\"}.fa-hand-point-down:before{content:\"\\f0a7\"}.fa-hand-point-left:before{content:\"\\f0a5\"}.fa-hand-point-right:before{content:\"\\f0a4\"}.fa-hand-point-up:before{content:\"\\f0a6\"}.fa-hand-pointer:before{content:\"\\f25a\"}.fa-hand-rock:before{content:\"\\f255\"}.fa-hand-scissors:before{content:\"\\f257\"}.fa-hand-spock:before{content:\"\\f259\"}.fa-hands:before{content:\"\\f4c2\"}.fa-hands-helping:before{content:\"\\f4c4\"}.fa-handshake:before{content:\"\\f2b5\"}.fa-hanukiah:before{content:\"\\f6e6\"}.fa-hard-hat:before{content:\"\\f807\"}.fa-hashtag:before{content:\"\\f292\"}.fa-hat-wizard:before{content:\"\\f6e8\"}.fa-haykal:before{content:\"\\f666\"}.fa-hdd:before{content:\"\\f0a0\"}.fa-heading:before{content:\"\\f1dc\"}.fa-headphones:before{content:\"\\f025\"}.fa-headphones-alt:before{content:\"\\f58f\"}.fa-headset:before{content:\"\\f590\"}.fa-heart:before{content:\"\\f004\"}.fa-heart-broken:before{content:\"\\f7a9\"}.fa-heartbeat:before{content:\"\\f21e\"}.fa-helicopter:before{content:\"\\f533\"}.fa-highlighter:before{content:\"\\f591\"}.fa-hiking:before{content:\"\\f6ec\"}.fa-hippo:before{content:\"\\f6ed\"}.fa-hips:before{content:\"\\f452\"}.fa-hire-a-helper:before{content:\"\\f3b0\"}.fa-history:before{content:\"\\f1da\"}.fa-hockey-puck:before{content:\"\\f453\"}.fa-holly-berry:before{content:\"\\f7aa\"}.fa-home:before{content:\"\\f015\"}.fa-hooli:before{content:\"\\f427\"}.fa-hornbill:before{content:\"\\f592\"}.fa-horse:before{content:\"\\f6f0\"}.fa-horse-head:before{content:\"\\f7ab\"}.fa-hospital:before{content:\"\\f0f8\"}.fa-hospital-alt:before{content:\"\\f47d\"}.fa-hospital-symbol:before{content:\"\\f47e\"}.fa-hot-tub:before{content:\"\\f593\"}.fa-hotdog:before{content:\"\\f80f\"}.fa-hotel:before{content:\"\\f594\"}.fa-hotjar:before{content:\"\\f3b1\"}.fa-hourglass:before{content:\"\\f254\"}.fa-hourglass-end:before{content:\"\\f253\"}.fa-hourglass-half:before{content:\"\\f252\"}.fa-hourglass-start:before{content:\"\\f251\"}.fa-house-damage:before{content:\"\\f6f1\"}.fa-houzz:before{content:\"\\f27c\"}.fa-hryvnia:before{content:\"\\f6f2\"}.fa-html5:before{content:\"\\f13b\"}.fa-hubspot:before{content:\"\\f3b2\"}.fa-i-cursor:before{content:\"\\f246\"}.fa-ice-cream:before{content:\"\\f810\"}.fa-icicles:before{content:\"\\f7ad\"}.fa-icons:before{content:\"\\f86d\"}.fa-id-badge:before{content:\"\\f2c1\"}.fa-id-card:before{content:\"\\f2c2\"}.fa-id-card-alt:before{content:\"\\f47f\"}.fa-igloo:before{content:\"\\f7ae\"}.fa-image:before{content:\"\\f03e\"}.fa-images:before{content:\"\\f302\"}.fa-imdb:before{content:\"\\f2d8\"}.fa-inbox:before{content:\"\\f01c\"}.fa-indent:before{content:\"\\f03c\"}.fa-industry:before{content:\"\\f275\"}.fa-infinity:before{content:\"\\f534\"}.fa-info:before{content:\"\\f129\"}.fa-info-circle:before{content:\"\\f05a\"}.fa-instagram:before{content:\"\\f16d\"}.fa-intercom:before{content:\"\\f7af\"}.fa-internet-explorer:before{content:\"\\f26b\"}.fa-invision:before{content:\"\\f7b0\"}.fa-ioxhost:before{content:\"\\f208\"}.fa-italic:before{content:\"\\f033\"}.fa-itch-io:before{content:\"\\f83a\"}.fa-itunes:before{content:\"\\f3b4\"}.fa-itunes-note:before{content:\"\\f3b5\"}.fa-java:before{content:\"\\f4e4\"}.fa-jedi:before{content:\"\\f669\"}.fa-jedi-order:before{content:\"\\f50e\"}.fa-jenkins:before{content:\"\\f3b6\"}.fa-jira:before{content:\"\\f7b1\"}.fa-joget:before{content:\"\\f3b7\"}.fa-joint:before{content:\"\\f595\"}.fa-joomla:before{content:\"\\f1aa\"}.fa-journal-whills:before{content:\"\\f66a\"}.fa-js:before{content:\"\\f3b8\"}.fa-js-square:before{content:\"\\f3b9\"}.fa-jsfiddle:before{content:\"\\f1cc\"}.fa-kaaba:before{content:\"\\f66b\"}.fa-kaggle:before{content:\"\\f5fa\"}.fa-key:before{content:\"\\f084\"}.fa-keybase:before{content:\"\\f4f5\"}.fa-keyboard:before{content:\"\\f11c\"}.fa-keycdn:before{content:\"\\f3ba\"}.fa-khanda:before{content:\"\\f66d\"}.fa-kickstarter:before{content:\"\\f3bb\"}.fa-kickstarter-k:before{content:\"\\f3bc\"}.fa-kiss:before{content:\"\\f596\"}.fa-kiss-beam:before{content:\"\\f597\"}.fa-kiss-wink-heart:before{content:\"\\f598\"}.fa-kiwi-bird:before{content:\"\\f535\"}.fa-korvue:before{content:\"\\f42f\"}.fa-landmark:before{content:\"\\f66f\"}.fa-language:before{content:\"\\f1ab\"}.fa-laptop:before{content:\"\\f109\"}.fa-laptop-code:before{content:\"\\f5fc\"}.fa-laptop-medical:before{content:\"\\f812\"}.fa-laravel:before{content:\"\\f3bd\"}.fa-lastfm:before{content:\"\\f202\"}.fa-lastfm-square:before{content:\"\\f203\"}.fa-laugh:before{content:\"\\f599\"}.fa-laugh-beam:before{content:\"\\f59a\"}.fa-laugh-squint:before{content:\"\\f59b\"}.fa-laugh-wink:before{content:\"\\f59c\"}.fa-layer-group:before{content:\"\\f5fd\"}.fa-leaf:before{content:\"\\f06c\"}.fa-leanpub:before{content:\"\\f212\"}.fa-lemon:before{content:\"\\f094\"}.fa-less:before{content:\"\\f41d\"}.fa-less-than:before{content:\"\\f536\"}.fa-less-than-equal:before{content:\"\\f537\"}.fa-level-down-alt:before{content:\"\\f3be\"}.fa-level-up-alt:before{content:\"\\f3bf\"}.fa-life-ring:before{content:\"\\f1cd\"}.fa-lightbulb:before{content:\"\\f0eb\"}.fa-line:before{content:\"\\f3c0\"}.fa-link:before{content:\"\\f0c1\"}.fa-linkedin:before{content:\"\\f08c\"}.fa-linkedin-in:before{content:\"\\f0e1\"}.fa-linode:before{content:\"\\f2b8\"}.fa-linux:before{content:\"\\f17c\"}.fa-lira-sign:before{content:\"\\f195\"}.fa-list:before{content:\"\\f03a\"}.fa-list-alt:before{content:\"\\f022\"}.fa-list-ol:before{content:\"\\f0cb\"}.fa-list-ul:before{content:\"\\f0ca\"}.fa-location-arrow:before{content:\"\\f124\"}.fa-lock:before{content:\"\\f023\"}.fa-lock-open:before{content:\"\\f3c1\"}.fa-long-arrow-alt-down:before{content:\"\\f309\"}.fa-long-arrow-alt-left:before{content:\"\\f30a\"}.fa-long-arrow-alt-right:before{content:\"\\f30b\"}.fa-long-arrow-alt-up:before{content:\"\\f30c\"}.fa-low-vision:before{content:\"\\f2a8\"}.fa-luggage-cart:before{content:\"\\f59d\"}.fa-lyft:before{content:\"\\f3c3\"}.fa-magento:before{content:\"\\f3c4\"}.fa-magic:before{content:\"\\f0d0\"}.fa-magnet:before{content:\"\\f076\"}.fa-mail-bulk:before{content:\"\\f674\"}.fa-mailchimp:before{content:\"\\f59e\"}.fa-male:before{content:\"\\f183\"}.fa-mandalorian:before{content:\"\\f50f\"}.fa-map:before{content:\"\\f279\"}.fa-map-marked:before{content:\"\\f59f\"}.fa-map-marked-alt:before{content:\"\\f5a0\"}.fa-map-marker:before{content:\"\\f041\"}.fa-map-marker-alt:before{content:\"\\f3c5\"}.fa-map-pin:before{content:\"\\f276\"}.fa-map-signs:before{content:\"\\f277\"}.fa-markdown:before{content:\"\\f60f\"}.fa-marker:before{content:\"\\f5a1\"}.fa-mars:before{content:\"\\f222\"}.fa-mars-double:before{content:\"\\f227\"}.fa-mars-stroke:before{content:\"\\f229\"}.fa-mars-stroke-h:before{content:\"\\f22b\"}.fa-mars-stroke-v:before{content:\"\\f22a\"}.fa-mask:before{content:\"\\f6fa\"}.fa-mastodon:before{content:\"\\f4f6\"}.fa-maxcdn:before{content:\"\\f136\"}.fa-medal:before{content:\"\\f5a2\"}.fa-medapps:before{content:\"\\f3c6\"}.fa-medium:before{content:\"\\f23a\"}.fa-medium-m:before{content:\"\\f3c7\"}.fa-medkit:before{content:\"\\f0fa\"}.fa-medrt:before{content:\"\\f3c8\"}.fa-meetup:before{content:\"\\f2e0\"}.fa-megaport:before{content:\"\\f5a3\"}.fa-meh:before{content:\"\\f11a\"}.fa-meh-blank:before{content:\"\\f5a4\"}.fa-meh-rolling-eyes:before{content:\"\\f5a5\"}.fa-memory:before{content:\"\\f538\"}.fa-mendeley:before{content:\"\\f7b3\"}.fa-menorah:before{content:\"\\f676\"}.fa-mercury:before{content:\"\\f223\"}.fa-meteor:before{content:\"\\f753\"}.fa-microchip:before{content:\"\\f2db\"}.fa-microphone:before{content:\"\\f130\"}.fa-microphone-alt:before{content:\"\\f3c9\"}.fa-microphone-alt-slash:before{content:\"\\f539\"}.fa-microphone-slash:before{content:\"\\f131\"}.fa-microscope:before{content:\"\\f610\"}.fa-microsoft:before{content:\"\\f3ca\"}.fa-minus:before{content:\"\\f068\"}.fa-minus-circle:before{content:\"\\f056\"}.fa-minus-square:before{content:\"\\f146\"}.fa-mitten:before{content:\"\\f7b5\"}.fa-mix:before{content:\"\\f3cb\"}.fa-mixcloud:before{content:\"\\f289\"}.fa-mizuni:before{content:\"\\f3cc\"}.fa-mobile:before{content:\"\\f10b\"}.fa-mobile-alt:before{content:\"\\f3cd\"}.fa-modx:before{content:\"\\f285\"}.fa-monero:before{content:\"\\f3d0\"}.fa-money-bill:before{content:\"\\f0d6\"}.fa-money-bill-alt:before{content:\"\\f3d1\"}.fa-money-bill-wave:before{content:\"\\f53a\"}.fa-money-bill-wave-alt:before{content:\"\\f53b\"}.fa-money-check:before{content:\"\\f53c\"}.fa-money-check-alt:before{content:\"\\f53d\"}.fa-monument:before{content:\"\\f5a6\"}.fa-moon:before{content:\"\\f186\"}.fa-mortar-pestle:before{content:\"\\f5a7\"}.fa-mosque:before{content:\"\\f678\"}.fa-motorcycle:before{content:\"\\f21c\"}.fa-mountain:before{content:\"\\f6fc\"}.fa-mouse-pointer:before{content:\"\\f245\"}.fa-mug-hot:before{content:\"\\f7b6\"}.fa-music:before{content:\"\\f001\"}.fa-napster:before{content:\"\\f3d2\"}.fa-neos:before{content:\"\\f612\"}.fa-network-wired:before{content:\"\\f6ff\"}.fa-neuter:before{content:\"\\f22c\"}.fa-newspaper:before{content:\"\\f1ea\"}.fa-nimblr:before{content:\"\\f5a8\"}.fa-node:before{content:\"\\f419\"}.fa-node-js:before{content:\"\\f3d3\"}.fa-not-equal:before{content:\"\\f53e\"}.fa-notes-medical:before{content:\"\\f481\"}.fa-npm:before{content:\"\\f3d4\"}.fa-ns8:before{content:\"\\f3d5\"}.fa-nutritionix:before{content:\"\\f3d6\"}.fa-object-group:before{content:\"\\f247\"}.fa-object-ungroup:before{content:\"\\f248\"}.fa-odnoklassniki:before{content:\"\\f263\"}.fa-odnoklassniki-square:before{content:\"\\f264\"}.fa-oil-can:before{content:\"\\f613\"}.fa-old-republic:before{content:\"\\f510\"}.fa-om:before{content:\"\\f679\"}.fa-opencart:before{content:\"\\f23d\"}.fa-openid:before{content:\"\\f19b\"}.fa-opera:before{content:\"\\f26a\"}.fa-optin-monster:before{content:\"\\f23c\"}.fa-osi:before{content:\"\\f41a\"}.fa-otter:before{content:\"\\f700\"}.fa-outdent:before{content:\"\\f03b\"}.fa-page4:before{content:\"\\f3d7\"}.fa-pagelines:before{content:\"\\f18c\"}.fa-pager:before{content:\"\\f815\"}.fa-paint-brush:before{content:\"\\f1fc\"}.fa-paint-roller:before{content:\"\\f5aa\"}.fa-palette:before{content:\"\\f53f\"}.fa-palfed:before{content:\"\\f3d8\"}.fa-pallet:before{content:\"\\f482\"}.fa-paper-plane:before{content:\"\\f1d8\"}.fa-paperclip:before{content:\"\\f0c6\"}.fa-parachute-box:before{content:\"\\f4cd\"}.fa-paragraph:before{content:\"\\f1dd\"}.fa-parking:before{content:\"\\f540\"}.fa-passport:before{content:\"\\f5ab\"}.fa-pastafarianism:before{content:\"\\f67b\"}.fa-paste:before{content:\"\\f0ea\"}.fa-patreon:before{content:\"\\f3d9\"}.fa-pause:before{content:\"\\f04c\"}.fa-pause-circle:before{content:\"\\f28b\"}.fa-paw:before{content:\"\\f1b0\"}.fa-paypal:before{content:\"\\f1ed\"}.fa-peace:before{content:\"\\f67c\"}.fa-pen:before{content:\"\\f304\"}.fa-pen-alt:before{content:\"\\f305\"}.fa-pen-fancy:before{content:\"\\f5ac\"}.fa-pen-nib:before{content:\"\\f5ad\"}.fa-pen-square:before{content:\"\\f14b\"}.fa-pencil-alt:before{content:\"\\f303\"}.fa-pencil-ruler:before{content:\"\\f5ae\"}.fa-penny-arcade:before{content:\"\\f704\"}.fa-people-carry:before{content:\"\\f4ce\"}.fa-pepper-hot:before{content:\"\\f816\"}.fa-percent:before{content:\"\\f295\"}.fa-percentage:before{content:\"\\f541\"}.fa-periscope:before{content:\"\\f3da\"}.fa-person-booth:before{content:\"\\f756\"}.fa-phabricator:before{content:\"\\f3db\"}.fa-phoenix-framework:before{content:\"\\f3dc\"}.fa-phoenix-squadron:before{content:\"\\f511\"}.fa-phone:before{content:\"\\f095\"}.fa-phone-alt:before{content:\"\\f879\"}.fa-phone-slash:before{content:\"\\f3dd\"}.fa-phone-square:before{content:\"\\f098\"}.fa-phone-square-alt:before{content:\"\\f87b\"}.fa-phone-volume:before{content:\"\\f2a0\"}.fa-photo-video:before{content:\"\\f87c\"}.fa-php:before{content:\"\\f457\"}.fa-pied-piper:before{content:\"\\f2ae\"}.fa-pied-piper-alt:before{content:\"\\f1a8\"}.fa-pied-piper-hat:before{content:\"\\f4e5\"}.fa-pied-piper-pp:before{content:\"\\f1a7\"}.fa-piggy-bank:before{content:\"\\f4d3\"}.fa-pills:before{content:\"\\f484\"}.fa-pinterest:before{content:\"\\f0d2\"}.fa-pinterest-p:before{content:\"\\f231\"}.fa-pinterest-square:before{content:\"\\f0d3\"}.fa-pizza-slice:before{content:\"\\f818\"}.fa-place-of-worship:before{content:\"\\f67f\"}.fa-plane:before{content:\"\\f072\"}.fa-plane-arrival:before{content:\"\\f5af\"}.fa-plane-departure:before{content:\"\\f5b0\"}.fa-play:before{content:\"\\f04b\"}.fa-play-circle:before{content:\"\\f144\"}.fa-playstation:before{content:\"\\f3df\"}.fa-plug:before{content:\"\\f1e6\"}.fa-plus:before{content:\"\\f067\"}.fa-plus-circle:before{content:\"\\f055\"}.fa-plus-square:before{content:\"\\f0fe\"}.fa-podcast:before{content:\"\\f2ce\"}.fa-poll:before{content:\"\\f681\"}.fa-poll-h:before{content:\"\\f682\"}.fa-poo:before{content:\"\\f2fe\"}.fa-poo-storm:before{content:\"\\f75a\"}.fa-poop:before{content:\"\\f619\"}.fa-portrait:before{content:\"\\f3e0\"}.fa-pound-sign:before{content:\"\\f154\"}.fa-power-off:before{content:\"\\f011\"}.fa-pray:before{content:\"\\f683\"}.fa-praying-hands:before{content:\"\\f684\"}.fa-prescription:before{content:\"\\f5b1\"}.fa-prescription-bottle:before{content:\"\\f485\"}.fa-prescription-bottle-alt:before{content:\"\\f486\"}.fa-print:before{content:\"\\f02f\"}.fa-procedures:before{content:\"\\f487\"}.fa-product-hunt:before{content:\"\\f288\"}.fa-project-diagram:before{content:\"\\f542\"}.fa-pushed:before{content:\"\\f3e1\"}.fa-puzzle-piece:before{content:\"\\f12e\"}.fa-python:before{content:\"\\f3e2\"}.fa-qq:before{content:\"\\f1d6\"}.fa-qrcode:before{content:\"\\f029\"}.fa-question:before{content:\"\\f128\"}.fa-question-circle:before{content:\"\\f059\"}.fa-quidditch:before{content:\"\\f458\"}.fa-quinscape:before{content:\"\\f459\"}.fa-quora:before{content:\"\\f2c4\"}.fa-quote-left:before{content:\"\\f10d\"}.fa-quote-right:before{content:\"\\f10e\"}.fa-quran:before{content:\"\\f687\"}.fa-r-project:before{content:\"\\f4f7\"}.fa-radiation:before{content:\"\\f7b9\"}.fa-radiation-alt:before{content:\"\\f7ba\"}.fa-rainbow:before{content:\"\\f75b\"}.fa-random:before{content:\"\\f074\"}.fa-raspberry-pi:before{content:\"\\f7bb\"}.fa-ravelry:before{content:\"\\f2d9\"}.fa-react:before{content:\"\\f41b\"}.fa-reacteurope:before{content:\"\\f75d\"}.fa-readme:before{content:\"\\f4d5\"}.fa-rebel:before{content:\"\\f1d0\"}.fa-receipt:before{content:\"\\f543\"}.fa-recycle:before{content:\"\\f1b8\"}.fa-red-river:before{content:\"\\f3e3\"}.fa-reddit:before{content:\"\\f1a1\"}.fa-reddit-alien:before{content:\"\\f281\"}.fa-reddit-square:before{content:\"\\f1a2\"}.fa-redhat:before{content:\"\\f7bc\"}.fa-redo:before{content:\"\\f01e\"}.fa-redo-alt:before{content:\"\\f2f9\"}.fa-registered:before{content:\"\\f25d\"}.fa-remove-format:before{content:\"\\f87d\"}.fa-renren:before{content:\"\\f18b\"}.fa-reply:before{content:\"\\f3e5\"}.fa-reply-all:before{content:\"\\f122\"}.fa-replyd:before{content:\"\\f3e6\"}.fa-republican:before{content:\"\\f75e\"}.fa-researchgate:before{content:\"\\f4f8\"}.fa-resolving:before{content:\"\\f3e7\"}.fa-restroom:before{content:\"\\f7bd\"}.fa-retweet:before{content:\"\\f079\"}.fa-rev:before{content:\"\\f5b2\"}.fa-ribbon:before{content:\"\\f4d6\"}.fa-ring:before{content:\"\\f70b\"}.fa-road:before{content:\"\\f018\"}.fa-robot:before{content:\"\\f544\"}.fa-rocket:before{content:\"\\f135\"}.fa-rocketchat:before{content:\"\\f3e8\"}.fa-rockrms:before{content:\"\\f3e9\"}.fa-route:before{content:\"\\f4d7\"}.fa-rss:before{content:\"\\f09e\"}.fa-rss-square:before{content:\"\\f143\"}.fa-ruble-sign:before{content:\"\\f158\"}.fa-ruler:before{content:\"\\f545\"}.fa-ruler-combined:before{content:\"\\f546\"}.fa-ruler-horizontal:before{content:\"\\f547\"}.fa-ruler-vertical:before{content:\"\\f548\"}.fa-running:before{content:\"\\f70c\"}.fa-rupee-sign:before{content:\"\\f156\"}.fa-sad-cry:before{content:\"\\f5b3\"}.fa-sad-tear:before{content:\"\\f5b4\"}.fa-safari:before{content:\"\\f267\"}.fa-salesforce:before{content:\"\\f83b\"}.fa-sass:before{content:\"\\f41e\"}.fa-satellite:before{content:\"\\f7bf\"}.fa-satellite-dish:before{content:\"\\f7c0\"}.fa-save:before{content:\"\\f0c7\"}.fa-schlix:before{content:\"\\f3ea\"}.fa-school:before{content:\"\\f549\"}.fa-screwdriver:before{content:\"\\f54a\"}.fa-scribd:before{content:\"\\f28a\"}.fa-scroll:before{content:\"\\f70e\"}.fa-sd-card:before{content:\"\\f7c2\"}.fa-search:before{content:\"\\f002\"}.fa-search-dollar:before{content:\"\\f688\"}.fa-search-location:before{content:\"\\f689\"}.fa-search-minus:before{content:\"\\f010\"}.fa-search-plus:before{content:\"\\f00e\"}.fa-searchengin:before{content:\"\\f3eb\"}.fa-seedling:before{content:\"\\f4d8\"}.fa-sellcast:before{content:\"\\f2da\"}.fa-sellsy:before{content:\"\\f213\"}.fa-server:before{content:\"\\f233\"}.fa-servicestack:before{content:\"\\f3ec\"}.fa-shapes:before{content:\"\\f61f\"}.fa-share:before{content:\"\\f064\"}.fa-share-alt:before{content:\"\\f1e0\"}.fa-share-alt-square:before{content:\"\\f1e1\"}.fa-share-square:before{content:\"\\f14d\"}.fa-shekel-sign:before{content:\"\\f20b\"}.fa-shield-alt:before{content:\"\\f3ed\"}.fa-ship:before{content:\"\\f21a\"}.fa-shipping-fast:before{content:\"\\f48b\"}.fa-shirtsinbulk:before{content:\"\\f214\"}.fa-shoe-prints:before{content:\"\\f54b\"}.fa-shopping-bag:before{content:\"\\f290\"}.fa-shopping-basket:before{content:\"\\f291\"}.fa-shopping-cart:before{content:\"\\f07a\"}.fa-shopware:before{content:\"\\f5b5\"}.fa-shower:before{content:\"\\f2cc\"}.fa-shuttle-van:before{content:\"\\f5b6\"}.fa-sign:before{content:\"\\f4d9\"}.fa-sign-in-alt:before{content:\"\\f2f6\"}.fa-sign-language:before{content:\"\\f2a7\"}.fa-sign-out-alt:before{content:\"\\f2f5\"}.fa-signal:before{content:\"\\f012\"}.fa-signature:before{content:\"\\f5b7\"}.fa-sim-card:before{content:\"\\f7c4\"}.fa-simplybuilt:before{content:\"\\f215\"}.fa-sistrix:before{content:\"\\f3ee\"}.fa-sitemap:before{content:\"\\f0e8\"}.fa-sith:before{content:\"\\f512\"}.fa-skating:before{content:\"\\f7c5\"}.fa-sketch:before{content:\"\\f7c6\"}.fa-skiing:before{content:\"\\f7c9\"}.fa-skiing-nordic:before{content:\"\\f7ca\"}.fa-skull:before{content:\"\\f54c\"}.fa-skull-crossbones:before{content:\"\\f714\"}.fa-skyatlas:before{content:\"\\f216\"}.fa-skype:before{content:\"\\f17e\"}.fa-slack:before{content:\"\\f198\"}.fa-slack-hash:before{content:\"\\f3ef\"}.fa-slash:before{content:\"\\f715\"}.fa-sleigh:before{content:\"\\f7cc\"}.fa-sliders-h:before{content:\"\\f1de\"}.fa-slideshare:before{content:\"\\f1e7\"}.fa-smile:before{content:\"\\f118\"}.fa-smile-beam:before{content:\"\\f5b8\"}.fa-smile-wink:before{content:\"\\f4da\"}.fa-smog:before{content:\"\\f75f\"}.fa-smoking:before{content:\"\\f48d\"}.fa-smoking-ban:before{content:\"\\f54d\"}.fa-sms:before{content:\"\\f7cd\"}.fa-snapchat:before{content:\"\\f2ab\"}.fa-snapchat-ghost:before{content:\"\\f2ac\"}.fa-snapchat-square:before{content:\"\\f2ad\"}.fa-snowboarding:before{content:\"\\f7ce\"}.fa-snowflake:before{content:\"\\f2dc\"}.fa-snowman:before{content:\"\\f7d0\"}.fa-snowplow:before{content:\"\\f7d2\"}.fa-socks:before{content:\"\\f696\"}.fa-solar-panel:before{content:\"\\f5ba\"}.fa-sort:before{content:\"\\f0dc\"}.fa-sort-alpha-down:before{content:\"\\f15d\"}.fa-sort-alpha-down-alt:before{content:\"\\f881\"}.fa-sort-alpha-up:before{content:\"\\f15e\"}.fa-sort-alpha-up-alt:before{content:\"\\f882\"}.fa-sort-amount-down:before{content:\"\\f160\"}.fa-sort-amount-down-alt:before{content:\"\\f884\"}.fa-sort-amount-up:before{content:\"\\f161\"}.fa-sort-amount-up-alt:before{content:\"\\f885\"}.fa-sort-down:before{content:\"\\f0dd\"}.fa-sort-numeric-down:before{content:\"\\f162\"}.fa-sort-numeric-down-alt:before{content:\"\\f886\"}.fa-sort-numeric-up:before{content:\"\\f163\"}.fa-sort-numeric-up-alt:before{content:\"\\f887\"}.fa-sort-up:before{content:\"\\f0de\"}.fa-soundcloud:before{content:\"\\f1be\"}.fa-sourcetree:before{content:\"\\f7d3\"}.fa-spa:before{content:\"\\f5bb\"}.fa-space-shuttle:before{content:\"\\f197\"}.fa-speakap:before{content:\"\\f3f3\"}.fa-speaker-deck:before{content:\"\\f83c\"}.fa-spell-check:before{content:\"\\f891\"}.fa-spider:before{content:\"\\f717\"}.fa-spinner:before{content:\"\\f110\"}.fa-splotch:before{content:\"\\f5bc\"}.fa-spotify:before{content:\"\\f1bc\"}.fa-spray-can:before{content:\"\\f5bd\"}.fa-square:before{content:\"\\f0c8\"}.fa-square-full:before{content:\"\\f45c\"}.fa-square-root-alt:before{content:\"\\f698\"}.fa-squarespace:before{content:\"\\f5be\"}.fa-stack-exchange:before{content:\"\\f18d\"}.fa-stack-overflow:before{content:\"\\f16c\"}.fa-stackpath:before{content:\"\\f842\"}.fa-stamp:before{content:\"\\f5bf\"}.fa-star:before{content:\"\\f005\"}.fa-star-and-crescent:before{content:\"\\f699\"}.fa-star-half:before{content:\"\\f089\"}.fa-star-half-alt:before{content:\"\\f5c0\"}.fa-star-of-david:before{content:\"\\f69a\"}.fa-star-of-life:before{content:\"\\f621\"}.fa-staylinked:before{content:\"\\f3f5\"}.fa-steam:before{content:\"\\f1b6\"}.fa-steam-square:before{content:\"\\f1b7\"}.fa-steam-symbol:before{content:\"\\f3f6\"}.fa-step-backward:before{content:\"\\f048\"}.fa-step-forward:before{content:\"\\f051\"}.fa-stethoscope:before{content:\"\\f0f1\"}.fa-sticker-mule:before{content:\"\\f3f7\"}.fa-sticky-note:before{content:\"\\f249\"}.fa-stop:before{content:\"\\f04d\"}.fa-stop-circle:before{content:\"\\f28d\"}.fa-stopwatch:before{content:\"\\f2f2\"}.fa-store:before{content:\"\\f54e\"}.fa-store-alt:before{content:\"\\f54f\"}.fa-strava:before{content:\"\\f428\"}.fa-stream:before{content:\"\\f550\"}.fa-street-view:before{content:\"\\f21d\"}.fa-strikethrough:before{content:\"\\f0cc\"}.fa-stripe:before{content:\"\\f429\"}.fa-stripe-s:before{content:\"\\f42a\"}.fa-stroopwafel:before{content:\"\\f551\"}.fa-studiovinari:before{content:\"\\f3f8\"}.fa-stumbleupon:before{content:\"\\f1a4\"}.fa-stumbleupon-circle:before{content:\"\\f1a3\"}.fa-subscript:before{content:\"\\f12c\"}.fa-subway:before{content:\"\\f239\"}.fa-suitcase:before{content:\"\\f0f2\"}.fa-suitcase-rolling:before{content:\"\\f5c1\"}.fa-sun:before{content:\"\\f185\"}.fa-superpowers:before{content:\"\\f2dd\"}.fa-superscript:before{content:\"\\f12b\"}.fa-supple:before{content:\"\\f3f9\"}.fa-surprise:before{content:\"\\f5c2\"}.fa-suse:before{content:\"\\f7d6\"}.fa-swatchbook:before{content:\"\\f5c3\"}.fa-swimmer:before{content:\"\\f5c4\"}.fa-swimming-pool:before{content:\"\\f5c5\"}.fa-symfony:before{content:\"\\f83d\"}.fa-synagogue:before{content:\"\\f69b\"}.fa-sync:before{content:\"\\f021\"}.fa-sync-alt:before{content:\"\\f2f1\"}.fa-syringe:before{content:\"\\f48e\"}.fa-table:before{content:\"\\f0ce\"}.fa-table-tennis:before{content:\"\\f45d\"}.fa-tablet:before{content:\"\\f10a\"}.fa-tablet-alt:before{content:\"\\f3fa\"}.fa-tablets:before{content:\"\\f490\"}.fa-tachometer-alt:before{content:\"\\f3fd\"}.fa-tag:before{content:\"\\f02b\"}.fa-tags:before{content:\"\\f02c\"}.fa-tape:before{content:\"\\f4db\"}.fa-tasks:before{content:\"\\f0ae\"}.fa-taxi:before{content:\"\\f1ba\"}.fa-teamspeak:before{content:\"\\f4f9\"}.fa-teeth:before{content:\"\\f62e\"}.fa-teeth-open:before{content:\"\\f62f\"}.fa-telegram:before{content:\"\\f2c6\"}.fa-telegram-plane:before{content:\"\\f3fe\"}.fa-temperature-high:before{content:\"\\f769\"}.fa-temperature-low:before{content:\"\\f76b\"}.fa-tencent-weibo:before{content:\"\\f1d5\"}.fa-tenge:before{content:\"\\f7d7\"}.fa-terminal:before{content:\"\\f120\"}.fa-text-height:before{content:\"\\f034\"}.fa-text-width:before{content:\"\\f035\"}.fa-th:before{content:\"\\f00a\"}.fa-th-large:before{content:\"\\f009\"}.fa-th-list:before{content:\"\\f00b\"}.fa-the-red-yeti:before{content:\"\\f69d\"}.fa-theater-masks:before{content:\"\\f630\"}.fa-themeco:before{content:\"\\f5c6\"}.fa-themeisle:before{content:\"\\f2b2\"}.fa-thermometer:before{content:\"\\f491\"}.fa-thermometer-empty:before{content:\"\\f2cb\"}.fa-thermometer-full:before{content:\"\\f2c7\"}.fa-thermometer-half:before{content:\"\\f2c9\"}.fa-thermometer-quarter:before{content:\"\\f2ca\"}.fa-thermometer-three-quarters:before{content:\"\\f2c8\"}.fa-think-peaks:before{content:\"\\f731\"}.fa-thumbs-down:before{content:\"\\f165\"}.fa-thumbs-up:before{content:\"\\f164\"}.fa-thumbtack:before{content:\"\\f08d\"}.fa-ticket-alt:before{content:\"\\f3ff\"}.fa-times:before{content:\"\\f00d\"}.fa-times-circle:before{content:\"\\f057\"}.fa-tint:before{content:\"\\f043\"}.fa-tint-slash:before{content:\"\\f5c7\"}.fa-tired:before{content:\"\\f5c8\"}.fa-toggle-off:before{content:\"\\f204\"}.fa-toggle-on:before{content:\"\\f205\"}.fa-toilet:before{content:\"\\f7d8\"}.fa-toilet-paper:before{content:\"\\f71e\"}.fa-toolbox:before{content:\"\\f552\"}.fa-tools:before{content:\"\\f7d9\"}.fa-tooth:before{content:\"\\f5c9\"}.fa-torah:before{content:\"\\f6a0\"}.fa-torii-gate:before{content:\"\\f6a1\"}.fa-tractor:before{content:\"\\f722\"}.fa-trade-federation:before{content:\"\\f513\"}.fa-trademark:before{content:\"\\f25c\"}.fa-traffic-light:before{content:\"\\f637\"}.fa-train:before{content:\"\\f238\"}.fa-tram:before{content:\"\\f7da\"}.fa-transgender:before{content:\"\\f224\"}.fa-transgender-alt:before{content:\"\\f225\"}.fa-trash:before{content:\"\\f1f8\"}.fa-trash-alt:before{content:\"\\f2ed\"}.fa-trash-restore:before{content:\"\\f829\"}.fa-trash-restore-alt:before{content:\"\\f82a\"}.fa-tree:before{content:\"\\f1bb\"}.fa-trello:before{content:\"\\f181\"}.fa-tripadvisor:before{content:\"\\f262\"}.fa-trophy:before{content:\"\\f091\"}.fa-truck:before{content:\"\\f0d1\"}.fa-truck-loading:before{content:\"\\f4de\"}.fa-truck-monster:before{content:\"\\f63b\"}.fa-truck-moving:before{content:\"\\f4df\"}.fa-truck-pickup:before{content:\"\\f63c\"}.fa-tshirt:before{content:\"\\f553\"}.fa-tty:before{content:\"\\f1e4\"}.fa-tumblr:before{content:\"\\f173\"}.fa-tumblr-square:before{content:\"\\f174\"}.fa-tv:before{content:\"\\f26c\"}.fa-twitch:before{content:\"\\f1e8\"}.fa-twitter:before{content:\"\\f099\"}.fa-twitter-square:before{content:\"\\f081\"}.fa-typo3:before{content:\"\\f42b\"}.fa-uber:before{content:\"\\f402\"}.fa-ubuntu:before{content:\"\\f7df\"}.fa-uikit:before{content:\"\\f403\"}.fa-umbrella:before{content:\"\\f0e9\"}.fa-umbrella-beach:before{content:\"\\f5ca\"}.fa-underline:before{content:\"\\f0cd\"}.fa-undo:before{content:\"\\f0e2\"}.fa-undo-alt:before{content:\"\\f2ea\"}.fa-uniregistry:before{content:\"\\f404\"}.fa-universal-access:before{content:\"\\f29a\"}.fa-university:before{content:\"\\f19c\"}.fa-unlink:before{content:\"\\f127\"}.fa-unlock:before{content:\"\\f09c\"}.fa-unlock-alt:before{content:\"\\f13e\"}.fa-untappd:before{content:\"\\f405\"}.fa-upload:before{content:\"\\f093\"}.fa-ups:before{content:\"\\f7e0\"}.fa-usb:before{content:\"\\f287\"}.fa-user:before{content:\"\\f007\"}.fa-user-alt:before{content:\"\\f406\"}.fa-user-alt-slash:before{content:\"\\f4fa\"}.fa-user-astronaut:before{content:\"\\f4fb\"}.fa-user-check:before{content:\"\\f4fc\"}.fa-user-circle:before{content:\"\\f2bd\"}.fa-user-clock:before{content:\"\\f4fd\"}.fa-user-cog:before{content:\"\\f4fe\"}.fa-user-edit:before{content:\"\\f4ff\"}.fa-user-friends:before{content:\"\\f500\"}.fa-user-graduate:before{content:\"\\f501\"}.fa-user-injured:before{content:\"\\f728\"}.fa-user-lock:before{content:\"\\f502\"}.fa-user-md:before{content:\"\\f0f0\"}.fa-user-minus:before{content:\"\\f503\"}.fa-user-ninja:before{content:\"\\f504\"}.fa-user-nurse:before{content:\"\\f82f\"}.fa-user-plus:before{content:\"\\f234\"}.fa-user-secret:before{content:\"\\f21b\"}.fa-user-shield:before{content:\"\\f505\"}.fa-user-slash:before{content:\"\\f506\"}.fa-user-tag:before{content:\"\\f507\"}.fa-user-tie:before{content:\"\\f508\"}.fa-user-times:before{content:\"\\f235\"}.fa-users:before{content:\"\\f0c0\"}.fa-users-cog:before{content:\"\\f509\"}.fa-usps:before{content:\"\\f7e1\"}.fa-ussunnah:before{content:\"\\f407\"}.fa-utensil-spoon:before{content:\"\\f2e5\"}.fa-utensils:before{content:\"\\f2e7\"}.fa-vaadin:before{content:\"\\f408\"}.fa-vector-square:before{content:\"\\f5cb\"}.fa-venus:before{content:\"\\f221\"}.fa-venus-double:before{content:\"\\f226\"}.fa-venus-mars:before{content:\"\\f228\"}.fa-viacoin:before{content:\"\\f237\"}.fa-viadeo:before{content:\"\\f2a9\"}.fa-viadeo-square:before{content:\"\\f2aa\"}.fa-vial:before{content:\"\\f492\"}.fa-vials:before{content:\"\\f493\"}.fa-viber:before{content:\"\\f409\"}.fa-video:before{content:\"\\f03d\"}.fa-video-slash:before{content:\"\\f4e2\"}.fa-vihara:before{content:\"\\f6a7\"}.fa-vimeo:before{content:\"\\f40a\"}.fa-vimeo-square:before{content:\"\\f194\"}.fa-vimeo-v:before{content:\"\\f27d\"}.fa-vine:before{content:\"\\f1ca\"}.fa-vk:before{content:\"\\f189\"}.fa-vnv:before{content:\"\\f40b\"}.fa-voicemail:before{content:\"\\f897\"}.fa-volleyball-ball:before{content:\"\\f45f\"}.fa-volume-down:before{content:\"\\f027\"}.fa-volume-mute:before{content:\"\\f6a9\"}.fa-volume-off:before{content:\"\\f026\"}.fa-volume-up:before{content:\"\\f028\"}.fa-vote-yea:before{content:\"\\f772\"}.fa-vr-cardboard:before{content:\"\\f729\"}.fa-vuejs:before{content:\"\\f41f\"}.fa-walking:before{content:\"\\f554\"}.fa-wallet:before{content:\"\\f555\"}.fa-warehouse:before{content:\"\\f494\"}.fa-water:before{content:\"\\f773\"}.fa-wave-square:before{content:\"\\f83e\"}.fa-waze:before{content:\"\\f83f\"}.fa-weebly:before{content:\"\\f5cc\"}.fa-weibo:before{content:\"\\f18a\"}.fa-weight:before{content:\"\\f496\"}.fa-weight-hanging:before{content:\"\\f5cd\"}.fa-weixin:before{content:\"\\f1d7\"}.fa-whatsapp:before{content:\"\\f232\"}.fa-whatsapp-square:before{content:\"\\f40c\"}.fa-wheelchair:before{content:\"\\f193\"}.fa-whmcs:before{content:\"\\f40d\"}.fa-wifi:before{content:\"\\f1eb\"}.fa-wikipedia-w:before{content:\"\\f266\"}.fa-wind:before{content:\"\\f72e\"}.fa-window-close:before{content:\"\\f410\"}.fa-window-maximize:before{content:\"\\f2d0\"}.fa-window-minimize:before{content:\"\\f2d1\"}.fa-window-restore:before{content:\"\\f2d2\"}.fa-windows:before{content:\"\\f17a\"}.fa-wine-bottle:before{content:\"\\f72f\"}.fa-wine-glass:before{content:\"\\f4e3\"}.fa-wine-glass-alt:before{content:\"\\f5ce\"}.fa-wix:before{content:\"\\f5cf\"}.fa-wizards-of-the-coast:before{content:\"\\f730\"}.fa-wolf-pack-battalion:before{content:\"\\f514\"}.fa-won-sign:before{content:\"\\f159\"}.fa-wordpress:before{content:\"\\f19a\"}.fa-wordpress-simple:before{content:\"\\f411\"}.fa-wpbeginner:before{content:\"\\f297\"}.fa-wpexplorer:before{content:\"\\f2de\"}.fa-wpforms:before{content:\"\\f298\"}.fa-wpressr:before{content:\"\\f3e4\"}.fa-wrench:before{content:\"\\f0ad\"}.fa-x-ray:before{content:\"\\f497\"}.fa-xbox:before{content:\"\\f412\"}.fa-xing:before{content:\"\\f168\"}.fa-xing-square:before{content:\"\\f169\"}.fa-y-combinator:before{content:\"\\f23b\"}.fa-yahoo:before{content:\"\\f19e\"}.fa-yammer:before{content:\"\\f840\"}.fa-yandex:before{content:\"\\f413\"}.fa-yandex-international:before{content:\"\\f414\"}.fa-yarn:before{content:\"\\f7e3\"}.fa-yelp:before{content:\"\\f1e9\"}.fa-yen-sign:before{content:\"\\f157\"}.fa-yin-yang:before{content:\"\\f6ad\"}.fa-yoast:before{content:\"\\f2b1\"}.fa-youtube:before{content:\"\\f167\"}.fa-youtube-square:before{content:\"\\f431\"}.fa-zhihu:before{content:\"\\f63f\"}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sr-only-focusable:active,.sr-only-focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;width:auto}@font-face{font-family:\"Font Awesome 5 Brands\";font-style:normal;font-weight:normal;font-display:auto;src:url(../webfonts/fa-brands-400.eot);src:url(../webfonts/fa-brands-400.eot?#iefix) format(\"embedded-opentype\"),url(../webfonts/fa-brands-400.woff2) format(\"woff2\"),url(../webfonts/fa-brands-400.woff) format(\"woff\"),url(../webfonts/fa-brands-400.ttf) format(\"truetype\"),url(../webfonts/fa-brands-400.svg#fontawesome) format(\"svg\")}.fab{font-family:\"Font Awesome 5 Brands\"}@font-face{font-family:\"Font Awesome 5 Free\";font-style:normal;font-weight:400;font-display:auto;src:url(../webfonts/fa-regular-400.eot);src:url(../webfonts/fa-regular-400.eot?#iefix) format(\"embedded-opentype\"),url(../webfonts/fa-regular-400.woff2) format(\"woff2\"),url(../webfonts/fa-regular-400.woff) format(\"woff\"),url(../webfonts/fa-regular-400.ttf) format(\"truetype\"),url(../webfonts/fa-regular-400.svg#fontawesome) format(\"svg\")}.far{font-weight:400}@font-face{font-family:\"Font Awesome 5 Free\";font-style:normal;font-weight:900;font-display:auto;src:url(../webfonts/fa-solid-900.eot);src:url(../webfonts/fa-solid-900.eot?#iefix) format(\"embedded-opentype\"),url(../webfonts/fa-solid-900.woff2) format(\"woff2\"),url(../webfonts/fa-solid-900.woff) format(\"woff\"),url(../webfonts/fa-solid-900.ttf) format(\"truetype\"),url(../webfonts/fa-solid-900.svg#fontawesome) format(\"svg\")}.fa,.far,.fas{font-family:\"Font Awesome 5 Free\"}.fa,.fas{font-weight:900}"},{"title":"","date":"2020-09-03T07:36:58.995Z","updated":"2019-08-30T14:53:02.000Z","comments":true,"path":"aboutme/assets/css/main.css","permalink":"https://brynhild.online/aboutme/assets/css/main.css","excerpt":"","text":"@import url(fontawesome-all.min.css); @import url(\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,300i,400i\"); /* Ethereal by HTML5 UP html5up.net | @ajlkn Free for personal and commercial use under the CCA 3.0 license (html5up.net/license) */ html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline;} article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block;} body { line-height: 1; } ol, ul { list-style: none; } blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: ''; content: none; } table { border-collapse: collapse; border-spacing: 0; } body { -webkit-text-size-adjust: none; } mark { background-color: transparent; color: inherit; } input::-moz-focus-inner { border: 0; padding: 0; } input, select, textarea { -moz-appearance: none; -webkit-appearance: none; -ms-appearance: none; appearance: none; } /* Page */ @-moz-keyframes load-spinner { 0% { -moz-transform: rotate(0deg); -webkit-transform: rotate(0deg); -ms-transform: rotate(0deg); transform: rotate(0deg); } 100% { -moz-transform: rotate(360deg); -webkit-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg); } } @-webkit-keyframes load-spinner { 0% { -moz-transform: rotate(0deg); -webkit-transform: rotate(0deg); -ms-transform: rotate(0deg); transform: rotate(0deg); } 100% { -moz-transform: rotate(360deg); -webkit-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg); } } @-ms-keyframes load-spinner { 0% { -moz-transform: rotate(0deg); -webkit-transform: rotate(0deg); -ms-transform: rotate(0deg); transform: rotate(0deg); } 100% { -moz-transform: rotate(360deg); -webkit-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes load-spinner { 0% { -moz-transform: rotate(0deg); -webkit-transform: rotate(0deg); -ms-transform: rotate(0deg); transform: rotate(0deg); } 100% { -moz-transform: rotate(360deg); -webkit-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg); } } @-ms-viewport { width: device-width; } html { width: 100%; height: 100%; } html { box-sizing: border-box; } *, *:before, *:after { box-sizing: inherit; } body { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-align-items: center; -webkit-align-items: center; -ms-align-items: center; align-items: center; -moz-justify-content: -moz-flex-start; -webkit-justify-content: -webkit-flex-start; -ms-justify-content: -ms-flex-start; justify-content: flex-start; -ms-overflow-style: scrollbar; width: 100%; height: 100%; min-height: 30rem; overflow: hidden; } body:before { -moz-animation: load-spinner 1s infinite linear; -webkit-animation: load-spinner 1s infinite linear; -ms-animation: load-spinner 1s infinite linear; animation: load-spinner 1s infinite linear; -moz-transition: opacity 0.25s ease; -webkit-transition: opacity 0.25s ease; -ms-transition: opacity 0.25s ease; transition: opacity 0.25s ease; -moz-transition-delay: 0s; -webkit-transition-delay: 0s; -ms-transition-delay: 0s; transition-delay: 0s; pointer-events: none; content: ''; display: block; position: absolute; top: 50%; left: 50%; width: 4rem; height: 4rem; margin: -2rem 0 0 -2rem; background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='96px' height='96px' viewBox='0 0 96 96' zoomAndPan='disable'%3E%3Cstyle%3Ecircle %7Bfill: transparent%3B stroke: %232e2b37%3B stroke-width: 1.5px%3B %7D%3C/style%3E%3Cdefs%3E%3CclipPath id='corner'%3E%3Cpolygon points='0,0 48,0 48,48 96,48 96,96 0,96' /%3E%3C/clipPath%3E%3C/defs%3E%3Cg clip-path='url(%23corner)'%3E%3Ccircle cx='48' cy='48' r='32'/%3E%3C/g%3E%3C/svg%3E\"); background-position: center; background-repeat: no-repeat; background-size: 4rem; opacity: 0; } body:after { pointer-events: none; content: ''; display: block; position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; background-attachment: fixed; background-color: #e1e6e1; background-image: url(\"../../images/overlay.png\"), url(\"../../images/bg.jpg\"); background-repeat: repeat, repeat-x; background-size: 128px 128px, cover; } body.is-preload *, body.is-preload *:before, body.is-preload *:after { -moz-animation: none !important; -webkit-animation: none !important; -ms-animation: none !important; animation: none !important; -moz-transition: none !important; -webkit-transition: none !important; -ms-transition: none !important; transition: none !important; } body.is-preload:before { -moz-transition: opacity 1s ease; -webkit-transition: opacity 1s ease; -ms-transition: opacity 1s ease; transition: opacity 1s ease; -moz-transition-delay: 0.75s; -webkit-transition-delay: 0.75s; -ms-transition-delay: 0.75s; transition-delay: 0.75s; opacity: 0.25; } @media screen and (max-width: 736px) { html { height: auto; } body { height: auto; overflow-x: hidden; overflow-y: auto; } } @media screen and (max-width: 480px) { html, body { min-width: 320px; } } /* Typography */ html { font-size: 18pt; font-size: 1vmax; } @media screen and (max-width: 1680px) { html { font-size: 12pt; font-size: 1.1vmax; } } @media screen and (max-width: 1280px) { html { font-size: 11pt; font-size: 1.5vmax; } } body, input, select, textarea { color: rgba(255, 255, 255, 0.75); font-family: \"Source Sans Pro\", Helvetica, sans-serif; font-size: 1rem; font-weight: 300; line-height: 1.65; } a { -moz-transition: color 0.2s ease-in-out, border-bottom-color 0.2s ease-in-out; -webkit-transition: color 0.2s ease-in-out, border-bottom-color 0.2s ease-in-out; -ms-transition: color 0.2s ease-in-out, border-bottom-color 0.2s ease-in-out; transition: color 0.2s ease-in-out, border-bottom-color 0.2s ease-in-out; color: inherit; border-bottom: dotted 1px; text-decoration: none; } a:hover { border-bottom-color: transparent; color: #ffe4b4; } strong, b { color: rgba(255, 255, 255, 0.875); font-weight: 400; } em, i { font-style: italic; } p { margin: 0 0 1.5rem 0; } body.is-ie p { width: 100%; } h1, h2, h3, h4, h5, h6 { color: rgba(255, 255, 255, 0.875); font-family: Arial, Helvetica, sans-serif; font-weight: 700; line-height: 1.3; margin: 0 0 0.75rem 0; letter-spacing: -0.05em; } h1 a, h2 a, h3 a, h4 a, h5 a, h6 a { color: inherit; text-decoration: none; } h1.major, h2.major, h3.major { position: relative; } h1.major:after, h2.major:after, h3.major:after { content: ''; position: absolute; left: 0; width: 3.5rem; height: 0.1rem; background-color: rgba(255, 255, 255, 0.25); } h1 { font-size: 3rem; line-height: 1.2; } h1.major { margin: 0 0 2.625rem 0; } h1.major:after { bottom: -1.325rem; } h2 { font-size: 1.75rem; line-height: 1.2; } h2.major { margin: 0 0 1.9875rem 0; } h2.major:after { bottom: -1.2rem; } h3 { font-size: 1.325rem; } h3.major { margin: 0 0 1.875rem 0; } h3.major:after { bottom: -0.75rem; } h4 { font-size: 1rem; } h5 { font-size: 0.9rem; } h6 { font-size: 0.7rem; } sub { font-size: 0.8rem; position: relative; top: 0.5rem; } sup { font-size: 0.8rem; position: relative; top: -0.5rem; } blockquote { border-left: solid 0.25rem rgba(255, 255, 255, 0.25); font-style: italic; margin: 0 0 1.5rem 0; padding: 0.375rem 0 0.375rem 1.5rem; } code { background: rgba(255, 255, 255, 0.075); border-radius: 0.25rem; font-family: \"Courier New\", monospace; font-size: 0.8rem; margin: 0 0.25rem; padding: 0.25rem 0.65rem; } pre { -webkit-overflow-scrolling: touch; font-family: \"Courier New\", monospace; font-size: 0.8rem; margin: 0 0 1.5rem 0; white-space: pre-wrap; } pre code { display: block; line-height: 1.625; padding: 1rem 1.5rem; overflow-x: auto; margin: 0; } hr { border: 0; border-bottom: solid 2px rgba(255, 255, 255, 0.25); margin: 1.875rem 0; } .align-left { text-align: left; } .align-center { text-align: center; } .align-right { text-align: right; } @media screen and (max-width: 736px) { html { font-size: 12pt; } h1 { font-size: 2.25rem; line-height: 1.2; } h1.major { margin: 0 0 2.625rem 0; } h1.major:after { bottom: -1.325rem; } h2 { font-size: 1.5rem; line-height: 1.2; } h2.major { margin: 0 0 1.9875rem 0; } h2.major:after { bottom: -1.2rem; } h3 { font-size: 1rem; } h3.major { margin: 0 0 1.875rem 0; } h3.major:after { bottom: -0.75rem; } h4 { font-size: 1rem; } h5 { font-size: 0.9rem; } h6 { font-size: 0.7rem; } h1 br, h2 br, h3 br, h4 br, h5 br, h6 br { display: none; } } @media screen and (max-width: 360px) { html { font-size: 11pt; } } /* Form */ form { margin: 0 0 1.5rem 0; } form > :last-child { margin-bottom: 0; } form > .fields { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-flex-wrap: wrap; -webkit-flex-wrap: wrap; -ms-flex-wrap: wrap; flex-wrap: wrap; width: calc(100% + 3rem); margin: -1.5rem 0 1.5rem -1.5rem; } form > .fields > .field { -moz-flex-grow: 0; -webkit-flex-grow: 0; -ms-flex-grow: 0; flex-grow: 0; -moz-flex-shrink: 0; -webkit-flex-shrink: 0; -ms-flex-shrink: 0; flex-shrink: 0; padding: 1.5rem 0 0 1.5rem; width: calc(100% - 1.5rem); } form > .fields > .field.half { width: calc(50% - 0.75rem); } form > .fields > .field.third { width: calc(100%/3 - 0.5rem); } form > .fields > .field.quarter { width: calc(25% - 0.375rem); } @media screen and (max-width: 736px) { form > .fields { width: calc(100% + 2.25rem); margin: -1.125rem 0 1.5rem -1.125rem; } form > .fields > .field { padding: 1.125rem 0 0 1.125rem; width: calc(100% - 1.125rem); } form > .fields > .field.half { width: calc(100% - 1.125rem); } form > .fields > .field.third { width: calc(100% - 1.125rem); } form > .fields > .field.quarter { width: calc(100% - 1.125rem); } } label { color: rgba(255, 255, 255, 0.875); display: block; font-family: Arial, Helvetica, sans-serif; font-size: 0.8rem; font-weight: 700; margin: 0 0 0.4875rem 0; } input[type=\"text\"], input[type=\"password\"], input[type=\"email\"], input[type=\"tel\"], select, textarea { -moz-appearance: none; -webkit-appearance: none; -ms-appearance: none; appearance: none; background: transparent; border: solid 2px rgba(255, 255, 255, 0.25); border-radius: 0.25rem; color: inherit; display: block; outline: 0; padding: 0 0.75rem; text-decoration: none; width: 100%; } input[type=\"text\"]:invalid, input[type=\"password\"]:invalid, input[type=\"email\"]:invalid, input[type=\"tel\"]:invalid, select:invalid, textarea:invalid { box-shadow: none; } input[type=\"text\"]:focus, input[type=\"password\"]:focus, input[type=\"email\"]:focus, input[type=\"tel\"]:focus, select:focus, textarea:focus { border-color: #ffe4b4; } option { background-color: rgba(255, 255, 255, 0.875); color: #2e2b37; } select { background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='40' height='40' preserveAspectRatio='none' viewBox='0 0 40 40'%3E%3Cpath d='M9.4,12.3l10.4,10.4l10.4-10.4c0.2-0.2,0.5-0.4,0.9-0.4c0.3,0,0.6,0.1,0.9,0.4l3.3,3.3c0.2,0.2,0.4,0.5,0.4,0.9 c0,0.4-0.1,0.6-0.4,0.9L20.7,31.9c-0.2,0.2-0.5,0.4-0.9,0.4c-0.3,0-0.6-0.1-0.9-0.4L4.3,17.3c-0.2-0.2-0.4-0.5-0.4-0.9 c0-0.4,0.1-0.6,0.4-0.9l3.3-3.3c0.2-0.2,0.5-0.4,0.9-0.4S9.1,12.1,9.4,12.3z' fill='rgba(255, 255, 255, 0.25)' /%3E%3C/svg%3E\"); background-size: 1.25rem; background-repeat: no-repeat; background-position: calc(100% - 1rem) center; height: 2.5rem; padding-right: 2.5rem; text-overflow: ellipsis; } select option { color: rgba(255, 255, 255, 0.875); background: #2e2b37; } select:focus::-ms-value { background-color: transparent; } select::-ms-expand { display: none; } input[type=\"text\"], input[type=\"password\"], input[type=\"email\"], select { height: 2.5rem; } textarea { padding: 0.75rem 1rem; } input[type=\"checkbox\"], input[type=\"radio\"] { -moz-appearance: none; -webkit-appearance: none; -ms-appearance: none; appearance: none; display: block; float: left; margin-right: -2rem; opacity: 0; width: 1rem; z-index: -1; } input[type=\"checkbox\"] + label, input[type=\"radio\"] + label { text-decoration: none; position: relative; color: rgba(255, 255, 255, 0.75); cursor: pointer; display: inline-block; font-size: 1rem; font-weight: 300; margin-bottom: 0; padding-left: 2.5rem; padding-right: 1rem; } input[type=\"checkbox\"] + label:before, input[type=\"radio\"] + label:before { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; display: inline-block; font-style: normal; font-variant: normal; text-rendering: auto; line-height: 1; text-transform: none !important; font-family: 'Font Awesome 5 Free'; font-weight: 900; } input[type=\"checkbox\"] + label:before, input[type=\"radio\"] + label:before { content: ''; display: inline-block; font-size: 0.8rem; position: absolute; top: 0; left: 0; width: 1.6875rem; height: 1.6875rem; line-height: 1.6875rem; background: rgba(255, 255, 255, 0.075); border: solid 1px rgba(255, 255, 255, 0.25); border-radius: 0.25rem; color: #2e2b37; text-align: center; } body.is-ie input[type=\"checkbox\"] + label:before, body.is-ie input[type=\"radio\"] + label:before { line-height: 1.5; } input[type=\"checkbox\"]:checked + label:before, input[type=\"radio\"]:checked + label:before { content: '\\f00c'; background: rgba(255, 255, 255, 0.875); border-color: rgba(255, 255, 255, 0.875); } input[type=\"checkbox\"]:focus + label:before, input[type=\"radio\"]:focus + label:before { border-color: #ffe4b4; box-shadow: 0 0 0 1px #ffe4b4; } input[type=\"checkbox\"]:focus:checked + label:before, input[type=\"radio\"]:focus:checked + label:before { background: #ffe4b4; } input[type=\"checkbox\"].color1 + label:before, input[type=\"radio\"].color1 + label:before { color: #726193; } input[type=\"checkbox\"].color2 + label:before, input[type=\"radio\"].color2 + label:before { color: #e37b7c; } input[type=\"checkbox\"].color3 + label:before, input[type=\"radio\"].color3 + label:before { color: #ffe4b4; } input[type=\"checkbox\"].color4 + label:before, input[type=\"radio\"].color4 + label:before { color: #353865; } input[type=\"checkbox\"] + label:before { border-radius: 0.25rem; } input[type=\"radio\"] + label:before { border-radius: 100%; } ::-webkit-input-placeholder { color: rgba(255, 255, 255, 0.5) !important; opacity: 1.0; } :-moz-placeholder { color: rgba(255, 255, 255, 0.5) !important; opacity: 1.0; } ::-moz-placeholder { color: rgba(255, 255, 255, 0.5) !important; opacity: 1.0; } :-ms-input-placeholder { color: rgba(255, 255, 255, 0.5) !important; opacity: 1.0; } /* Icon */ .icon { text-decoration: none; position: relative; border-bottom: none; } .icon:before { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; display: inline-block; font-style: normal; font-variant: normal; text-rendering: auto; line-height: 1; text-transform: none !important; font-family: 'Font Awesome 5 Free'; font-weight: 400; } .icon > .label { display: none; } .icon:before { line-height: inherit; } .icon.solid:before { font-weight: 900; } .icon.brands:before { font-family: 'Font Awesome 5 Brands'; } /* Image */ .image { display: inline-block; position: relative; border: 0; } .image.filtered:after { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; pointer-events: none; content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 1; z-index: 1; } .image.filtered.tinted:after { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)), linear-gradient(0deg, rgba(0, 0, 0, 0.125), rgba(0, 0, 0, 0.125)); background-size: 128px 128px, auto, auto; } .image[data-position] img { -moz-object-fit: cover; -webkit-object-fit: cover; -ms-object-fit: cover; object-fit: cover; display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; } .image[data-position=\"top left\"] img { -moz-object-position: top left; -webkit-object-position: top left; -ms-object-position: top left; object-position: top left; } .image[data-position=\"top\"] img { -moz-object-position: top; -webkit-object-position: top; -ms-object-position: top; object-position: top; } .image[data-position=\"top right\"] img { -moz-object-position: top right; -webkit-object-position: top right; -ms-object-position: top right; object-position: top right; } .image[data-position=\"right\"] img { -moz-object-position: right; -webkit-object-position: right; -ms-object-position: right; object-position: right; } .image[data-position=\"bottom right\"] img { -moz-object-position: bottom right; -webkit-object-position: bottom right; -ms-object-position: bottom right; object-position: bottom right; } .image[data-position=\"bottom\"] img { -moz-object-position: bottom; -webkit-object-position: bottom; -ms-object-position: bottom; object-position: bottom; } .image[data-position=\"bottom left\"] img { -moz-object-position: bottom left; -webkit-object-position: bottom left; -ms-object-position: bottom left; object-position: bottom left; } .image[data-position=\"left\"] img { -moz-object-position: left; -webkit-object-position: left; -ms-object-position: left; object-position: left; } .image[data-position=\"center\"] img { -moz-object-position: center; -webkit-object-position: center; -ms-object-position: center; object-position: center; } .image[data-position=\"25% 25%\"] img { -moz-object-position: 25% 25%; -webkit-object-position: 25% 25%; -ms-object-position: 25% 25%; object-position: 25% 25%; } .image[data-position=\"75% 25%\"] img { -moz-object-position: 75% 25%; -webkit-object-position: 75% 25%; -ms-object-position: 75% 25%; object-position: 75% 25%; } .image[data-position=\"75% 75%\"] img { -moz-object-position: 75% 75%; -webkit-object-position: 75% 75%; -ms-object-position: 75% 75%; object-position: 75% 75%; } .image[data-position=\"25% 75%\"] img { -moz-object-position: 25% 75%; -webkit-object-position: 25% 75%; -ms-object-position: 25% 75%; object-position: 25% 75%; } .image img { display: block; } .image.left, .image.right { max-width: 40%; } .image.left img, .image.right img { width: 100%; } .image.left { float: left; padding: 0 1.5rem 1rem 0; top: 0.25rem; } .image.right { float: right; padding: 0 0 1rem 1.5rem; top: 0.25rem; } .image.fit { display: block; margin: 0 0 1.5rem 0; width: 100%; } .image.fit img { width: 100%; } .image.main { display: block; margin: 0 0 2.25rem 0; width: 100%; } .image.main img { width: 100%; } /* List */ ol { list-style: decimal; margin: 0 0 1.5rem 0; padding-left: 1.25rem; } ol li { padding-left: 0.25rem; } ul { list-style: disc; margin: 0 0 1.5rem 0; padding-left: 1rem; } ul li { padding-left: 0.5rem; } ul.alt { list-style: none; padding-left: 0; } ul.alt li { border-top: solid 1px rgba(255, 255, 255, 0.25); padding: 0.5rem 0; } ul.alt li:first-child { border-top: 0; padding-top: 0; } dl { margin: 0 0 1.5rem 0; } dl dt { display: block; font-weight: 400; margin: 0 0 0.75rem 0; } dl dd { margin-left: 1.5rem; } /* Actions */ ul.actions { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; cursor: default; list-style: none; margin-left: -0.75rem; padding-left: 0; } ul.actions li { padding: 0 0 0 0.75rem; vertical-align: middle; } ul.actions.special { -moz-justify-content: center; -webkit-justify-content: center; -ms-justify-content: center; justify-content: center; width: 100%; margin-left: 0; } ul.actions.special li:first-child { padding-left: 0; } ul.actions.stacked { -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; margin-left: 0; } ul.actions.stacked li { padding: 0.975rem 0 0 0; } ul.actions.stacked li:first-child { padding-top: 0; } ul.actions.fit { width: calc(100% + 0.75rem); } ul.actions.fit li { -moz-flex-grow: 1; -webkit-flex-grow: 1; -ms-flex-grow: 1; flex-grow: 1; -moz-flex-shrink: 1; -webkit-flex-shrink: 1; -ms-flex-shrink: 1; flex-shrink: 1; width: 100%; } ul.actions.fit li > * { width: 100%; } ul.actions.fit.stacked { width: 100%; } /* Icons */ ul.icons { cursor: default; list-style: none; padding-left: 0; } ul.icons li { display: inline-block; padding: 0 1rem 0 0; } ul.icons li:last-child { padding-right: 0; } ul.icons li .icon:before { font-size: 1.25em; } /* Grid Icons */ ul.grid-icons { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-flex-wrap: wrap; -webkit-flex-wrap: wrap; -ms-flex-wrap: wrap; flex-wrap: wrap; -moz-justify-content: center; -webkit-justify-content: center; -ms-justify-content: center; justify-content: center; list-style: none; margin: 0 0 1.5rem 0; padding-left: 0; } ul.grid-icons .icon { display: block; position: relative; width: 100%; text-align: center; } ul.grid-icons .icon:before { display: block; width: 6rem; height: 6rem; line-height: 6rem; border-radius: 6rem; box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0.25); font-size: 2.5rem; margin: 0 auto; text-align: center; } body.is-ie ul.grid-icons .icon:before { line-height: 2.375; } ul.grid-icons > li { -moz-flex-grow: 0; -webkit-flex-grow: 0; -ms-flex-grow: 0; flex-grow: 0; -moz-flex-shrink: 0; -webkit-flex-shrink: 0; -ms-flex-shrink: 0; flex-shrink: 0; position: relative; margin: 1.5rem 0 0 1.5rem; padding-left: 0; } ul.grid-icons.connected > li:before { content: ''; display: block; position: absolute; width: 1.5rem; height: 2px; top: 50%; left: -1.5rem; background-color: rgba(255, 255, 255, 0.25); } ul.grid-icons.connected > li:after { content: ''; display: block; position: absolute; width: 2px; height: 1.5rem; top: -1.5rem; left: 50%; background-color: rgba(255, 255, 255, 0.25); } ul.grid-icons.two { width: 14rem; } ul.grid-icons.two > li:nth-child(-n + 2) { margin-top: 0; } ul.grid-icons.two > li:nth-child(-n + 2):after { display: none; } ul.grid-icons.two > li:nth-child(2n - 1) { margin-left: 0; } ul.grid-icons.two > li:nth-child(2n - 1):before { display: none; } ul.grid-icons.three { width: 21.5rem; } ul.grid-icons.three > li:nth-child(-n + 3) { margin-top: 0; } ul.grid-icons.three > li:nth-child(-n + 3):after { display: none; } ul.grid-icons.three > li:nth-child(3n - 2) { margin-left: 0; } ul.grid-icons.three > li:nth-child(3n - 2):before { display: none; } ul.grid-icons.four { width: 29rem; } ul.grid-icons.four > li:nth-child(-n + 4) { margin-top: 0; } ul.grid-icons.four > li:nth-child(-n + 4):after { display: none; } ul.grid-icons.four > li:nth-child(4n - 3) { margin-left: 0; } ul.grid-icons.four > li:nth-child(4n - 3):before { display: none; } @media screen and (max-width: 736px) { ul.grid-icons { -moz-justify-content: -moz-flex-start; -webkit-justify-content: -webkit-flex-start; -ms-justify-content: -ms-flex-start; justify-content: flex-start; width: 100% !important; margin: -1rem 0 1.5rem -1rem; } ul.grid-icons .icon:before { width: 4.5rem; height: 4.5rem; line-height: 4.5rem; font-size: 1.75rem; } ul.grid-icons > li { margin: 1rem 0 0 1rem !important; } ul.grid-icons > li:before { display: none !important; } ul.grid-icons > li:after { display: none !important; } } /* Contact Icons */ ul.contact-icons { list-style: none; padding-left: 0; } ul.contact-icons > li { margin: 1.25rem 0 0 0; padding-left: 0; } ul.contact-icons > li:before { display: inline-block; width: 2.25rem; height: 2.25rem; line-height: 2.25rem; border-radius: 2.25rem; background-color: white; color: #2e2b37; cursor: default; font-size: 1.125rem; margin-right: 1rem; text-align: center; vertical-align: middle; } body.is-ie ul.contact-icons > li:before { line-height: 2.125; } ul.contact-icons > li a { border-bottom: 0; } ul.contact-icons.color1 > li:before { color: #726193; } ul.contact-icons.color2 > li:before { color: #e37b7c; } ul.contact-icons.color3 > li:before { color: #ffe4b4; } ul.contact-icons.color4 > li:before { color: #353865; } /* Table */ .table-wrapper { -webkit-overflow-scrolling: touch; overflow-x: auto; } table { margin: 0 0 1.5rem 0; width: 100%; } table tbody tr { border: solid 1px rgba(255, 255, 255, 0.25); border-left: 0; border-right: 0; } table tbody tr:nth-child(2n + 1) { background-color: rgba(255, 255, 255, 0.075); } table td { padding: 0.75rem 0.75rem; } table th { color: rgba(255, 255, 255, 0.875); font-size: 0.9rem; font-weight: 400; padding: 0 0.75rem 0.75rem 0.75rem; text-align: left; } table thead { border-bottom: solid 2px rgba(255, 255, 255, 0.25); } table tfoot { border-top: solid 2px rgba(255, 255, 255, 0.25); } table.alt { border-collapse: separate; } table.alt tbody tr td { border: solid 1px rgba(255, 255, 255, 0.25); border-left-width: 0; border-top-width: 0; } table.alt tbody tr td:first-child { border-left-width: 1px; } table.alt tbody tr:first-child td { border-top-width: 1px; } table.alt thead { border-bottom: 0; } table.alt tfoot { border-top: 0; } /* Button */ input[type=\"submit\"], input[type=\"reset\"], input[type=\"button\"], button, .button { -moz-appearance: none; -webkit-appearance: none; -ms-appearance: none; appearance: none; -moz-transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, color 0.2s ease-in-out; -webkit-transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, color 0.2s ease-in-out; -ms-transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, color 0.2s ease-in-out; transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, color 0.2s ease-in-out; background-color: transparent; border: 0; border-radius: 0.25rem; box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0.25); color: rgba(255, 255, 255, 0.875) !important; cursor: pointer; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 0.6rem; font-weight: 700; height: 2.75rem; letter-spacing: 0.15rem; line-height: 2.75rem; padding: 0 1.5rem 0 1.65rem; text-align: center; text-decoration: none; text-transform: uppercase; white-space: nowrap; } input[type=\"submit\"]:hover, input[type=\"reset\"]:hover, input[type=\"button\"]:hover, button:hover, .button:hover { box-shadow: inset 0 0 0 2px #ffe4b4; color: #ffe4b4 !important; } input[type=\"submit\"]:active, input[type=\"reset\"]:active, input[type=\"button\"]:active, button:active, .button:active { background-color: rgba(255, 228, 180, 0.125); } input[type=\"submit\"].icon:before, input[type=\"reset\"].icon:before, input[type=\"button\"].icon:before, button.icon:before, .button.icon:before { display: inline-block; position: relative; top: -0.075rem; vertical-align: middle; font-size: 0.8rem; margin: 0 0.375rem 0 -0.325rem; } input[type=\"submit\"].icon.circle, input[type=\"reset\"].icon.circle, input[type=\"button\"].icon.circle, button.icon.circle, .button.icon.circle { position: relative; width: 3.125rem; height: 3.125rem; line-height: 3.125rem; text-indent: 3.125rem; border-radius: 100%; overflow: hidden; padding: 0; letter-spacing: 0; } input[type=\"submit\"].icon.circle:before, input[type=\"reset\"].icon.circle:before, input[type=\"button\"].icon.circle:before, button.icon.circle:before, .button.icon.circle:before { display: block; position: absolute; top: 0; left: 0; width: inherit; height: inherit; font-size: 1.25rem; line-height: inherit; margin: 0; text-indent: 0; } input[type=\"submit\"].icon.circle.fa-angle-left:before, input[type=\"reset\"].icon.circle.fa-angle-left:before, input[type=\"button\"].icon.circle.fa-angle-left:before, button.icon.circle.fa-angle-left:before, .button.icon.circle.fa-angle-left:before { position: relative; left: -0.1rem; font-size: 1.75rem; } input[type=\"submit\"].icon.circle.fa-angle-right:before, input[type=\"reset\"].icon.circle.fa-angle-right:before, input[type=\"button\"].icon.circle.fa-angle-right:before, button.icon.circle.fa-angle-right:before, .button.icon.circle.fa-angle-right:before { position: relative; left: 0.1rem; font-size: 1.75rem; } input[type=\"submit\"].fit, input[type=\"reset\"].fit, input[type=\"button\"].fit, button.fit, .button.fit { width: 100%; } input[type=\"submit\"].small, input[type=\"reset\"].small, input[type=\"button\"].small, button.small, .button.small { font-size: 0.4rem; height: 1.875rem; line-height: 1.875rem; padding: 0 1.25rem 0 1.4rem; } input[type=\"submit\"].large, input[type=\"reset\"].large, input[type=\"button\"].large, button.large, .button.large { font-size: 0.8rem; height: 3.3125rem; line-height: 3.3125rem; padding: 0 2rem 0 2.15rem; } input[type=\"submit\"].primary, input[type=\"reset\"].primary, input[type=\"button\"].primary, button.primary, .button.primary { background-color: white; box-shadow: none; color: #2e2b37 !important; } input[type=\"submit\"].primary.color1, input[type=\"reset\"].primary.color1, input[type=\"button\"].primary.color1, button.primary.color1, .button.primary.color1 { color: #726193 !important; } input[type=\"submit\"].primary.color2, input[type=\"reset\"].primary.color2, input[type=\"button\"].primary.color2, button.primary.color2, .button.primary.color2 { color: #e37b7c !important; } input[type=\"submit\"].primary.color3, input[type=\"reset\"].primary.color3, input[type=\"button\"].primary.color3, button.primary.color3, .button.primary.color3 { color: #ffe4b4 !important; } input[type=\"submit\"].primary.color4, input[type=\"reset\"].primary.color4, input[type=\"button\"].primary.color4, button.primary.color4, .button.primary.color4 { color: #353865 !important; } input[type=\"submit\"].primary:hover, input[type=\"reset\"].primary:hover, input[type=\"button\"].primary:hover, button.primary:hover, .button.primary:hover { background-color: #ffe4b4; } input[type=\"submit\"].primary:active, input[type=\"reset\"].primary:active, input[type=\"button\"].primary:active, button.primary:active, .button.primary:active { background-color: #fdd997; } input[type=\"submit\"].disabled, input[type=\"submit\"]:disabled, input[type=\"reset\"].disabled, input[type=\"reset\"]:disabled, input[type=\"button\"].disabled, input[type=\"button\"]:disabled, button.disabled, button:disabled, .button.disabled, .button:disabled { pointer-events: none; cursor: default; opacity: 0.5; } /* Gallery */ @-moz-keyframes gallery-modal-spinner { 0% { -moz-transform: rotate(0deg); -webkit-transform: rotate(0deg); -ms-transform: rotate(0deg); transform: rotate(0deg); } 100% { -moz-transform: rotate(360deg); -webkit-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg); } } @-webkit-keyframes gallery-modal-spinner { 0% { -moz-transform: rotate(0deg); -webkit-transform: rotate(0deg); -ms-transform: rotate(0deg); transform: rotate(0deg); } 100% { -moz-transform: rotate(360deg); -webkit-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg); } } @-ms-keyframes gallery-modal-spinner { 0% { -moz-transform: rotate(0deg); -webkit-transform: rotate(0deg); -ms-transform: rotate(0deg); transform: rotate(0deg); } 100% { -moz-transform: rotate(360deg); -webkit-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes gallery-modal-spinner { 0% { -moz-transform: rotate(0deg); -webkit-transform: rotate(0deg); -ms-transform: rotate(0deg); transform: rotate(0deg); } 100% { -moz-transform: rotate(360deg); -webkit-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg); } } .gallery { -moz-align-items: -moz-stretch; -webkit-align-items: -webkit-stretch; -ms-align-items: -ms-stretch; align-items: stretch; display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; height: 100%; } .gallery > * { width: 20rem; height: 100%; } .gallery .image { display: block; position: relative; border-bottom: 0; overflow: hidden; } .gallery .image img { -moz-transition: -moz-transform 0.2s ease-in-out; -webkit-transition: -webkit-transform 0.2s ease-in-out; -ms-transition: -ms-transform 0.2s ease-in-out; transition: transform 0.2s ease-in-out; } .gallery .image:after { -moz-transition: opacity 0.2s ease-in-out; -webkit-transition: opacity 0.2s ease-in-out; -ms-transition: opacity 0.2s ease-in-out; transition: opacity 0.2s ease-in-out; } .gallery .image:hover img { -moz-transform: scale(1.025); -webkit-transform: scale(1.025); -ms-transform: scale(1.025); transform: scale(1.025); } .gallery .image:hover:after { opacity: 0; } .gallery .group { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-flex-wrap: wrap; -webkit-flex-wrap: wrap; -ms-flex-wrap: wrap; flex-wrap: wrap; } .gallery .group > * { height: 50%; } .gallery .modal { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-align-items: center; -webkit-align-items: center; -ms-align-items: center; align-items: center; -moz-justify-content: center; -webkit-justify-content: center; -ms-justify-content: center; justify-content: center; pointer-events: none; -moz-user-select: none; -webkit-user-select: none; -ms-user-select: none; user-select: none; -moz-transition: opacity 0.5s ease, visibility 0.5s, z-index 0.5s; -webkit-transition: opacity 0.5s ease, visibility 0.5s, z-index 0.5s; -ms-transition: opacity 0.5s ease, visibility 0.5s, z-index 0.5s; transition: opacity 0.5s ease, visibility 0.5s, z-index 0.5s; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(46, 43, 55, 0.875); opacity: 0; outline: 0; visibility: none; z-index: 0; } .gallery .modal:before { -moz-animation: gallery-modal-spinner 1s infinite linear; -webkit-animation: gallery-modal-spinner 1s infinite linear; -ms-animation: gallery-modal-spinner 1s infinite linear; animation: gallery-modal-spinner 1s infinite linear; -moz-transition: opacity 0.25s ease; -webkit-transition: opacity 0.25s ease; -ms-transition: opacity 0.25s ease; transition: opacity 0.25s ease; -moz-transition-delay: 0.5s; -webkit-transition-delay: 0.5s; -ms-transition-delay: 0.5s; transition-delay: 0.5s; content: ''; display: block; position: absolute; top: 50%; left: 50%; width: 4rem; height: 4rem; margin: -2rem 0 0 -2rem; background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='96px' height='96px' viewBox='0 0 96 96' zoomAndPan='disable'%3E%3Cstyle%3Ecircle %7Bfill: transparent%3B stroke: rgba(255, 255, 255, 0.875)%3B stroke-width: 1.5px%3B %7D%3C/style%3E%3Cdefs%3E%3CclipPath id='corner'%3E%3Cpolygon points='0,0 48,0 48,48 96,48 96,96 0,96' /%3E%3C/clipPath%3E%3C/defs%3E%3Cg clip-path='url(%23corner)'%3E%3Ccircle cx='48' cy='48' r='32'/%3E%3C/g%3E%3C/svg%3E\"); background-position: center; background-repeat: no-repeat; background-size: 4rem; opacity: 0; } .gallery .modal:after { content: ''; display: block; position: absolute; top: 0.5rem; right: 0.5rem; width: 4rem; height: 4rem; background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='64px' height='64px' viewBox='0 0 64 64' zoomAndPan='disable'%3E%3Cstyle%3Eline %7Bstroke: rgba(255, 255, 255, 0.875)%3Bstroke-width: 1.5px%3B%7D%3C/style%3E%3Cline x1='20' y1='20' x2='44' y2='44' /%3E%3Cline x1='20' y1='44' x2='44' y2='20' /%3E%3C/svg%3E\"); background-position: center; background-repeat: no-repeat; background-size: 3rem; cursor: pointer; } .gallery .modal .inner { -moz-transform: translateY(0.75rem); -webkit-transform: translateY(0.75rem); -ms-transform: translateY(0.75rem); transform: translateY(0.75rem); -moz-transition: opacity 0.25s ease, -moz-transform 0.25s ease; -webkit-transition: opacity 0.25s ease, -webkit-transform 0.25s ease; -ms-transition: opacity 0.25s ease, -ms-transform 0.25s ease; transition: opacity 0.25s ease, transform 0.25s ease; opacity: 0; } .gallery .modal .inner img { display: block; max-width: 90vw; max-height: 85vh; box-shadow: 0 1rem 3rem 0 rgba(0, 0, 0, 0.35); } .gallery .modal.visible { pointer-events: auto; opacity: 1; visibility: visible; z-index: 11000; } .gallery .modal.visible:before { opacity: 1; } .gallery .modal.loaded .inner { -moz-transform: translateY(0); -webkit-transform: translateY(0); -ms-transform: translateY(0); transform: translateY(0); -moz-transition: opacity 0.5s ease, -moz-transform 0.5s ease; -webkit-transition: opacity 0.5s ease, -webkit-transform 0.5s ease; -ms-transition: opacity 0.5s ease, -ms-transform 0.5s ease; transition: opacity 0.5s ease, transform 0.5s ease; opacity: 1; } .gallery .modal.loaded:before { -moz-transition-delay: 0s; -webkit-transition-delay: 0s; -ms-transition-delay: 0s; transition-delay: 0s; opacity: 0; } @media screen and (max-width: 980px) { .gallery .modal .inner img { max-width: 100vw; } } @media screen and (max-width: 736px) { .gallery { -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; height: auto; } .gallery > * { height: auto; width: 100%; } .gallery .image { width: 100%; height: 40rem; } .gallery .group .span-0-25 { width: 8.33333%; } .gallery .group .span-0-5 { width: 16.66666%; } .gallery .group .span-0-75 { width: 25.0%; } .gallery .group .span-1 { width: 33.33333%; } .gallery .group .span-1-25 { width: 41.66666%; } .gallery .group .span-1-5 { width: 49.99999%; } .gallery .group .span-1-75 { width: 58.33333%; } .gallery .group .span-2 { width: 66.66666%; } .gallery .group .span-2-25 { width: 74.99999%; } .gallery .group .span-2-5 { width: 83.33332%; } .gallery .group .span-2-75 { width: 91.66666%; } .gallery .group .span-3 { width: 99.99999%; } .gallery .group .span-3-25 { width: 108.33332%; } .gallery .group .span-3-5 { width: 116.66665%; } .gallery .group .span-3-75 { width: 124.99999%; } .gallery .group .span-4 { width: 133.33332%; } .gallery .group .span-4-25 { width: 141.66665%; } .gallery .group .span-4-5 { width: 149.99998%; } .gallery .group .span-4-75 { width: 158.33332%; } .gallery .group .span-5 { width: 166.66665%; } .gallery .group .span-5-25 { width: 174.99998%; } .gallery .group .span-5-5 { width: 183.33331%; } .gallery .group .span-5-75 { width: 191.66665%; } .gallery .group .span-6 { width: 199.99998%; } .gallery .group .span-6-25 { width: 208.33331%; } .gallery .group .span-6-5 { width: 216.66664%; } .gallery .group .span-6-75 { width: 224.99998%; } .gallery .group .span-7 { width: 233.33331%; } .gallery .group .span-7-25 { width: 241.66664%; } .gallery .group .span-7-5 { width: 249.99997%; } .gallery .group .span-7-75 { width: 258.33331%; } .gallery .group .span-8 { width: 266.66664%; } .gallery .group .span-8-25 { width: 274.99997%; } .gallery .group .span-8-5 { width: 283.3333%; } .gallery .group .span-8-75 { width: 291.66664%; } .gallery .group .span-9 { width: 299.99997%; } .gallery .group .span-9-25 { width: 308.3333%; } .gallery .group .span-9-5 { width: 316.66663%; } .gallery .group .span-9-75 { width: 324.99997%; } .gallery .group .span-10 { width: 333.3333%; } .gallery .group .image { height: 20rem; } } @media screen and (max-width: 480px) { .gallery .image { height: 30rem; } .gallery .group .image { height: 12.5rem; } } /* Panel */ .panel { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-flex-grow: 0; -webkit-flex-grow: 0; -ms-flex-grow: 0; flex-grow: 0; -moz-flex-shrink: 0; -webkit-flex-shrink: 0; -ms-flex-shrink: 0; flex-shrink: 0; -moz-justify-content: center; -webkit-justify-content: center; -ms-justify-content: center; justify-content: center; -moz-align-items: -moz-stretch; -webkit-align-items: -webkit-stretch; -ms-align-items: -ms-stretch; align-items: stretch; height: 100%; overflow-x: hidden; overflow-y: auto; } .panel > * { position: relative; min-width: 10rem; } .panel > *.color0 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, #726193 20%, #e37b7c 60%, #ffe4b4); background-size: 128px 128px, auto; } .panel > *.color1 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #726193; } .panel > *.color2 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #e37b7c; } .panel > *.color3 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #ffe4b4; } .panel > *.color4 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #353865; } .panel > *.color1-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #6c5e86; } .panel > *.color2-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #de7172; } .panel > *.color3-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #fedea6; } .panel > *.color4-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #323459; } .panel > .intro { padding: 3.5rem 3.5rem 2rem 3.5rem ; display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-flex-grow: 0; -webkit-flex-grow: 0; -ms-flex-grow: 0; flex-grow: 0; -moz-flex-shrink: 0; -webkit-flex-shrink: 0; -ms-flex-shrink: 0; flex-shrink: 0; -moz-justify-content: center; -webkit-justify-content: center; -ms-justify-content: center; justify-content: center; -moz-align-items: -moz-flex-start; -webkit-align-items: -webkit-flex-start; -ms-align-items: -ms-flex-start; align-items: flex-start; -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; width: 22rem; } .panel > .intro.joined { width: 18.5rem; padding-right: 0; } .panel > .intro.joined + .inner { padding-left: 2.625rem; } .panel > .inner { padding: 3.5rem 3.5rem 2rem 3.5rem ; display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-flex-grow: 1; -webkit-flex-grow: 1; -ms-flex-grow: 1; flex-grow: 1; -moz-flex-shrink: 1; -webkit-flex-shrink: 1; -ms-flex-shrink: 1; flex-shrink: 1; -moz-justify-content: center; -webkit-justify-content: center; -ms-justify-content: center; justify-content: center; -moz-align-items: -moz-flex-start; -webkit-align-items: -webkit-flex-start; -ms-align-items: -ms-flex-start; align-items: flex-start; -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; position: relative; width: 100%; } .panel > .inner.columns { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-justify-content: center; -webkit-justify-content: center; -ms-justify-content: center; justify-content: center; -moz-align-items: center; -webkit-align-items: center; -ms-align-items: center; align-items: center; -moz-flex-direction: row; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; } .panel > .inner.columns > * { -moz-flex-grow: 0; -webkit-flex-grow: 0; -ms-flex-grow: 0; flex-grow: 0; -moz-flex-shrink: 0; -webkit-flex-shrink: 0; -ms-flex-shrink: 0; flex-shrink: 0; margin-left: 3.5rem; } .panel > .inner.columns > :first-child { margin-left: 0; } .panel > .inner.columns.divided > * { margin-left: 7rem; } .panel > .inner.columns.divided > *:before { content: ''; position: absolute; top: 3.5rem; width: 2px; height: calc(100% - 7rem); margin-left: -3.5rem; background-color: rgba(255, 255, 255, 0.25); } .panel > .inner.columns.divided > :first-child { margin-left: 0; } .panel > .inner.columns.divided > :first-child:before { display: none; } .panel > .inner.columns.aligned { -moz-align-items: -moz-flex-start; -webkit-align-items: -webkit-flex-start; -ms-align-items: -ms-flex-start; align-items: flex-start; } .panel .span-0-25 { width: 2.5rem; } .panel .span-0-5 { width: 5rem; } .panel .span-0-75 { width: 7.5rem; } .panel .span-1 { width: 10rem; } .panel .span-1-25 { width: 12.5rem; } .panel .span-1-5 { width: 15rem; } .panel .span-1-75 { width: 17.5rem; } .panel .span-2 { width: 20rem; } .panel .span-2-25 { width: 22.5rem; } .panel .span-2-5 { width: 25rem; } .panel .span-2-75 { width: 27.5rem; } .panel .span-3 { width: 30rem; } .panel .span-3-25 { width: 32.5rem; } .panel .span-3-5 { width: 35rem; } .panel .span-3-75 { width: 37.5rem; } .panel .span-4 { width: 40rem; } .panel .span-4-25 { width: 42.5rem; } .panel .span-4-5 { width: 45rem; } .panel .span-4-75 { width: 47.5rem; } .panel .span-5 { width: 50rem; } .panel .span-5-25 { width: 52.5rem; } .panel .span-5-5 { width: 55rem; } .panel .span-5-75 { width: 57.5rem; } .panel .span-6 { width: 60rem; } .panel .span-6-25 { width: 62.5rem; } .panel .span-6-5 { width: 65rem; } .panel .span-6-75 { width: 67.5rem; } .panel .span-7 { width: 70rem; } .panel .span-7-25 { width: 72.5rem; } .panel .span-7-5 { width: 75rem; } .panel .span-7-75 { width: 77.5rem; } .panel .span-8 { width: 80rem; } .panel .span-8-25 { width: 82.5rem; } .panel .span-8-5 { width: 85rem; } .panel .span-8-75 { width: 87.5rem; } .panel .span-9 { width: 90rem; } .panel .span-9-25 { width: 92.5rem; } .panel .span-9-5 { width: 95rem; } .panel .span-9-75 { width: 97.5rem; } .panel .span-10 { width: 100rem; } .panel.small { width: 35rem; } .panel.medium { width: 50rem; } .panel.large { width: 65rem; } .panel.small .span-0-25, .panel.medium .span-0-25, .panel.large .span-0-25 { width: 2.5%; } .panel.small .span-0-5, .panel.medium .span-0-5, .panel.large .span-0-5 { width: 5%; } .panel.small .span-0-75, .panel.medium .span-0-75, .panel.large .span-0-75 { width: 7.5%; } .panel.small .span-1, .panel.medium .span-1, .panel.large .span-1 { width: 10%; } .panel.small .span-1-25, .panel.medium .span-1-25, .panel.large .span-1-25 { width: 12.5%; } .panel.small .span-1-5, .panel.medium .span-1-5, .panel.large .span-1-5 { width: 15%; } .panel.small .span-1-75, .panel.medium .span-1-75, .panel.large .span-1-75 { width: 17.5%; } .panel.small .span-2, .panel.medium .span-2, .panel.large .span-2 { width: 20%; } .panel.small .span-2-25, .panel.medium .span-2-25, .panel.large .span-2-25 { width: 22.5%; } .panel.small .span-2-5, .panel.medium .span-2-5, .panel.large .span-2-5 { width: 25%; } .panel.small .span-2-75, .panel.medium .span-2-75, .panel.large .span-2-75 { width: 27.5%; } .panel.small .span-3, .panel.medium .span-3, .panel.large .span-3 { width: 30%; } .panel.small .span-3-25, .panel.medium .span-3-25, .panel.large .span-3-25 { width: 32.5%; } .panel.small .span-3-5, .panel.medium .span-3-5, .panel.large .span-3-5 { width: 35%; } .panel.small .span-3-75, .panel.medium .span-3-75, .panel.large .span-3-75 { width: 37.5%; } .panel.small .span-4, .panel.medium .span-4, .panel.large .span-4 { width: 40%; } .panel.small .span-4-25, .panel.medium .span-4-25, .panel.large .span-4-25 { width: 42.5%; } .panel.small .span-4-5, .panel.medium .span-4-5, .panel.large .span-4-5 { width: 45%; } .panel.small .span-4-75, .panel.medium .span-4-75, .panel.large .span-4-75 { width: 47.5%; } .panel.small .span-5, .panel.medium .span-5, .panel.large .span-5 { width: 50%; } .panel.small .span-5-25, .panel.medium .span-5-25, .panel.large .span-5-25 { width: 52.5%; } .panel.small .span-5-5, .panel.medium .span-5-5, .panel.large .span-5-5 { width: 55%; } .panel.small .span-5-75, .panel.medium .span-5-75, .panel.large .span-5-75 { width: 57.5%; } .panel.small .span-6, .panel.medium .span-6, .panel.large .span-6 { width: 60%; } .panel.small .span-6-25, .panel.medium .span-6-25, .panel.large .span-6-25 { width: 62.5%; } .panel.small .span-6-5, .panel.medium .span-6-5, .panel.large .span-6-5 { width: 65%; } .panel.small .span-6-75, .panel.medium .span-6-75, .panel.large .span-6-75 { width: 67.5%; } .panel.small .span-7, .panel.medium .span-7, .panel.large .span-7 { width: 70%; } .panel.small .span-7-25, .panel.medium .span-7-25, .panel.large .span-7-25 { width: 72.5%; } .panel.small .span-7-5, .panel.medium .span-7-5, .panel.large .span-7-5 { width: 75%; } .panel.small .span-7-75, .panel.medium .span-7-75, .panel.large .span-7-75 { width: 77.5%; } .panel.small .span-8, .panel.medium .span-8, .panel.large .span-8 { width: 80%; } .panel.small .span-8-25, .panel.medium .span-8-25, .panel.large .span-8-25 { width: 82.5%; } .panel.small .span-8-5, .panel.medium .span-8-5, .panel.large .span-8-5 { width: 85%; } .panel.small .span-8-75, .panel.medium .span-8-75, .panel.large .span-8-75 { width: 87.5%; } .panel.small .span-9, .panel.medium .span-9, .panel.large .span-9 { width: 90%; } .panel.small .span-9-25, .panel.medium .span-9-25, .panel.large .span-9-25 { width: 92.5%; } .panel.small .span-9-5, .panel.medium .span-9-5, .panel.large .span-9-5 { width: 95%; } .panel.small .span-9-75, .panel.medium .span-9-75, .panel.large .span-9-75 { width: 97.5%; } .panel.small .span-10, .panel.medium .span-10, .panel.large .span-10 { width: 100%; } .panel.color0 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, #726193 20%, #e37b7c 60%, #ffe4b4); background-size: 128px 128px, auto; } .panel.color1 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #726193; } .panel.color2 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #e37b7c; } .panel.color3 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #ffe4b4; } .panel.color4 { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #353865; } .panel.color1-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #6c5e86; } .panel.color2-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #de7172; } .panel.color3-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #fedea6; } .panel.color4-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(45deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #323459; } @media screen and (max-width: 736px) { .panel { -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; height: auto; } .panel > *.color1 { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #726193; } .panel > *.color2 { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #e37b7c; } .panel > *.color3 { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #ffe4b4; } .panel > *.color4 { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #353865; } .panel > *.color1-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #6c5e86; } .panel > *.color2-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #de7172; } .panel > *.color3-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #fedea6; } .panel > *.color4-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #323459; } .panel > .intro { padding: 2.8875rem 1.75rem 1.3875rem 1.75rem ; width: 100% !important; } .panel > .intro.joined { padding-bottom: 0; padding-right: 1.75rem; } .panel > .intro.joined + .inner { padding-top: 0; padding-left: 1.75rem; } .panel > .inner { padding: 2.8875rem 1.75rem 1.3875rem 1.75rem ; } .panel > .inner.columns { -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; } .panel > .inner.columns > * { margin-left: 0; margin-top: 0; } .panel > .inner.columns > :first-child { margin-top: 0; } .panel > .inner.columns.divided > * { margin-left: 0; margin-top: 3.5rem; } .panel > .inner.columns.divided > *:before { content: ''; position: absolute; top: auto; left: 1.75rem; width: calc(100% - 3.5rem); height: 2px; margin-left: 0; margin-top: -1.75rem; } .panel > .inner.columns.divided > :first-child { margin-top: 0; } .panel .span-0-25 { width: 100%; } .panel .span-0-5 { width: 100%; } .panel .span-0-75 { width: 100%; } .panel .span-1 { width: 100%; } .panel .span-1-25 { width: 100%; } .panel .span-1-5 { width: 100%; } .panel .span-1-75 { width: 100%; } .panel .span-2 { width: 100%; } .panel .span-2-25 { width: 100%; } .panel .span-2-5 { width: 100%; } .panel .span-2-75 { width: 100%; } .panel .span-3 { width: 100%; } .panel .span-3-25 { width: 100%; } .panel .span-3-5 { width: 100%; } .panel .span-3-75 { width: 100%; } .panel .span-4 { width: 100%; } .panel .span-4-25 { width: 100%; } .panel .span-4-5 { width: 100%; } .panel .span-4-75 { width: 100%; } .panel .span-5 { width: 100%; } .panel .span-5-25 { width: 100%; } .panel .span-5-5 { width: 100%; } .panel .span-5-75 { width: 100%; } .panel .span-6 { width: 100%; } .panel .span-6-25 { width: 100%; } .panel .span-6-5 { width: 100%; } .panel .span-6-75 { width: 100%; } .panel .span-7 { width: 100%; } .panel .span-7-25 { width: 100%; } .panel .span-7-5 { width: 100%; } .panel .span-7-75 { width: 100%; } .panel .span-8 { width: 100%; } .panel .span-8-25 { width: 100%; } .panel .span-8-5 { width: 100%; } .panel .span-8-75 { width: 100%; } .panel .span-9 { width: 100%; } .panel .span-9-25 { width: 100%; } .panel .span-9-5 { width: 100%; } .panel .span-9-75 { width: 100%; } .panel .span-10 { width: 100%; } .panel.small, .panel.medium, .panel.large { width: 100% !important; } .panel.small .span-0-25, .panel.medium .span-0-25, .panel.large .span-0-25 { width: 100%; } .panel.small .span-0-5, .panel.medium .span-0-5, .panel.large .span-0-5 { width: 100%; } .panel.small .span-0-75, .panel.medium .span-0-75, .panel.large .span-0-75 { width: 100%; } .panel.small .span-1, .panel.medium .span-1, .panel.large .span-1 { width: 100%; } .panel.small .span-1-25, .panel.medium .span-1-25, .panel.large .span-1-25 { width: 100%; } .panel.small .span-1-5, .panel.medium .span-1-5, .panel.large .span-1-5 { width: 100%; } .panel.small .span-1-75, .panel.medium .span-1-75, .panel.large .span-1-75 { width: 100%; } .panel.small .span-2, .panel.medium .span-2, .panel.large .span-2 { width: 100%; } .panel.small .span-2-25, .panel.medium .span-2-25, .panel.large .span-2-25 { width: 100%; } .panel.small .span-2-5, .panel.medium .span-2-5, .panel.large .span-2-5 { width: 100%; } .panel.small .span-2-75, .panel.medium .span-2-75, .panel.large .span-2-75 { width: 100%; } .panel.small .span-3, .panel.medium .span-3, .panel.large .span-3 { width: 100%; } .panel.small .span-3-25, .panel.medium .span-3-25, .panel.large .span-3-25 { width: 100%; } .panel.small .span-3-5, .panel.medium .span-3-5, .panel.large .span-3-5 { width: 100%; } .panel.small .span-3-75, .panel.medium .span-3-75, .panel.large .span-3-75 { width: 100%; } .panel.small .span-4, .panel.medium .span-4, .panel.large .span-4 { width: 100%; } .panel.small .span-4-25, .panel.medium .span-4-25, .panel.large .span-4-25 { width: 100%; } .panel.small .span-4-5, .panel.medium .span-4-5, .panel.large .span-4-5 { width: 100%; } .panel.small .span-4-75, .panel.medium .span-4-75, .panel.large .span-4-75 { width: 100%; } .panel.small .span-5, .panel.medium .span-5, .panel.large .span-5 { width: 100%; } .panel.small .span-5-25, .panel.medium .span-5-25, .panel.large .span-5-25 { width: 100%; } .panel.small .span-5-5, .panel.medium .span-5-5, .panel.large .span-5-5 { width: 100%; } .panel.small .span-5-75, .panel.medium .span-5-75, .panel.large .span-5-75 { width: 100%; } .panel.small .span-6, .panel.medium .span-6, .panel.large .span-6 { width: 100%; } .panel.small .span-6-25, .panel.medium .span-6-25, .panel.large .span-6-25 { width: 100%; } .panel.small .span-6-5, .panel.medium .span-6-5, .panel.large .span-6-5 { width: 100%; } .panel.small .span-6-75, .panel.medium .span-6-75, .panel.large .span-6-75 { width: 100%; } .panel.small .span-7, .panel.medium .span-7, .panel.large .span-7 { width: 100%; } .panel.small .span-7-25, .panel.medium .span-7-25, .panel.large .span-7-25 { width: 100%; } .panel.small .span-7-5, .panel.medium .span-7-5, .panel.large .span-7-5 { width: 100%; } .panel.small .span-7-75, .panel.medium .span-7-75, .panel.large .span-7-75 { width: 100%; } .panel.small .span-8, .panel.medium .span-8, .panel.large .span-8 { width: 100%; } .panel.small .span-8-25, .panel.medium .span-8-25, .panel.large .span-8-25 { width: 100%; } .panel.small .span-8-5, .panel.medium .span-8-5, .panel.large .span-8-5 { width: 100%; } .panel.small .span-8-75, .panel.medium .span-8-75, .panel.large .span-8-75 { width: 100%; } .panel.small .span-9, .panel.medium .span-9, .panel.large .span-9 { width: 100%; } .panel.small .span-9-25, .panel.medium .span-9-25, .panel.large .span-9-25 { width: 100%; } .panel.small .span-9-5, .panel.medium .span-9-5, .panel.large .span-9-5 { width: 100%; } .panel.small .span-9-75, .panel.medium .span-9-75, .panel.large .span-9-75 { width: 100%; } .panel.small .span-10, .panel.medium .span-10, .panel.large .span-10 { width: 100%; } .panel.color1 { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #726193; } .panel.color2 { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #e37b7c; } .panel.color3 { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #ffe4b4; } .panel.color4 { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.25) 25%, rgba(227, 123, 124, 0.25) 50%, rgba(255, 228, 180, 0.25)); background-size: 128px 128px, auto; background-color: #353865; } .panel.color1-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #6c5e86; } .panel.color2-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #de7172; } .panel.color3-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #fedea6; } .panel.color4-alt { background-image: url(\"../../images/overlay.png\"), linear-gradient(135deg, rgba(114, 97, 147, 0.175) 25%, rgba(227, 123, 124, 0.175) 50%, rgba(255, 228, 180, 0.175)); background-size: 128px 128px, auto; background-color: #323459; } } /* Panel (Banner) */ .panel.banner { -moz-align-items: -moz-stretch; -webkit-align-items: -webkit-stretch; -ms-align-items: -ms-stretch; align-items: stretch; } .panel.banner .content { padding: 3.5rem 3.5rem 2rem 3.5rem ; display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; -moz-justify-content: center; -webkit-justify-content: center; -ms-justify-content: center; justify-content: center; -moz-flex-grow: 0; -webkit-flex-grow: 0; -ms-flex-grow: 0; flex-grow: 0; -moz-flex-shrink: 0; -webkit-flex-shrink: 0; -ms-flex-shrink: 0; flex-shrink: 0; } .panel.banner .content > .actions:last-child { margin-bottom: 0; } .panel.banner .image { -moz-flex-grow: 0; -webkit-flex-grow: 0; -ms-flex-grow: 0; flex-grow: 0; -moz-flex-shrink: 0; -webkit-flex-shrink: 0; -ms-flex-shrink: 0; flex-shrink: 0; position: relative; } .panel.banner .image img { -moz-object-fit: cover; -webkit-object-fit: cover; -ms-object-fit: cover; object-fit: cover; display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; } .panel.banner.left { -moz-flex-direction: row; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; } .panel.banner.right { -moz-flex-direction: row-reverse; -webkit-flex-direction: row-reverse; -ms-flex-direction: row-reverse; flex-direction: row-reverse; } @media screen and (max-width: 736px) { .panel.banner .content { padding: 2.8875rem 1.75rem 1.3875rem 1.75rem ; -moz-flex-basis: 60%; -webkit-flex-basis: 60%; -ms-flex-basis: 60%; flex-basis: 60%; } .panel.banner .content > .actions:last-child { margin-bottom: 1.5rem; } .panel.banner .image { -moz-flex-basis: 40%; -webkit-flex-basis: 40%; -ms-flex-basis: 40%; flex-basis: 40%; } } @media screen and (max-width: 736px) and (orientation: portrait) { .panel.banner .content { -moz-flex-basis: auto; -webkit-flex-basis: auto; -ms-flex-basis: auto; flex-basis: auto; } .panel.banner .image { -moz-flex-basis: auto; -webkit-flex-basis: auto; -ms-flex-basis: auto; flex-basis: auto; height: 18rem; } .panel.banner.left { -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; } .panel.banner.right { -moz-flex-direction: column-reverse; -webkit-flex-direction: column-reverse; -ms-flex-direction: column-reverse; flex-direction: column-reverse; } } /* Panel (Spotlight) */ .panel.spotlight { -moz-align-items: -moz-stretch; -webkit-align-items: -webkit-stretch; -ms-align-items: -ms-stretch; align-items: stretch; position: relative; } .panel.spotlight > * { z-index: 1; } .panel.spotlight .content { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; -moz-justify-content: center; -webkit-justify-content: center; -ms-justify-content: center; justify-content: center; padding: 3.5rem 3.5rem 2rem 3.5rem ; } .panel.spotlight .image { position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 0; } .panel.spotlight .image img { -moz-object-fit: cover; -webkit-object-fit: cover; -ms-object-fit: cover; object-fit: cover; display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; } .panel.spotlight.left { -moz-justify-content: -moz-flex-start; -webkit-justify-content: -webkit-flex-start; -ms-justify-content: -ms-flex-start; justify-content: flex-start; } .panel.spotlight.left .content { background-image: linear-gradient(-90deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.125) 30%, rgba(0, 0, 0, 0.175) 50%); } .panel.spotlight.right { -moz-justify-content: -moz-flex-end; -webkit-justify-content: -webkit-flex-end; -ms-justify-content: -ms-flex-end; justify-content: flex-end; } .panel.spotlight.right .content { background-image: linear-gradient(90deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.125) 30%, rgba(0, 0, 0, 0.175) 50%); } @media screen and (max-width: 736px) { .panel.spotlight .content { padding: 2.8875rem 1.75rem 1.3875rem 1.75rem ; -moz-flex-direction: column !important; -webkit-flex-direction: column !important; -ms-flex-direction: column !important; flex-direction: column !important; background-image: linear-gradient(0deg, rgba(0, 0, 0, 0.25) 70%, rgba(0, 0, 0, 0.175)) !important; min-height: 25rem; } } @media screen and (max-width: 480px) { .panel.spotlight .content { min-height: 30rem; } } /* Page Wrapper */ #page-wrapper { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-align-items: center; -webkit-align-items: center; -ms-align-items: center; align-items: center; -moz-justify-content: -moz-flex-start; -webkit-justify-content: -webkit-flex-start; -ms-justify-content: -ms-flex-start; justify-content: flex-start; -moz-flex-grow: 1; -webkit-flex-grow: 1; -ms-flex-grow: 1; flex-grow: 1; -moz-flex-shrink: 1; -webkit-flex-shrink: 1; -ms-flex-shrink: 1; flex-shrink: 1; height: 100%; padding: 5rem; } @media screen and (orientation: portrait) { #page-wrapper { padding-left: 2rem; padding-right: 2rem; } } @media screen and (min-aspect-ratio: 16 / 7) { #page-wrapper { padding: 6vh; } } @media screen and (min-aspect-ratio: 16 / 6) { #page-wrapper { padding: 0; } } @media screen and (max-width: 736px) { #page-wrapper { height: auto; padding: 1rem; } } @media screen and (max-width: 480px) { #page-wrapper { padding: 0; } } /* Wrapper */ #wrapper { display: -moz-flex; display: -webkit-flex; display: -ms-flex; display: flex; -moz-flex-direction: row; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -moz-transition: opacity 1s ease-out, -moz-transform 0.75s ease-out; -webkit-transition: opacity 1s ease-out, -webkit-transform 0.75s ease-out; -ms-transition: opacity 1s ease-out, -ms-transform 0.75s ease-out; transition: opacity 1s ease-out, transform 0.75s ease-out; -moz-transition-delay: 0.25s; -webkit-transition-delay: 0.25s; -ms-transition-delay: 0.25s; transition-delay: 0.25s; cursor: default; position: relative; height: 32rem; box-shadow: 0 2rem 4rem 0.25rem rgba(46, 43, 55, 0.575); } #wrapper > .scrollZone { position: fixed; width: 6rem; height: inherit; cursor: -moz-grab; cursor: -webkit-grab; cursor: -ms-grab; cursor: grab; z-index: 10100; } #wrapper > .scrollZone.left { left: 0; } #wrapper > .scrollZone.right { right: 0; } #wrapper > .copyright { position: absolute; bottom: -3rem; right: 0; font-size: 0.8rem; color: rgba(46, 43, 55, 0.375); margin-bottom: 0; } #wrapper > .copyright a:hover { color: inherit; } #wrapper.is-dragging { -moz-user-select: none; -webkit-user-select: none; -ms-user-select: none; user-select: none; cursor: -moz-grab; cursor: -webkit-grab; cursor: -ms-grab; cursor: grab; } #wrapper.is-dragging * { -moz-user-select: none; -webkit-user-select: none; -ms-user-select: none; user-select: none; } #wrapper.is-dragging * { cursor: -moz-grab; cursor: -webkit-grab; cursor: -ms-grab; cursor: grab; } #wrapper.is-dragged * { pointer-events: none; } body.is-preload #wrapper { -moz-transform: translateX(2rem); -webkit-transform: translateX(2rem); -ms-transform: translateX(2rem); transform: translateX(2rem); opacity: 0; } @media screen and (max-width: 736px) { #wrapper { -moz-flex-direction: column; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; height: auto; margin: 0 0 5rem 0; box-shadow: 0 0.25rem 1.5rem 0.25rem rgba(46, 43, 55, 0.5); } #wrapper > .scrollZone { display: none; } #wrapper > .copyright { display: block; width: 100%; text-align: center; } body.is-preload #wrapper { -moz-transform: translateY(1rem); -webkit-transform: translateY(1rem); -ms-transform: translateY(1rem); transform: translateY(1rem); } } @media screen and (max-width: 480px) { #wrapper { box-shadow: none; } body.is-preload #wrapper { -moz-transform: none; -webkit-transform: none; -ms-transform: none; transform: none; } }"},{"title":"","date":"2020-09-03T07:36:58.991Z","updated":"2019-08-30T14:53:02.000Z","comments":true,"path":"aboutme/assets/js/jquery.min.js","permalink":"https://brynhild.online/aboutme/assets/js/jquery.min.js","excerpt":"","text":"/*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */ !function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(C,e){\"use strict\";var t=[],E=C.document,r=Object.getPrototypeOf,s=t.slice,g=t.concat,u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType},x=function(e){return null!=e&&e===e.window},c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.4.1\",k=function(e,t){return new k.fn.init(e,t)},p=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;function d(e){var t=!!e&&\"length\"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0"}],"posts":[{"title":"FAIOJ 101 左偏树 可并堆 STL简单实现","slug":"faioj0101-leftist-heap","date":"2020-08-11T05:14:11.000Z","updated":"2020-09-02T14:54:12.683Z","comments":true,"path":"faioj0101-leftist-heap/","link":"","permalink":"https://brynhild.online/faioj0101-leftist-heap/","excerpt":"FAIOJ #101洛谷 P3377","text":"FAIOJ #101洛谷 P3377 使用了 ext/pb_ds/priority_queue.hpp. 由于使用结构体或者pair同时存数和编号较为繁琐, 由于本题数据不大, 故使用 $data*(n+1)+i$ 来同时存储数据和编号. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#pragma GCC optimize (2)#pragma G++ optimize (2)#pragma GCC optimize (3)#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;cstdio&gt;#include &lt;ext/pb_ds/priority_queue.hpp&gt;using namespace std;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],but[ELAS],*_p1=buf,*_p2=buf,*_p3=but,*_p4=but+ELAS;static int bit[20];#define gc() ((_p1==_p2)&amp;&amp;(_p2=(_p1=buf)+fread(buf,1,ELAS,stdin),_p1==_p2)?EOF:*_p1++)inline void pt(char c) &#123; (_p3==_p4)?(fwrite(_p3=but, 1, ELAS, stdout), *_p3++=c):(*_p3++=c);&#125;inline long long read () &#123; register long long x=0; register char c=gc(); register bool m=false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (!(c ^ &#x27;-&#x27;)) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;inline unsigned long long readu () &#123; register unsigned long long x=0; register char c=gc(); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c &gt;=&#x27;0&#x27; &amp;&amp; c &lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return x;&#125;inline void write (long long x) &#123; if (!x) &#123;putchar(&#x27;0&#x27;); return;&#125; register long long pos=0; if (x &lt; 0) x = -x, pt (&#x27;-&#x27;); for (; x; x/=10) bit[++ pos] = x%10; for (register long long i=pos; i; --i) pt(bit[i]^&#x27;0&#x27;);&#125;#define maxn 100001long long fa[maxn];inline long long find (long long x) &#123; return (!(x^fa[x]))? x:fa[x]=find(fa[x]);&#125;__gnu_pbds::priority_queue&lt;long long, greater &lt;long long&gt;, __gnu_pbds::binomial_heap_tag&gt; que[maxn];signed main ()&#123; register long long n=readu()+1, m=readu(), opt, x, y; register bool del[maxn]; for (register long long i=1; i^n; ++i) fa[i]=i, del[i]=false, que[i].push(read()*n+i); while (m --) &#123; opt = read(), x = read(); if (opt^2) &#123; y = read (); if (del[x] || del[y]) continue; if ((x=find(x))^(y=find(y))) &#123; fa[y]=x, que[x].join(que[y]); &#125; &#125; else &#123; if (del[x]) pt(&#x27;-&#x27;), pt(&#x27;1&#x27;), pt(&#x27;\\n&#x27;); else &#123; write ((opt=que[y=find(x)].top())/n), pt (&#x27;\\n&#x27;); que[y].pop(), del[opt%n] = true; &#125; &#125; &#125; return fwrite (but, 1, _p3-but, stdout), 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"OPTIMIZATION","slug":"OPTIMIZE","date":"2020-08-07T05:20:42.000Z","updated":"2020-09-02T14:51:59.433Z","comments":true,"path":"OPTIMIZE/","link":"","permalink":"https://brynhild.online/OPTIMIZE/","excerpt":"编译选项 普通的快读快写 fread/fwrite优化的快读快写 浮点数的快读快写 内嵌asm","text":"编译选项 普通的快读快写 fread/fwrite优化的快读快写 浮点数的快读快写 内嵌asm LuoguBlog Fast Read &amp; WriteELLIAS_Old123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354class fastio &#123; private: inline char gc() &#123; static char buf[1&lt;&lt;14],*p1=buf,*p2=buf; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;14,stdin),p1==p2)?EOF:*p1++; &#125; public: inline void getint (int &amp;to) &#123; register int x = 0; register char c = gc(); register bool m = 0; while (c!=&#x27;-&#x27;&amp;&amp;(c&lt;&#x27;0&#x27;||c&gt;&#x27;9&#x27;) &amp;&amp; c != &#x27;-&#x27;) c = gc(); if (c == &#x27;-&#x27;) c = gc(), m = 1; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + c - &#x27;0&#x27;, c = gc(); if (m) return -x; else return x; &#125; inline void getuint (int &amp;to) &#123; int x = 0; char c = gc(); while (!isdigit(c)) c = gc(); while (isdigit(c)) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + c - &#x27;0&#x27;, c = gc(); to = x; &#125; inline void getdou (double &amp;to) &#123; double x=0; char ch = getchar (); bool m = 0; while (!isdigit(ch) &amp;&amp; ch != &#x27;-&#x27;) ch = gc (); if (ch == &#x27;-&#x27;) ch = gc(), m = 1; while (isdigit(ch)) x = x * 10 + (ch-48), ch = gc (); if (ch == &#x27;.&#x27;) &#123; double s = 0.1; ch = gc (); while (isdigit(ch)) x = x + (ch-48)*s,s/=10,ch = gc (); &#125; if (m) to = -x; else to = x; &#125; inline void getudou (double &amp;to) &#123; double x=0; char ch = gc (); while (!isdigit(ch)) ch = gc (); while (isdigit(ch)) x = x * 10 + (ch-48), ch = gc (); if (ch == &#x27;.&#x27;) &#123; double s = 0.1; ch = gc (); while (isdigit(ch)) x = x + (ch-48)*s,s/=10,ch = gc (); &#125; to = x; &#125; inline void write (int x) &#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48); &#125;&#125; io; SJB1234567891011121314151617181920212223242526272829303132333435namespace fastIO &#123; const int str = 1&lt;&lt;20; const char* kiana = &quot;\\n&quot;; struct Reader &#123; char buf[str], *s, *t; bool EOF_FLG; Reader():s(buf), t(buf), EOF_FLG(false) &#123;&#125;; inline char gt() &#123;return s==t&amp;&amp;((t=(s=buf)+fread(buf,1,str,stdin))==s)?EOF:(*s++);&#125; template &lt;typename T&gt; Reader&amp;operator &gt;&gt; (T&amp;x) &#123; if (EOF_FLG)return *this; register char c=0,d; while (c != EOF &amp;&amp; (!isdigit(c)))d=c,c=gt(); if(c == EOF) &#123;EOF_FLG=true; return *this;&#125; else x = 0; while(isdigit(c)) x = (x&lt;&lt;3) + (x&lt;&lt;1) + c - &#x27;0&#x27;, c = gt(); if (d == &#x27;-&#x27;) x =- x; return *this; &#125; &#125; cin; struct Writer &#123; char buf[str],*s,*t; Writer():s(buf),t(buf+str) &#123;&#125; ~Writer() &#123;fwrite(buf,1,s-buf,stdout);&#125; inline void pt(char c) &#123;(s==t)?(fwrite(s=buf,1,str,stdout),*s++=c):(*s++=c);&#125; template&lt;typename T&gt;Writer&amp;operator&lt;&lt;(T x) &#123; if(!x) return pt(&#x27;0&#x27;),*this; if(x&lt;0) pt(&#x27;-&#x27;), x = -x; register char a[30],t=0; while(x)a[t++]=x%10,x/=10; while(t--)pt(a[t]+&#x27;0&#x27;); return *this; &#125; Writer&amp;operator&lt;&lt;(const char*s) &#123;while(*s)pt(*s++);return *this;&#125; &#125; cout;&#125; ELLIAS_New1234567891011121314151617181920const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = 0; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (int x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (int x) &#123;if(x&lt;0)x=-x,putchar(&#x27;-&#x27;); write (x); putchar (&#x27;\\n&#x27;);&#125; ELLIAS@2020 (fread fwrite 优化版本)包括 fread fwrite 改写的 getchar() 和 putchar() 浮点数快读快写 整数快读快写 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#pragma GCC optimize (2)#pragma G++ optimize (2)#pragma GCC optimize (3)#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;cstdio&gt;using namespace std;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],but[ELAS],*_p1=buf,*_p2=buf,*_p3=but,*_p4=but+ELAS;static int bit[20];#define gc() ((_p1==_p2)&amp;&amp;(_p2=(_p1=buf)+fread(buf,1,ELAS,stdin),_p1==_p2)?EOF:*_p1++)inline void pt(char c) &#123; (_p3==_p4)?(fwrite(_p3=but, 1, ELAS, stdout), *_p3++=c):(*_p3++=c);&#125;inline long long read () &#123; register long long x=0ll; register char c=gc(); register bool m=false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (!(c ^ &#x27;-&#x27;)) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;inline long long readu () &#123; register long long x=0ll; register char c=gc(); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c &gt;=&#x27;0&#x27; &amp;&amp; c &lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return x;&#125;inline long double readdou () &#123; register long double x=0.0; register char c=gc(); register bool m=false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (!(c ^ &#x27;-&#x27;)) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x * 10.0 + (c ^ &#x27;0&#x27;), c = gc(); if (!(c ^ &#x27;.&#x27;)) &#123; register long double s=0.1; c=gc(); while (c&gt;=&#x27;0&#x27; &amp;&amp; c&lt;=&#x27;9&#x27;) x = x + (c ^ &#x27;0&#x27;) * s, s/=10.0, c=gc(); &#125; return m? -x : x;&#125;inline long double readudou () &#123; register long double x=0.0; register char c=gc(); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x * 10.0 + (c ^ &#x27;0&#x27;), c = gc(); if (!(c ^ &#x27;.&#x27;)) &#123; register long double s=0.1; c=gc(); while (c&gt;=&#x27;0&#x27; &amp;&amp; c&lt;=&#x27;9&#x27;) x = x + (c ^ &#x27;0&#x27;) * s, s/=10.0, c=gc(); &#125; return x;&#125;inline void write (long long x) &#123; if (!x) &#123;pt(&#x27;0&#x27;); return;&#125; register int pos=0; if (x &lt; 0) x = -x, pt (&#x27;-&#x27;); for (; x; x/=10) bit[++ pos] = x%10; for (register int i=pos; i; --i) pt(bit[i]^&#x27;0&#x27;);&#125;inline long long qpow (long long a, long long t) &#123; register long long base = a, ret = 1ll; while (t) &#123; if (t&amp;1) ret = ret * base; base = base * base, t &gt;&gt;= 1; &#125; return ret;&#125;inline void writedou (long double x, int res=9) &#123; if (x == 0.0) &#123; pt(&#x27;0&#x27;), pt(&#x27;.&#x27;); for (register int i=0; i^res; ++i) pt (&#x27;0&#x27;); return; &#125; else &#123; if (x &lt; 0.0) x=-x, pt(&#x27;-&#x27;); register long long clf=qpow(10, res); register long long flt=(long long)(x * clf) % clf; write ((long long) x); pt (&#x27;.&#x27;); register int pos = 0; for (; pos^res; flt/=10) bit[++ pos] = flt%10; for (register int i=pos; i; --i) pt(bit[i]^&#x27;0&#x27;); &#125;&#125;signed main ()&#123; //主程序代码内容 fwrite (but, 1, _p3-but, stdout); return 0;&#125; SWITCHOLD (2017)123456789#pragma GCC optimize (&quot;-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2&quot;, 3)#pragma G++ optimize (&quot;Ofast&quot;, 3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;) OLD(2018.3)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#pragma GCC optimize (2)#pragma G++ optimize (2)#pragma GCC optimize (3)#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;)#pragma GCC optimize (&quot;inline&quot;)#pragma GCC optimize (&quot;-fgcse&quot;)#pragma GCC optimize (&quot;-fgcse-lm&quot;)#pragma GCC optimize (&quot;-fipa-sra&quot;)#pragma GCC optimize (&quot;-ftree-pre&quot;)#pragma GCC optimize (&quot;-ftree-vrp&quot;)#pragma GCC optimize (&quot;-fpeephole2&quot;)#pragma GCC optimize (&quot;-ffast-math&quot;)#pragma GCC optimize (&quot;-fsched-spec&quot;)#pragma GCC optimize (&quot;unroll-loops&quot;)#pragma GCC optimize (&quot;-falign-jumps&quot;)#pragma GCC optimize (&quot;-falign-loops&quot;)#pragma GCC optimize (&quot;-falign-labels&quot;)#pragma GCC optimize (&quot;-fdevirtualize&quot;)#pragma GCC optimize (&quot;-fcaller-saves&quot;)#pragma GCC optimize (&quot;-fcrossjumping&quot;)#pragma GCC optimize (&quot;-fthread-jumps&quot;)#pragma GCC optimize (&quot;-funroll-loops&quot;)#pragma GCC optimize (&quot;-fwhole-program&quot;)#pragma GCC optimize (&quot;-freorder-blocks&quot;)#pragma GCC optimize (&quot;-fschedule-insns&quot;)#pragma GCC optimize (&quot;inline-functions&quot;)#pragma GCC optimize (&quot;-ftree-tail-merge&quot;)#pragma GCC optimize (&quot;-fschedule-insns2&quot;)#pragma GCC optimize (&quot;-fstrict-aliasing&quot;)#pragma GCC optimize (&quot;-fstrict-overflow&quot;)#pragma GCC optimize (&quot;-falign-functions&quot;)#pragma GCC optimize (&quot;-fcse-skip-blocks&quot;)#pragma GCC optimize (&quot;-fcse-follow-jumps&quot;)#pragma GCC optimize (&quot;-fsched-interblock&quot;)#pragma GCC optimize (&quot;-fpartial-inlining&quot;)#pragma GCC optimize (&quot;no-stack-protector&quot;)#pragma GCC optimize (&quot;-freorder-functions&quot;)#pragma GCC optimize (&quot;-findirect-inlining&quot;)#pragma GCC optimize (&quot;-fhoist-adjacent-loads&quot;)#pragma GCC optimize (&quot;-frerun-cse-after-loop&quot;)#pragma GCC optimize (&quot;inline-small-functions&quot;)#pragma GCC optimize (&quot;-finline-small-functions&quot;)#pragma GCC optimize (&quot;-ftree-switch-conversion&quot;)#pragma GCC optimize (&quot;-foptimize-sibling-calls&quot;)#pragma GCC optimize (&quot;-fexpensive-optimizations&quot;)#pragma GCC optimize (&quot;-funsafe-loop-optimizations&quot;)#pragma GCC optimize (&quot;inline-functions-called-once&quot;)#pragma GCC optimize (&quot;-fdelete-null-pointer-checks&quot;) NOIp20181234567891011121314151617181920212223242526272829303132333435363738394041#pragma GCC optimize (2)#pragma GCC optimize (&quot;inline&quot;)#pragma GCC optimize (&quot;-fgcse&quot;)#pragma GCC optimize (&quot;-fgcse-lm&quot;)#pragma GCC optimize (&quot;-fipa-sra&quot;)#pragma GCC optimize (&quot;-ftree-pre&quot;)#pragma GCC optimize (&quot;-ftree-vrp&quot;)#pragma GCC optimize (&quot;-fpeephole2&quot;)#pragma GCC optimize (&quot;-ffast-math&quot;)#pragma GCC optimize (&quot;-fsched-spec&quot;)#pragma GCC optimize (&quot;unroll-loops&quot;)#pragma GCC optimize (&quot;-falign-jumps&quot;)#pragma GCC optimize (&quot;-falign-loops&quot;)#pragma GCC optimize (&quot;-falign-labels&quot;)#pragma GCC optimize (&quot;-fdevirtualize&quot;)#pragma GCC optimize (&quot;-fcaller-saves&quot;)#pragma GCC optimize (&quot;-fcrossjumping&quot;)#pragma GCC optimize (&quot;-fthread-jumps&quot;)#pragma GCC optimize (&quot;-funroll-loops&quot;)#pragma GCC optimize (&quot;-freorder-blocks&quot;)#pragma GCC optimize (&quot;-fschedule-insns&quot;)#pragma GCC optimize (&quot;inline-functions&quot;)#pragma GCC optimize (&quot;-ftree-tail-merge&quot;)#pragma GCC optimize (&quot;-fschedule-insns2&quot;)#pragma GCC optimize (&quot;-fstrict-aliasing&quot;)#pragma GCC optimize (&quot;-falign-functions&quot;)#pragma GCC optimize (&quot;-fcse-follow-jumps&quot;)#pragma GCC optimize (&quot;-fsched-interblock&quot;)#pragma GCC optimize (&quot;-fpartial-inlining&quot;)#pragma GCC optimize (&quot;no-stack-protector&quot;)#pragma GCC optimize (&quot;-freorder-functions&quot;)#pragma GCC optimize (&quot;-findirect-inlining&quot;)#pragma GCC optimize (&quot;-fhoist-adjacent-loads&quot;)#pragma GCC optimize (&quot;-frerun-cse-after-loop&quot;)#pragma GCC optimize (&quot;inline-small-functions&quot;)#pragma GCC optimize (&quot;-finline-small-functions&quot;)#pragma GCC optimize (&quot;-ftree-switch-conversion&quot;)#pragma GCC optimize (&quot;-foptimize-sibling-calls&quot;)#pragma GCC optimize (&quot;-fexpensive-optimizations&quot;)#pragma GCC optimize (&quot;inline-functions-called-once&quot;)#pragma GCC optimize (&quot;-fdelete-null-pointer-checks&quot;) 内嵌asm优化a * b % mo12345inline long long mul_mod (register long long a,register long long b,register long long mo) &#123; register long long ret; __asm__ __volatile__ (&quot;\\tmull %%ebx\\n\\tdivl %%ecx\\n&quot; : &quot;=d&quot;(ret):&quot;a&quot;(a),&quot;b&quot;(b),&quot;c&quot;(mo)); return ret;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"线段树 namespace","slug":"seg-tree-namespace","date":"2020-07-26T05:46:23.000Z","updated":"2020-09-02T14:51:42.940Z","comments":true,"path":"seg-tree-namespace/","link":"","permalink":"https://brynhild.online/seg-tree-namespace/","excerpt":"线段树 namespace","text":"线段树 namespace 12345678910111213141516171819202122232425262728293031323334namespace Seg_Tree &#123;#define ls p &lt;&lt; 1#define rs p &lt;&lt; 1 | 1#define mid ((l + r) &gt;&gt; 1) int mn[N &lt;&lt; 2], pos[N &lt;&lt; 2], tag[N &lt;&lt; 2]; inline void pushup (int p) &#123; mn[p] = std::min (mn[ls], mn[rs]), pos[p] = !(mn[p]^mn[rs]) ? pos[rs] : pos[ls]; &#125; inline void modify (int p, int x) &#123; tag[p] += x, mn[p] -= x; &#125; inline void pushdown (int p) &#123; if (tag[p]) modify (ls, tag[p]), modify (rs, tag[p]), tag[p] = 0; &#125; static void build (int p, int l, int r) &#123; if (!(l^r)) return mn[p] = wait[l], pos[p] = l, void (); else build (ls, l, mid), build (rs, mid + 1, r), pushup (p); &#125; static void update (int p, int l, int r, int L, int R, int x) &#123; if (L &gt; r || l &gt; R || L &gt; R) return; else if (L &lt;= l &amp;&amp; r &lt;= R) return modify(p, x); else pushdown (p), update (ls, l, mid, L, R, x), update (rs, mid + 1, r, L, R, x), pushup (p); &#125; static int find (int p, int l, int r, int L, int R) &#123; if (L &gt; r || l &gt; R || L &gt; R) return 0; else if (L &lt;= l &amp;&amp; r &lt;= R) return p; pushdown(p); register int p1 = find (ls, l, mid, L, R), p2 = find (rs, mid + 1, r, L, R); return mn[p1] &gt; mn[p2] ? p2 : p1; &#125;#undef ls#undef rs#undef mid&#125; 1using namespace Seg_Tree;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"},{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"FAIOJ 1499 快速幂取模 (加强版)","slug":"faioj1499-qpow-fast","date":"2020-07-26T05:38:42.000Z","updated":"2020-09-02T14:54:02.414Z","comments":true,"path":"faioj1499-qpow-fast/","link":"","permalink":"https://brynhild.online/faioj1499-qpow-fast/","excerpt":"扩展欧拉定理题目链接","text":"扩展欧拉定理题目链接 $$ {a}^b\\ mod\\ p = {a}^{b\\ mod\\ φp + φp}\\ mod\\ p $$ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#pragma G++ optimize(&quot;Ofast&quot;, 3)#pragma GCC optimize(&quot;Ofast&quot;, 3)#pragma GCC target(&quot;sse3&quot;, &quot;sse2&quot;, &quot;sse&quot;)#pragma GCC target(&quot;avx&quot;, &quot;sse4&quot;, &quot;sse4.1&quot;, &quot;sse4.2&quot;, &quot;ssse3&quot;)#pragma GCC target(&quot;f16c&quot;)#pragma G++ target(&quot;sse3&quot;, &quot;sse2&quot;, &quot;sse&quot;)#pragma G++ target(&quot;avx&quot;, &quot;sse4&quot;, &quot;sse4.1&quot;, &quot;sse4.2&quot;, &quot;ssse3&quot;)#pragma G++ target(&quot;f16c&quot;)#include &lt;cstdio&gt;#include &lt;cstring&gt;#define Re registerusing namespace std;typedef long long ll;inline long long mul_mod (register long long a,register long long b,register long long mo) &#123; register long long ret; __asm__ __volatile__ (&quot;\\tmull %%ebx\\n\\tdivl %%ecx\\n&quot; : &quot;=d&quot;(ret):&quot;a&quot;(a),&quot;b&quot;(b),&quot;c&quot;(mo)); return ret;&#125;inline long long qpow(Re ll a, Re ll t, Re ll m) &#123; register long long base = a % m, ret = 1ll; while (t) &#123; if (t &amp; 1) ret = mul_mod (ret, base, m); base = mul_mod (base, base, m), t &gt;&gt;= 1; &#125; return ret % m;&#125;char aa[101], bb[101];signed main() &#123; register long long a = 0ll, b = 0ll, m, mm, phi; scanf(&quot;%s %s %lld&quot;, aa, bb, &amp;m); mm = phi = m; for (register ll i = 2ll; i * i &lt;= mm; ++i) &#123; if (!(mm % i)) &#123; phi = phi / i * (i - 1); while (!(mm % i)) mm /= i; &#125; &#125; if (mm &gt; 1) phi = phi / mm * (mm - 1); register int la = strlen(aa), lb = strlen(bb); for (register int i = 0; i &lt; la; ++i) a = (a * 10 + (aa[i] ^ &#x27;0&#x27;)) % m; for (register int i = 0; i &lt; lb; ++i) b = (b * 10 + (bb[i] ^ &#x27;0&#x27;)) % phi; printf(&quot;%lld&quot;, qpow(a, b &gt; phi? (b % phi + phi) : b % phi, m)); return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"珂学上网 基于VultrVPS的SSR服务器的基本搭建","slug":"vultr_ssr_vpn_buildup","date":"2020-03-01T22:08:23.000Z","updated":"2020-09-02T14:55:33.371Z","comments":true,"path":"vultr_ssr_vpn_buildup/","link":"","permalink":"https://brynhild.online/vultr_ssr_vpn_buildup/","excerpt":"Vultr SSR VPS 锐速 CentOS VPN GoogleBBR 防火墙","text":"Vultr SSR VPS 锐速 CentOS VPN GoogleBBR 防火墙 购买 VPS 服务器我们应该选择国外的 VPS(Virtual Private Server) 提供商,这里推荐 Vultr,性价比较高,最低有 $2.5/m 的,但其只支持 IPv6 ,所以个人搭建推荐 $3.5/m. 目前新账号充值 $10 可赠送 $50,是相当划算的.如果想要通过注册多个账号来减少资费,请务必注意 IP 地址及 GPS 定位. VPS服务器的搭建和连接服务器搭建在 Product 页点击加号新建服务器. 选择 Cloud Compute. 选择自己熟悉的 OS.这里以 CentOS 为例. CentOS 版本建议选6以上,否则也许会出现未知的问题. Vultr 提供多个地区的服务器,建议一次性搭建多台之后逐个测试速度,速度较慢的删除即可.服务器按照小时计费,不需要担心资费浪费问题. 扩展功能按需要选择.这里建议勾选 Enable IPv6. 服务器搭建完成后可以在 Products 页面看到. 服务器连接在服务器页面,我们需要记下服务器的 IP 用户名 密码. 我们需要终端用 SSH 来连接 VPS.在 Windows 操作系统上推荐 Xshell. Vultr 网站上也提供了命令行,但不推荐使用. 在Xshell上连接文件-&gt;新建 在连接中填写相关内容. 在用户身份验证中填写用户名和密码. 连接即可. 在终端连接1ssh your_username@server_IP -p 22 (22是你VPS的SSH端口) 端口可以省略. 相关内容安装安装SSR安装 wegt 1yum -y install wget 安装 SSR 该脚本由 www.qcgzxw.cn 提供. 1wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh SSR 相关配置依需要而定. 搭建成功后会显示 IP,端口,密码,协议等,用于填写 ShadowsocksR 配置信息. 使用锐速为 SSR 加速锐速模块依赖于内核,基本原理是对丢包情况进行评估,并重发可能丢的数据包,即锐速多倍发包,在一定程度上能够提高 VPN 速度. 首先查询系统内核版本 1uname -r 如返回值以 2 开头,说明服务器为 CentOS6,可直接安装锐速. 如返回值以 3 开头,需要对内核降级. 另: 如果已经安装过 Google BBR 拥塞控制算法,那么无法安装锐速. CentOS6 安装锐速: 1wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install &#x27;2.6.32-642.el6.x86_64&#x27; 更高版本使用以下命令对内核降级: 1wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh &amp;&amp; bash rskernel.sh 如图所示,系统为 CentOS7,更换内核后系统重启. 重新连接后使用如下指令安装锐速: 1yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install 在过程中图示的三个选项默认即可. 下图为安装运行成功.与锐速相关的指令会在文末给出. 使用 Google BBR 为 SSR 加速这是一个 TCP 拥塞控制算法.Google BBR 的 github 页面: https://github.com/google/bbr 警告: Google BBR 需要升级内核,锐速需要降级内核,二者不可兼得. 卸载原版内核 headers. 1yum remove kernel-headers 安装高版本内核 headers. 1yum --enablerepo=elrepo-kernel -y install kernel-ml-headers 升级 CentOS 系统内核. 1yum -y install kernel-ml kernel-ml-devel 升级 headers. 1yum -y install kernel-ml-headers 对于 CentOS6 1sed -i &#x27;s/^default=.*/default=0/g&#x27; /boot/grub/grub.conf 对于更高版本 1grub2-set-default 0 使用安装脚本安装 Google BBR. 1wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh 这个脚本由 秋水逸冰 提供. 安装后重启服务器,检查 BBR 是否启动. 1lsmod | grep bbr 返回值有 tcp_bbr 模块即说明 BBR 已启动.并不是所有的 VPS 都会有此返回值,若没有也属正常. SSR多端口配置使用 Vim 打开配置文件 1vi /etc/shadowsocks.json 原有内容大致如下: 1234567891011121314151617181920&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, &quot;server_port&quot;: 25565, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1081, &quot;password&quot;: &quot;www.qcgzxw.cn&quot;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;protocol&quot;: &quot;auth_sha1_v4_compatible&quot;, &quot;protocol_param&quot;: &quot;&quot;, &quot;obfs&quot;: &quot;http_simple_compatible&quot;, &quot;obfs_param&quot;: &quot;&quot;, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 1, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false, &quot;workers&quot;: 1&#125; 删除原有的 server_port 及 password ,新增 port_password ,前面是端口,后面是密码,需要注意格式问题. 示例更改后如下: 12345678910111213141516171819202122232425262728&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1081, &quot;port_password&quot;: &#123; &quot;1096&quot;:&quot;hanyuu&quot;, &quot;1919&quot;:&quot;senpai&quot;, &quot;2020&quot;:&quot;evolution&quot;, &quot;417&quot;:&quot;morsunhy&quot;, &quot;2333&quot;:&quot;morsun&quot;, &quot;11451&quot;:&quot;niconiconi&quot;, &quot;10960&quot;:&quot;hanyuu&quot; &#125;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;protocol&quot;: &quot;auth_sha1_v4_compatible&quot;, &quot;protocol_param&quot;: &quot;&quot;, &quot;obfs&quot;: &quot;http_simple_compatible&quot;, &quot;obfs_param&quot;: &quot;&quot;, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 1, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false, &quot;workers&quot;: 1&#125; 保存后修改防火墙配置: 1vi /etc/firewalld/zones/public.xml 原有内容大致如下: 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;zone&gt; &lt;short&gt;Public&lt;/short&gt; &lt;description&gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt; &lt;service name=&quot;dhcpv6-client&quot;/&gt; &lt;service name=&quot;ssh&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;25565&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;25565&quot;/&gt;&lt;/zone&gt; 加入新加入的端口,一行 tcp,一行 udp. 修改后内容大致如下: 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;zone&gt; &lt;short&gt;Public&lt;/short&gt; &lt;service name=&quot;dhcpv6-client&quot;/&gt; &lt;service name=&quot;ssh&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;1096&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;1096&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;1919&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;1919&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;2020&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;2020&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;2333&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;2333&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;11451&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;11451&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;417&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;417&quot;/&gt; &lt;port protocol=&quot;tcp&quot; port=&quot;10960&quot;/&gt; &lt;port protocol=&quot;udp&quot; port=&quot;10960&quot;/&gt;&lt;/zone&gt; 重启 SSR. 1/etc/init.d/shadowsocks restart 重启防火墙. 1firewall-cmd --reload 也可以参考下文的指令按照类似流程安装. SSR的使用下载客户端,配置并连接即可. Shadowsocks: https://shadowsocks.org/ ShadowsocksR: https://github.com/Anankke/SSRR-Windows/ 相关指令扩展SSR1234567891011121314151617#启动SSR/etc/init.d/shadowsocks start#停止SSR/etc/init.d/shadowsocks stop#重启SSR/etc/init.d/shadowsocks restart#状态SSR/etc/init.d/shadowsocks status#卸载SSR./shadowsocks-all.sh uninstall#更改配置参数vim /etc/shadowsocks-r/config.json 锐速1234567891011121314#查看运行状态/appex/bin/serverSpeeder.sh status #启动锐速/appex/bin/serverSpeeder.sh start #停止锐速/appex/bin/serverSpeeder.sh stop #重启锐速/appex/bin/serverSpeeder.sh restart #卸载锐速/appex/bin/serverSpeeder.sh uninstall 防火墙CentOS7之前版本 iptables 命令1234567891011121314151617181920#查看已经开放的端口:/etc/init.d/iptables status#开启端口/sbin/iptables -I INPUT -p tcp --dport 端口 -j ACCEPT#保存设置/etc/rc.d/init.d/iptables save#启动防火墙(永久)chkconfig iptables on#停止防火墙(永久)chkconfig iptables off#启动防火墙(暂时,重启失效)service iptables start#关闭防火墙(暂时,重启失效)service iptables stop CentOS7 firewall 命令1234567891011121314151617181920#启动防火墙systemctl start firewalld#查看防火墙状态systemctl status firewalld#查看已经开放的端口firewall-cmd --list-ports#开启端口(永久)firewall-cmd --zone=public --add-port=端口/tcp --permanent#重启防火墙firewall-cmd --reload#停止防火墙systemctl stop firewalld.service #禁止开机启动systemctl disable firewalld.service","categories":[{"name":"VPN","slug":"VPN","permalink":"https://brynhild.online/categories/VPN/"}],"tags":[{"name":"VPN","slug":"VPN","permalink":"https://brynhild.online/tags/VPN/"},{"name":"VPS","slug":"VPS","permalink":"https://brynhild.online/tags/VPS/"}]},{"title":"扫盲向 利用OBS虚拟摄像头在网课上摸鱼","slug":"obs_internet_class_fishing","date":"2020-03-01T02:08:23.000Z","updated":"2020-09-02T14:53:07.771Z","comments":true,"path":"obs_internet_class_fishing/","link":"","permalink":"https://brynhild.online/obs_internet_class_fishing/","excerpt":"Windows OBS OBS-VirtualCam Facerig","text":"Windows OBS OBS-VirtualCam Facerig INTRODUCTION 「摸鱼之心，人皆有之，咸者能毋丧耳。」 – Hanyuu ELLIAS 近期不少同学问我网课摸鱼的事,于是有了这个扫盲向博客. 当然,您也可以用它来在课上做一些不对劲的事, REQUIREMENT Open Broadcaster Software OBS-VirtualCam Install and run. USEINPUT在”来源”中点击加号添加. 作为视频或图像录一段学习时候的视频或选择一张贴纸. 选择 VLC 视频源或图像. 点击加号添加文件或路径. 作为视频源添加视频捕获装置 作为示例,这里选择了 Facerig 的虚拟摄像头. 我很可爱,请给我钱! 这个模型来自创意工坊,作者为 toribako145. 确保其被激活.分辨率选项视情况而定. 将画面充满屏幕. 用上下箭头调整前后位置.确保其出于可视状态. OUTPUT工具-&gt;虚拟摄像头. 选择目标摄像头(默认即可),水平翻转及保持长宽比例视情况使用. 缓冲帧视性能调整. 启动即可. IN CLASS选择刚才设置的目标摄像头即可. OTHERS 低配置设备可在设置-&gt;视频中调整分辨率来缓解卡顿. 不使用物理摄像头时将其遮住是个好习惯. 使用Facerig时请留意各方面的版权限制. 摸鱼有风险,使用需谨慎. 请各位”务必”以学业为重!","categories":[{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/categories/Trick/"}],"tags":[{"name":"OBS","slug":"OBS","permalink":"https://brynhild.online/tags/OBS/"}]},{"title":"网易云VIP歌曲NCM格式解密","slug":"ncm_unlock","date":"2020-01-11T08:08:00.000Z","updated":"2020-09-02T14:53:23.758Z","comments":true,"path":"ncm_unlock/","link":"","permalink":"https://brynhild.online/ncm_unlock/","excerpt":"Windows Android ncmdump 网易云","text":"Windows Android ncmdump 网易云 INTRODUCTION当发现从网易云音乐下载的 VIP 音乐成了这副样子 不禁要吐槽: 这真是太( ),太( )了. (中文填空,每空2字) 本文将提供几种 NCM 格式的解密方案. WebDev Tools在官网播放页”偷”缓存,发现了看起来对劲的东西,果断下载+转码,用 mp3tag 加入封面及歌曲信息,大功告成. 音乐解锁 - By IXareaunlock-music on GitHub 音乐解锁用于移除已购音乐的加密保护.目前支持网易云音乐(ncm) QQ音乐(qmc,mflac,mgg,tkm)以及其他格式,并使用 MIT 许可协议开放源代码.其使用浏览器对本地文件进行操作,不需要将文件上传. Windows使用 ncmdump 或 ncmdump-gui.链接指向对应的GitHub仓库. 考虑到 GitHub 要”夜缒而出”,给出一定版本的下载地址: Release.zip, ncmdump-gui@25Jan2019 大小: 219129 字节 MD5: D90B1FDFCEC35DD3E5BDE912AB35C436 SHA1: B57308A46244823EC44996E62AD45FE5DD32BF26 CRC32: 36B0CD33 ncmdump-gui-lastest.tar.gz, ncmdump-gui@25Jan2019 大小: 72943 字节 MD5: D21AC64AFD09270C0ABFFADD62D50ECF SHA1: 87186625F385E70102DE58E5B8414F99EF1653F6 CRC32: 7A91F3AE ncmdump-windows-amd64.zip, ncmdump@v0.3.0 大小: 3318258 字节 MD5: 9720D5EE3523D377E7F0F7D499665043 SHA1: 9E4F216562B7CED2533A098255FC16794AAC05CE CRC32: 17FC5336 ncmdump-darwin-amd64.zip, ncmdump@v0.3.0 大小: 3461822 字节 MD5: 0CD5CB0A46DE5532CCCD62CD22261E3F SHA1: A8DDFDA576D703E90F7491BCF6D2A907934534A2 CRC32: A2F413A9 ncmdump-0.3.0.tar.gz, ncmdump@v0.3.0 大小: 104499 字节 MD5: 23896D0FEDE39F976003661ACFEF810D SHA1: 85EE97C5CD995FA88616A8523E6862A1836D9D08 CRC32: B142A5B6 AndroidDroidNCM安卓版的 ncmdump.GitHub 页面: https://github.com/bunnyblueair/DroidNCM 下载地址: ncm-release.apk, DroidNCM@v2.1.1 大小: 3054417 字节 MD5: 4F42A5244E817B485C1DE1CA0FE4E8F6 SHA1: B70F7A1401A9DBC858C1E1CF87AF49E9442977D0 CRC32: B3D2E106 DroidNCM-2.1.1.tar.gz, DroidNCM@v2.1.1 大小: 9360077 字节 MD5: 073D92EA36E3EE388E95C0651D3886DA SHA1: F8C50937C661C00D225C00E954F1DA96065A6D38 CRC32: F99D094B 据说这个软件兼容性不是很好,建议下载源码自行编译. 铃声(操作繁琐,不推荐)在客户端中将歌曲设置为铃声 每次截取60s,直到全部截取 在如图所示的目录中会生成解密后的文件 加.mp3后缀,使用格式工厂拼接即可.","categories":[{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/categories/Trick/"}],"tags":[{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/tags/Trick/"}]},{"title":"buzzer scale define","slug":"buzzer-define","date":"2019-07-07T02:29:42.000Z","updated":"2020-09-02T14:55:21.306Z","comments":true,"path":"buzzer-define/","link":"","permalink":"https://brynhild.online/buzzer-define/","excerpt":"buzzer scale define","text":"buzzer scale define 123456789101112131415161718192021222324252627282930313233343536#define ddo 262#define dre 294#define dmi 330#define dfa 349#define dso 392#define dla 440#define dsi 494#define do 523#define re 578#define mi 659#define fa 698#define so 784#define la 880#define si 988#define udo 1046#define ure 1175#define umi 1318#define ufa 1480#define uso 1568#define ula 1760#define usi 1976#define sddo 277#define sdre 311#define sdfa 370#define sdso 415#define sdla 466#define sdo 554#define sre 622#define sfa 740#define sso 831#define sla 932#define sudo 1046#define sure 1245#define sufa 1480#define suso 1661#define sula 1865","categories":[{"name":"buzzer","slug":"buzzer","permalink":"https://brynhild.online/categories/buzzer/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"buzzer","slug":"buzzer","permalink":"https://brynhild.online/tags/buzzer/"}]},{"title":"ELLIAS的OI之路","slug":"oi_history","date":"2019-02-02T05:57:07.000Z","updated":"2020-09-02T14:52:12.504Z","comments":true,"path":"oi_history/","link":"","permalink":"https://brynhild.online/oi_history/","excerpt":"从高中录取到退役ELLIAS的OI之路","text":"从高中录取到退役ELLIAS的OI之路 2017.7.24 YM录取 2017.12.29 YM1.12新年联欢会OIer合影 2018.1.19 先修调人 YM1.12教室 2018.4.7 窗外风景 非正式参加LN胜选 2018.7.16 YMOI校内集训 2018.7.25 24中集训 2019 NOIp2018省一退役 次の旅を楽しみにしています!","categories":[{"name":"memory","slug":"memory","permalink":"https://brynhild.online/categories/memory/"}],"tags":[]},{"title":"倍增 洛谷P1967 货车运输","slug":"luogu-P1967-noip2018-day-1","date":"2018-11-09T13:20:49.000Z","updated":"2020-09-02T14:56:15.431Z","comments":true,"path":"luogu-P1967-noip2018-day-1/","link":"","permalink":"https://brynhild.online/luogu-P1967-noip2018-day-1/","excerpt":"NOIp2018 day-1RP倍增祈愿luogu P1967","text":"NOIp2018 day-1RP倍增祈愿luogu P1967 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201// luogu-judger-enable-o2#pragma GCC optimize (&quot;inline&quot;)#pragma GCC optimize (&quot;-fgcse&quot;)#pragma GCC optimize (&quot;-fgcse-lm&quot;)#pragma GCC optimize (&quot;-fipa-sra&quot;)#pragma GCC optimize (&quot;-ftree-pre&quot;)#pragma GCC optimize (&quot;-ftree-vrp&quot;)#pragma GCC optimize (&quot;-fpeephole2&quot;)#pragma GCC optimize (&quot;-ffast-math&quot;)#pragma GCC optimize (&quot;-fsched-spec&quot;)#pragma GCC optimize (&quot;unroll-loops&quot;)#pragma GCC optimize (&quot;-falign-jumps&quot;)#pragma GCC optimize (&quot;-falign-loops&quot;)#pragma GCC optimize (&quot;-falign-labels&quot;)#pragma GCC optimize (&quot;-fdevirtualize&quot;)#pragma GCC optimize (&quot;-fcaller-saves&quot;)#pragma GCC optimize (&quot;-fcrossjumping&quot;)#pragma GCC optimize (&quot;-fthread-jumps&quot;)#pragma GCC optimize (&quot;-funroll-loops&quot;)#pragma GCC optimize (&quot;-freorder-blocks&quot;)#pragma GCC optimize (&quot;-fschedule-insns&quot;)#pragma GCC optimize (&quot;inline-functions&quot;)#pragma GCC optimize (&quot;-ftree-tail-merge&quot;)#pragma GCC optimize (&quot;-fschedule-insns2&quot;)#pragma GCC optimize (&quot;-fstrict-aliasing&quot;)#pragma GCC optimize (&quot;-falign-functions&quot;)#pragma GCC optimize (&quot;-fcse-follow-jumps&quot;)#pragma GCC optimize (&quot;-fsched-interblock&quot;)#pragma GCC optimize (&quot;-fpartial-inlining&quot;)#pragma GCC optimize (&quot;no-stack-protector&quot;)#pragma GCC optimize (&quot;-freorder-functions&quot;)#pragma GCC optimize (&quot;-findirect-inlining&quot;)#pragma GCC optimize (&quot;-fhoist-adjacent-loads&quot;)#pragma GCC optimize (&quot;-frerun-cse-after-loop&quot;)#pragma GCC optimize (&quot;inline-small-functions&quot;)#pragma GCC optimize (&quot;-finline-small-functions&quot;)#pragma GCC optimize (&quot;-ftree-switch-conversion&quot;)#pragma GCC optimize (&quot;-foptimize-sibling-calls&quot;)#pragma GCC optimize (&quot;-fexpensive-optimizations&quot;)#pragma GCC optimize (&quot;inline-functions-called-once&quot;)#pragma GCC optimize (&quot;-fdelete-null-pointer-checks&quot;)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#include &lt;cstdio&gt;#include &lt;algorithm&gt;using std::sort;#define Re register#define maxn 100001#define maxe 50001#define swap(x,y) ((x)^=(y)^=(x)^=(y))const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = 0; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) c = gc(), m = true; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (int x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (int x) &#123;if(x&lt;0)x=-x,putchar(&#x27;-&#x27;); write (x); putchar (&#x27;\\n&#x27;);&#125;inline const int&amp; min (const int&amp; a, const int&amp; b) &#123;return a&lt;b? a:b;&#125;struct node &#123; int fr, to, va;&#125; edge[maxe];inline bool cmp (node a, node b)&#123; return a.va &gt; b.va;&#125;int head[maxn], nxt[maxn], too[maxn], wei[maxn], ecnt;inline void addedge_d (Re int fr, Re int to, Re int va)&#123; nxt[++ ecnt]=head[fr], head[fr]=ecnt, too[ecnt]=to, wei[ecnt]=va; nxt[++ ecnt]=head[to], head[to]=ecnt, too[ecnt]=fr, wei[ecnt]=va;&#125;int fa[maxn];inline int find (register int x)&#123; while (x ^ fa[x]) x = fa[x] = fa[fa[x]]; return x;&#125;inline void Kruskal (Re int n, Re int m)&#123; register int i, j, fr, to, va, ffr, fto; for (i=1; i&lt;=m; ++i) &#123; fr=edge[i].fr, to=edge[i].to, ffr=find(fr), fto=find(to); if (ffr ^ fto) addedge_d (fr, to, edge[i].va), fa[ffr]=fto; &#125;&#125;int fl[maxn];int ex[maxn][18], ew[maxn][18];static void build_tree (Re int x, Re int dep)&#123; register int i, j, to, va; if (!fl[x]) &#123; fl[x] = dep; for (i=head[x]; i; i=nxt[i]) &#123; to=too[i], va=wei[i]; if (!fl[to]) &#123; ex[to][0] = x, ew[to][0] = va; build_tree (to, dep + 1); &#125; &#125; &#125;&#125;inline void build_forest (Re int n)&#123; register int i, j, fr, to, va; for (i=1; i&lt;=n; ++i) if (!fl[i]) &#123; ew[i][0] = 0x3f3f3f3f, ex[i][0] = i; build_tree (i, 1); &#125;&#125;inline void lca_init (Re int n)&#123; register int i, j; for (i=1; i&lt;=17; ++i) &#123; for (j=1; j&lt;=n; ++j) &#123; ex[j][i] = ex[ex[j][i-1]][i-1]; ew[j][i] = min (ew[ex[j][i-1]][i-1], ew[j][i-1]); &#125; &#125;&#125;inline int get_lca (Re int fr, Re int to)&#123; if (find(fr) ^ find(to)) return -1; register int ret=0x3f3f3f3f, i, j; if (fl[fr] &gt; fl[to]) swap (fr, to); for (i=17; i&gt;=0; --i) if (fl[ex[to][i]] &gt;= fl[fr]) ret=min (ret, ew[to][i]), to=ex[to][i]; if (fr == to) return ret; for (i=17; i&gt;=0; --i) &#123; if (ex[fr][i] ^ ex[to][i]) &#123; ret = min (ret, min (ew[to][i], ew[fr][i])); to=ex[to][i], fr=ex[fr][i]; &#125; &#125; ret=min(ret,min(ew[fr][0], ew[to][0])); return ret;&#125;signed main ()&#123; register int i, j, fr, to, va; register int n=read(), m=read(); for (i=1; i&lt;=n; ++i) fa[i] = i; for (i=1; i&lt;=m; ++i) &#123; fr=read(), to=read(), va=read(); edge[i] = &#123;fr, to, va&#125;; &#125; sort (edge+1, edge+m+1, cmp); Kruskal (n, m); build_forest (n); lca_init (n); register int _ = read (); while (_ --) writelen (get_lca(read(), read())); return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"倍增","slug":"倍增","permalink":"https://brynhild.online/tags/%E5%80%8D%E5%A2%9E/"},{"name":"生成树","slug":"生成树","permalink":"https://brynhild.online/tags/%E7%94%9F%E6%88%90%E6%A0%91/"},{"name":"并查集","slug":"并查集","permalink":"https://brynhild.online/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"GSS1 - Can you answer these queries I","slug":"GSS1","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:50:00.446Z","comments":true,"path":"GSS1/","link":"","permalink":"https://brynhild.online/GSS1/","excerpt":"线段树GSS1 - Can you answer these queries I","text":"线段树GSS1 - Can you answer these queries I Luogu SP1043Vjudge 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#pragma GCC optimize (&quot;-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2&quot;, 3)#pragma G++ optimize (&quot;Ofast&quot;, 3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;stdio.h&gt;#include &lt;ctype.h&gt;#define lson rt&lt;&lt;1,l,mid#define rson rt&lt;&lt;1|1,mid+1,r#define rint register intint n, m, x, y, in;struct node &#123; int sum, lmax, rmax, dat;&#125; tr[200001];namespace FastIO &#123; const int str=1&lt;&lt;20; const char* endl=&quot;\\n&quot;; struct Reader &#123; char buf[str],*s,*t; bool EOF_FLG; Reader():s(buf),t(buf),EOF_FLG(false) &#123;&#125;; inline char gt() &#123; return s==t&amp;&amp;((t=(s=buf)+fread(buf,1,str,stdin))==s)?EOF:(*s++); &#125; template&lt;typename T&gt;Reader&amp;operator&gt;&gt;(T&amp;x) &#123; if(EOF_FLG)return *this; register char c=0,d; while(c!=EOF&amp;&amp;(c&lt;&#x27;0&#x27;||c&gt;&#x27;9&#x27;))d=c,c=gt(); if(c==EOF) &#123; EOF_FLG=true; return *this; &#125; else x=0; while(c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;)x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-&#x27;0&#x27;,c=gt(); if(d==&#x27;-&#x27;)x=-x; return *this; &#125; &#125; cin; struct Writer &#123; char buf[str],*s,*t; Writer():s(buf),t(buf+str) &#123;&#125; ~Writer() &#123; fwrite(buf,1,s-buf,stdout); &#125; inline void pt(char c) &#123; (s==t)?(fwrite(s=buf,1,str,stdout),*s++=c):(*s++=c); &#125; template&lt;typename T&gt;Writer&amp;operator&lt;&lt;(T x) &#123; if(!x)return pt(&#x27;0&#x27;),*this; if(x&lt;0)pt(&#x27;-&#x27;),x=-x; register char a[30],t=0; while(x)a[t++]=x%10,x/=10; while(t--)pt(a[t]+&#x27;0&#x27;); return *this; &#125; Writer&amp;operator&lt;&lt;(const char*s) &#123; while(*s)pt(*s++); return *this; &#125; &#125; cout;&#125;inline const int&amp; max(const int&amp; x,const int&amp; y) &#123; return x&gt;y?x:y;&#125;inline void update (int rt) &#123; tr[rt].sum =tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].sum; tr[rt].lmax= max (tr[rt&lt;&lt;1].lmax, tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].lmax); tr[rt].rmax= max (tr[rt&lt;&lt;1|1].rmax, tr[rt&lt;&lt;1|1].sum + tr[rt&lt;&lt;1].rmax); tr[rt].dat = max (max(tr[rt&lt;&lt;1].dat, tr[rt&lt;&lt;1|1].dat), tr[rt&lt;&lt;1].rmax + tr[rt&lt;&lt;1|1].lmax);&#125;inline void build (int rt,int l,int r) &#123; if(l==r) &#123; FastIO::cin&gt;&gt;in; tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = in; return; &#125; int mid = (l+r)&gt;&gt;1; build (lson); build (rson); update (rt);&#125;inline node query (int rt, int l, int r, int ql, int qr) &#123; if (ql &lt;= l &amp;&amp; qr &gt;= r) return tr[rt]; int mid = (l+r)&gt;&gt;1; if (ql &gt; mid) return query (rson, ql, qr); if (qr &lt;= mid) return query (lson, ql, qr); else &#123; node ans,a,b; a = query (lson,ql,qr); b = query (rson,ql,qr); ans.sum = a.sum + b.sum; ans.dat = max (a.dat, a.rmax + b.lmax), ans.dat = max (ans.dat, b.dat); ans.lmax= max (a.lmax, a.sum + b.lmax); ans.rmax= max (b.rmax, b.sum + a.rmax); return ans; &#125;&#125;using namespace FastIO;int main() &#123; //freopen (&quot;nico.in&quot;,&quot;r&quot;,stdin); FastIO::cin&gt;&gt;n; build (1, 1, n); FastIO::cin&gt;&gt;m; while (m --) &#123; FastIO::cin&gt;&gt;x&gt;&gt;y; FastIO::cout&lt;&lt;query(1, 1, n, x, y).dat&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"}]},{"title":"SP1716 GSS3 - Can you answer these queries III","slug":"GSS3","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:50:13.076Z","comments":true,"path":"GSS3/","link":"","permalink":"https://brynhild.online/GSS3/","excerpt":"线段树GSS3 - Can you answer these queries III","text":"线段树GSS3 - Can you answer these queries III LuoguVjudge 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132#pragma GCC optimize (&quot;-fdelete-null-pointer-checks,inline-functions-called-once,-funsafe-loop-optimizations,-fexpensive-optimizations,-foptimize-sibling-calls,-ftree-switch-conversion,-finline-small-functions,inline-small-functions,-frerun-cse-after-loop,-fhoist-adjacent-loads,-findirect-inlining,-freorder-functions,no-stack-protector,-fpartial-inlining,-fsched-interblock,-fcse-follow-jumps,-fcse-skip-blocks,-falign-functions,-fstrict-overflow,-fstrict-aliasing,-fschedule-insns2,-ftree-tail-merge,inline-functions,-fschedule-insns,-freorder-blocks,-fwhole-program,-funroll-loops,-fthread-jumps,-fcrossjumping,-fcaller-saves,-fdevirtualize,-falign-labels,-falign-loops,-falign-jumps,unroll-loops,-fsched-spec,-ffast-math,Ofast,inline,-fgcse,-fgcse-lm,-fipa-sra,-ftree-pre,-ftree-vrp,-fpeephole2&quot;, 3)#pragma G++ optimize (&quot;Ofast&quot;, 3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;stdio.h&gt;#include &lt;ctype.h&gt;#define lson rt&lt;&lt;1,l,mid#define rson rt&lt;&lt;1|1,mid+1,r#define rint register intint n, m, x, y, in, opt;struct node &#123; int sum, lmax, rmax, dat, l, r;&#125; tr[200001];namespace FastIO &#123; const int str=1&lt;&lt;20; const char* endl=&quot;\\n&quot;; struct Reader &#123; char buf[str],*s,*t; bool EOF_FLG; Reader():s(buf),t(buf),EOF_FLG(false) &#123;&#125;; inline char gt() &#123; return s==t&amp;&amp;((t=(s=buf)+fread(buf,1,str,stdin))==s)?EOF:(*s++); &#125; template&lt;typename T&gt;Reader&amp;operator&gt;&gt;(T&amp;x) &#123; if(EOF_FLG)return *this; register char c=0,d; while(c!=EOF&amp;&amp;(c&lt;&#x27;0&#x27;||c&gt;&#x27;9&#x27;))d=c,c=gt(); if(c==EOF) &#123; EOF_FLG=true; return *this; &#125; else x=0; while(c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;)x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-&#x27;0&#x27;,c=gt(); if(d==&#x27;-&#x27;)x=-x; return *this; &#125; &#125; cin; struct Writer &#123; char buf[str],*s,*t; Writer():s(buf),t(buf+str) &#123;&#125; ~Writer() &#123; fwrite(buf,1,s-buf,stdout); &#125; inline void pt(char c) &#123; (s==t)?(fwrite(s=buf,1,str,stdout),*s++=c):(*s++=c); &#125; template&lt;typename T&gt;Writer&amp;operator&lt;&lt;(T x) &#123; if(!x)return pt(&#x27;0&#x27;),*this; if(x&lt;0)pt(&#x27;-&#x27;),x=-x; register char a[30],t=0; while(x)a[t++]=x%10,x/=10; while(t--)pt(a[t]+&#x27;0&#x27;); return *this; &#125; Writer&amp;operator&lt;&lt;(const char*s) &#123; while(*s)pt(*s++); return *this; &#125; &#125; cout;&#125;inline const int&amp; max(const int&amp; x,const int&amp; y) &#123; return x&gt;y?x:y;&#125;inline void update (int rt) &#123; tr[rt].sum =tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].sum; tr[rt].lmax= max (tr[rt&lt;&lt;1].lmax, tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].lmax); tr[rt].rmax= max (tr[rt&lt;&lt;1|1].rmax, tr[rt&lt;&lt;1|1].sum + tr[rt&lt;&lt;1].rmax); tr[rt].dat = max (max(tr[rt&lt;&lt;1].dat, tr[rt&lt;&lt;1|1].dat), tr[rt&lt;&lt;1].rmax + tr[rt&lt;&lt;1|1].lmax);&#125;inline void build (int rt,int l,int r) &#123; tr[rt].l = l, tr[rt].r = r; if(l==r) &#123; FastIO::cin&gt;&gt;in; tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = in; return; &#125; int mid = (l+r)&gt;&gt;1; build (lson); build (rson); update (rt);&#125;inline node query (int rt, int l, int r, int ql, int qr) &#123; if (ql &lt;= l &amp;&amp; qr &gt;= r) return tr[rt]; int mid = (l+r)&gt;&gt;1; if (ql &gt; mid) return query (rson, ql, qr); if (qr &lt;= mid) return query (lson, ql, qr); else &#123; node ans,a,b; a = query (lson,ql,qr); b = query (rson,ql,qr); ans.sum = a.sum + b.sum; ans.dat = max (a.dat, a.rmax + b.lmax), ans.dat = max (ans.dat, b.dat); ans.lmax= max (a.lmax, a.sum + b.lmax); ans.rmax= max (b.rmax, b.sum + a.rmax); return ans; &#125;&#125;inline void work (int rt, int to, int val)&#123; if (tr[rt].l == tr[rt].r) &#123; tr[rt].sum = tr[rt].lmax = tr[rt].rmax = tr[rt].dat = val; return; &#125; register int mid = (tr[rt].l + tr[rt].r) &gt;&gt; 1; if (to &lt;= mid) work (rt&lt;&lt;1, to, val); else work (rt&lt;&lt;1|1, to, val); update(rt);&#125;using namespace FastIO;int main ()&#123; //freopen (&quot;nico.in&quot;,&quot;r&quot;,stdin); cin &gt;&gt; n; build (1, 1, n); cin &gt;&gt; m; while (m --) &#123; cin &gt;&gt; opt &gt;&gt; x &gt;&gt; y; if (opt) cout &lt;&lt; query (1, 1, n, x, y).dat &lt;&lt; endl; else work (1,x,y); &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"}]},{"title":"SP2713 GSS4 - Can you answer these queries IV","slug":"GSS4","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:57:53.169Z","comments":true,"path":"GSS4/","link":"","permalink":"https://brynhild.online/GSS4/","excerpt":"GSS4 - Can you answer these queries IVLuoguVjudge","text":"GSS4 - Can you answer these queries IVLuoguVjudge 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154#pragma G++ optimize (&quot;Ofast&quot;, 3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;stdio.h&gt;#include &lt;ctype.h&gt;#include &lt;math.h&gt;#define root 1,1,n#define lson rt&lt;&lt;1,l,mid#define rson rt&lt;&lt;1|1,mid+1,r#define swap(x,y) y^=x^=y^=x#define maxn 100001 #define dmax 400001#define rint register int#define ll long longnamespace fastIO &#123; const int str=1&lt;&lt;20; const char* endll=&quot;\\n&quot;; struct Reader &#123; char buf[str],*s,*t; bool EOF_FLG; Reader():s(buf),t(buf),EOF_FLG(false) &#123;&#125;; inline char gt() &#123; return s==t&amp;&amp;((t=(s=buf)+fread(buf,1,str,stdin))==s)?EOF:(*s++); &#125; #define gt() getchar() template&lt;typename T&gt;Reader&amp;operator&gt;&gt;(T&amp;x) &#123; if(EOF_FLG)return *this; register char c=0,d; while(c!=EOF&amp;&amp;!isdigit(c))d=c,c=gt(); if(c==EOF) &#123; EOF_FLG=true; return *this; &#125; else x=0; while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+c-&#x27;0&#x27;,c=gt(); if(d==&#x27;-&#x27;)x=-x; return *this; &#125; &#125; cin; struct Writer &#123; char buf[str],*s,*t; Writer():s(buf),t(buf+str) &#123;&#125; ~Writer() &#123; fwrite(buf,1,s-buf,stdout); &#125; inline void pt(char c) &#123; (s==t)?(fwrite(s=buf,1,str,stdout),*s++=c):(*s++=c); &#125; #define pt(c) putchar(c) template&lt;typename T&gt;Writer&amp;operator&lt;&lt;(T x) &#123; if(!x)return pt(&#x27;0&#x27;),*this; if(x&lt;0)pt(&#x27;-&#x27;),x=-x; register char a[30],t=0; while(x)a[t++]=x%10,x/=10; while(t--)pt(a[t]+&#x27;0&#x27;); return *this; &#125; Writer&amp;operator&lt;&lt;(const char*s) &#123; while(*s)pt(*s++); return *this; &#125; &#125; cout;&#125;using namespace fastIO;struct TreeNode &#123; int l, r; long long sum, mxx;&#125; dat[dmax];long long in;inline const long long&amp; max (const long long&amp; x,const long long&amp; y) &#123;return x&gt;y? x:y;&#125;inline void update (int rt)&#123; dat[rt].sum = dat[rt&lt;&lt;1].sum + dat[rt&lt;&lt;1|1].sum; dat[rt].mxx = max (dat[rt&lt;&lt;1].mxx, dat[rt&lt;&lt;1|1].mxx);&#125;inline void build (int rt, int l, int r)&#123; dat[rt].l = l, dat[rt].r = r; if (l == r) &#123; fastIO::cin &gt;&gt; in; dat[rt].sum = dat[rt].mxx = in; return; &#125; register int mid = (l + r) &gt;&gt; 1; build (lson); build (rson); update (rt);&#125;inline long long query (int rt, int l, int r)&#123; register int L = dat[rt].l, R = dat[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) return dat[rt].sum; register int mid = (L + R) &gt;&gt; 1; register long long ret = 0ll; if (l &lt;=mid) ret = query (rt&lt;&lt;1, l, r); if (mid &lt; r) ret += query (rt&lt;&lt;1|1,l,r); return ret;&#125;inline void change (int rt, int l, int r)&#123; register int L = dat[rt].l, R = dat[rt].r; if (L == R) &#123; //cout&lt;&lt;dat[rt].sum&lt;&lt;&quot; -&gt; &quot;; dat[rt].sum = sqrt (dat[rt].sum), dat[rt].mxx = sqrt (dat[rt].mxx); //cout&lt;&lt;dat[rt].sum&lt;&lt;endll; return; &#125; register int mid = (L + R) &gt;&gt; 1; if (l&lt;=mid &amp;&amp; dat[rt&lt;&lt;1].mxx &gt;1) change (rt&lt;&lt;1, l, r); if (mid&lt; r &amp;&amp; dat[rt&lt;&lt;1|1].mxx&gt;1) change (rt&lt;&lt;1|1,l,r); update (rt);&#125;//using namespace fastIO;inline void Write (const int&amp; x, const int&amp; y) &#123;cout &lt;&lt; query(1, x, y) &lt;&lt; endll;&#125;inline void Change (const int&amp; x, const int&amp; y) &#123;change (1, x, y);&#125;int main ()&#123; register int _ = 0, n; while (scanf (&quot;%d&quot;, &amp;n) != EOF) &#123; fastIO::cout &lt;&lt; &quot;Case #&quot; &lt;&lt; ++ _ &lt;&lt; &quot;:&quot; &lt;&lt; endll; build (root); register int m, x, y, ret; register bool opt; fastIO::cin &gt;&gt; m; while (m --) &#123; fastIO::cin &gt;&gt; opt &gt;&gt; x &gt;&gt; y; if (x &gt; y) swap (x, y); opt? Write(x, y):Change (x, y); &#125; putchar (&#x27;\\n&#x27;); &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"}]},{"title":"SP2916 GSS5 - Can you answer these queries V","slug":"GSS5","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:57:27.757Z","comments":true,"path":"GSS5/","link":"","permalink":"https://brynhild.online/GSS5/","excerpt":"GSS4 - Can you answer these queries VLuoguVjudge","text":"GSS4 - Can you answer these queries VLuoguVjudge 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132#pragma GCC optimize (2)#pragma G++ optimize (2)#pragma GCC optimize (3)#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;)#pragma GCC target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma GCC target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma GCC target (&quot;f16c&quot;)#pragma G++ target (&quot;sse3&quot;,&quot;sse2&quot;,&quot;sse&quot;)#pragma G++ target (&quot;avx&quot;,&quot;sse4&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;ssse3&quot;)#pragma G++ target (&quot;f16c&quot;)#include &lt;cstdio&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS], *p1 = buf, *p2 = buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline long long read ()&#123; register long long x = 0; register char c = gc(); register bool m = 0; while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &#123;if (c == &#x27;-&#x27;) m = true; c = gc();&#125; while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ &#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (long long x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (long long x)&#123; if (x &lt; 0ll) putchar(&#x27;-&#x27;), x = -x; write (x), putchar (&#x27;\\n&#x27;);&#125;#define Re register#define maxn 10001#define dmax 40001#define swap(x,y) ((y)^=(x)^=(y)^=(x)) struct node &#123; int l, r; long long sum, lmax, rmax, dat;&#125; tr[dmax], null;inline const long long&amp; max (const long long&amp; x,const long long&amp; y) &#123;return x&gt;y? x:y;&#125;inline void update (int rt)&#123; register int lson = rt&lt;&lt;1, rson = rt&lt;&lt;1|1; tr[rt].sum = tr[lson].sum + tr[rson].sum; tr[rt].lmax= max (tr[lson].lmax, tr[lson].sum + tr[rson].lmax); tr[rt].rmax= max (tr[rson].rmax, tr[rson].sum + tr[lson].rmax); tr[rt].dat = max (max(tr[lson].dat, tr[rson].dat), tr[lson].rmax + tr[rson].lmax);&#125;static void build (int rt, int l, int r) &#123; tr[rt].l = l, tr[rt].r = r; if (l == r) &#123;tr[rt].dat = tr[rt].sum = tr[rt].lmax = tr[rt].rmax = read (); return;&#125; register int mid = (l + r) &gt;&gt; 1; build (rt&lt;&lt;1, l, mid), build (rt&lt;&lt;1|1, mid + 1, r); update (rt);&#125;static node query (int rt, int ql, int qr) &#123; register int l = tr[rt].l, r = tr[rt].r; if (ql &gt; qr) return null; if (ql &lt;= l &amp;&amp; qr &gt;= r) return tr[rt]; register int mid = (l + r) &gt;&gt; 1; if (ql &gt; mid) return query (rt&lt;&lt;1|1,ql,qr); if (qr &lt;= mid) return query (rt&lt;&lt;1, ql, qr); else &#123; register node ret, a, b; a = query (rt&lt;&lt;1, ql, qr), b = query (rt&lt;&lt;1|1, ql, qr); ret.sum = a.sum + b.sum; ret.dat = max (a.dat, a.rmax + b.lmax), ret.dat = max (ret.dat, b.dat); ret.lmax= max (a.lmax, a.sum + b.lmax), ret.rmax= max (b.rmax, b.sum + a.rmax); return ret; &#125;&#125;static void modify (int rt, int to, long long val)&#123; if (tr[rt].l == tr[rt].r) &#123;tr[rt].sum = tr[rt].lmax = tr[rt].rmax = tr[rt].dat = val; return;&#125; register int mid = (tr[rt].l + tr[rt].r) &gt;&gt; 1; if (to &lt;= mid) modify (rt&lt;&lt;1, to, val); else modify (rt&lt;&lt;1|1, to, val); update(rt);&#125;int main() &#123; register int _ = read (); register int x1, y1, x2, y2; register int n, m; register node a, b, c; register long long tmp; register char opt; while (_ --) &#123; n = read ();//, m = read (); build (1, 1, n); m = read (); while (m --) &#123; //opt = &#x27;z&#x27;; //while ((opt ^ &#x27;C&#x27;) &amp;&amp; (opt ^ &#x27;Q&#x27;)) opt = gc(); //if (opt ^ &#x27;C&#x27;) &#123; x1 = read (), y1 = read (), x2 = read (), y2 = read (); if (y1&lt;x1) swap(x1,y1); if (y2&lt;x2) swap(x2,y2); if (x1&gt;y2) swap(x1,x2), swap(y1,y2); if (y1 &lt; x2) &#123; writelen (max(query(1,x1,y1-1).rmax, 0) + query(1,y1,x2).sum + max(query(1,x2+1,y2).lmax, 0)); &#125; else &#123; a = query (1, x2, y1), b = query(1,x1,x2-1), c = query(1,y1+1,y2); tmp = a.dat; tmp = max (tmp, a.lmax + b.rmax); tmp = max (tmp, c.lmax + a.rmax); tmp = max (tmp, a.sum + max(0, b.rmax) + max(0, c.lmax)); writelen (tmp); &#125; &#125; //else &#123;x1 = read (), tmp = read (); modify (1, x1, tmp);&#125; &#125; &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"}]},{"title":"Nescafé17 守卫者的挑战","slug":"Nescafe17-Defenders'-Challenge","date":"2018-11-02T02:08:23.000Z","updated":"2020-09-02T14:53:15.348Z","comments":true,"path":"Nescafe17-Defenders'-Challenge/","link":"","permalink":"https://brynhild.online/Nescafe17-Defenders'-Challenge/","excerpt":"Nescafé17 守卫者的挑战","text":"Nescafé17 守卫者的挑战 守卫者的挑战[Description]打开了黑魔法师Vani的大门,队员们在迷宫般的路上漫无目的地搜寻着关押applepi的监狱的所在地.突然,眼前一道亮光闪过.“我,Nizem,是黑魔法圣殿的守卫者.如果你能通过我的挑战,那么你可以带走黑魔法圣殿的地图……”瞬间,队员们被传送到了一个擂台上,最初身边有一个容量为K的包包. 擂台赛一共有项挑战,各项挑战依次进行.第项挑战有一个属性ai,如果ai≥0,表示这次挑战成功后可以再获得一个容量为ai的包包；如果ai = -1,则表示这次挑战成功后可以得到一个大小为 1 的地图残片.地图残片必须装在包包里才能带出擂台,包包没有必要全部装满,但是队员们必须把获得的所有的地图残片都带走（没有得到的不用考虑,只需要完成所有N项挑战后背包容量足够容纳地图残片即可）,才能拼出完整的地图.并且他们至少要挑战成功L次才能离开擂台. 队员们一筹莫展之时,善良的守卫者Nizem帮忙预估出了每项挑战成功的概率,其中第i项挑战成功的概率为pi%.现在，请你帮忙预测一下，队员们能够带上他们获得的地图残片离开擂台的概率. [Data Size]对于 100% 的数据,保证 $ 0≤K≤2000$ , $ 0≤N≤200$ , $-1≤ai≤1000$ , $0≤L≤N$ , $0≤pi≤100$ . [Solution]刚看到此题时,我被那个概率吓得半死.但看了数据范围,此题就是一道很简单的水题了. 对于可以赢l把以上并且背包不会溢出的概率 $P_0$ ,通过枚举结束时的背包容量和赢的次数快速求出: $$ P_0=\\sum_{i=l}^{n}\\sum_{j=0}^{K}P_{i, j} $$ 而 $P_{i, j}$ 可以通过刷表法 $O(n^2K)≈8*10^7$ 地求出: 定义状态 $dp[i][j][k]$ 代表达到第$i$场胜$j$场背包容量为$k$时的概率,转移方程很显然为本次成功的概率和本次失败的概率之和: 123dp[i][j][k] += dp[i-1][j][k] * (1 - dat[i].dat);if ((tmp = min (K + dat[i].opt, n)) &lt; 0) continue;dp[i][j+1][tmp] += dp[i-1][j][k] * dat[i].dat; 这个时间复杂度看起来很悬,未免会有稍作优化的想法.本题K的范围2000,但是真的需要2000吗?共有N项挑战,对于每一项挑战最多可以获得一块地图残片,所以背包实际的最大容量就是N次挑战中所有类型-1的数量,极限情况下是n,这样复杂度就会降到 $O(n^3)$, 较为稳妥. [Code]考场代码,写得略丑,请谅解. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#pragma G++ optimize (3)#include &lt;cstdio&gt;#include &lt;algorithm&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;inline double getdou ()&#123; register double x=0; register char c = gc (); while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) c = gc(); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x * 10 + (c^&#x27;0&#x27;), c = gc(); if (c == &#x27;.&#x27;) &#123; register double s = 0.1, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = x + (c-&#x27;0&#x27;)*s, s/=10, c = gc (); &#125; return x;&#125;inline const int&amp; min (const int&amp; a, const int&amp; b)&#123;return a&lt;b? a:b;&#125;#define Re registerstruct node &#123; int opt; double dat;&#125; dat[201];inline bool cmp (node a, node b) &#123;return a.opt &gt; b.opt;&#125;double dp[201][201][201];signed main ()&#123; freopen (&quot;guard.in&quot;, &quot;r&quot;, stdin); freopen (&quot;guard.out&quot;,&quot;w&quot;,stdout); register int n = read (), l = read (), k = read (), tmp; for (Re int i = 1; i &lt;= n; ++ i) dat[i].dat = getdou()/100; for (Re int i = 1; i &lt;= n; ++ i) dat[i].opt = read (); std::sort (dat + 1, dat + n + 1, cmp); dp[0][0][min(n, k)] = 1.0; for (Re int i = 1; i &lt;= n; ++ i) &#123; for (Re int j = 0; j &lt;= i; ++ j) &#123; for (Re int K = 0; K &lt;= n; ++ K) &#123; dp[i][j][K] += dp[i-1][j][K] * (1 - dat[i].dat); if ((tmp = min (K + dat[i].opt, n)) &lt; 0) continue; dp[i][j+1][tmp] += dp[i-1][j][K] * dat[i].dat; &#125; &#125; &#125; register double ans = 0.0; for (Re int i = l; i &lt;= n; ++ i) for (Re int j = 0; j &lt;= n; ++ j) ans += dp[n][i][j]; printf (&quot;%.6lf&quot;, ans); fclose (stdin), fclose (stdout); return 0;&#125; Cena评测$0.03s$,效率还是可以的.","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"contest","slug":"contest","permalink":"https://brynhild.online/tags/contest/"},{"name":"DP","slug":"DP","permalink":"https://brynhild.online/tags/DP/"}]},{"title":"STL 洛谷P3369 普通平衡树","slug":"lg-P3369-STL","date":"2018-10-30T08:31:14.000Z","updated":"2020-09-02T14:56:52.068Z","comments":true,"path":"lg-P3369-STL/","link":"","permalink":"https://brynhild.online/lg-P3369-STL/","excerpt":"luogu P3369 普通平衡树STL 实现","text":"luogu P3369 普通平衡树STL 实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445// luogu-judger-enable-o2#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; c ^ &#x27;-&#x27;) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc(); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (int x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (int x) &#123;if(x&lt;0) x=-x, putchar(&#x27;-&#x27;);write (x);putchar (&#x27;\\n&#x27;);&#125;vector &lt;int&gt; eli;signed main ()&#123; register int n = read (), x, opt; while (n --) &#123; opt = read (), x = read (); if (opt == 1) eli.insert(upper_bound(eli.begin(), eli.end(), x), x); else if (opt == 2) eli.erase(lower_bound(eli.begin(), eli.end(), x)); else if (opt == 3) writelen(lower_bound(eli.begin(), eli.end(), x)-eli.begin()+1); else if (opt == 4) writelen(eli[x - 1]); else if (opt == 5) writelen(*--lower_bound(eli.begin(), eli.end(), x)); else if (opt == 6) writelen(*upper_bound(eli.begin(), eli.end(), x)); &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"STL","slug":"STL","permalink":"https://brynhild.online/tags/STL/"}]},{"title":"SP2885 WORDRING - Word Rings","slug":"SP2885-WORDRING-World-Rings","date":"2018-10-19T05:57:54.000Z","updated":"2020-09-02T14:51:23.524Z","comments":true,"path":"SP2885-WORDRING-World-Rings/","link":"","permalink":"https://brynhild.online/SP2885-WORDRING-World-Rings/","excerpt":"SP2885 WORDRING - Word Rings","text":"SP2885 WORDRING - Word Rings 本题求平均环长,可以将每个字符串的前后两个字符看做点,这两个点存在于一个字符串的关系视为一条边,接着二分枚举答案(单调性是很显然的),用队列优化BellmanFord判断即可. 关键代码: 12345678910111213141516static bool __fastcall spfa_dfs (Re int fr, Re double mid)&#123; vis[fr] = true; register int to; for (Re int i = head[fr]; i; i = nxt[i]) &#123; to = too[i]; if (dis[fr] + wei[i] - mid &gt; dis[to]) &#123; dis[to] = dis[fr] + wei[i] - mid; if (vis[to] || spfa_dfs(to, mid)) &#123;vis[fr] = false; return true;&#125; &#125; &#125; vis[fr] = false; return false;&#125; 1234567inline bool judge (register double mid)&#123; memset (dis, 0, sizeof dis); for (Re int i = 1; i &lt;= hhsh; ++ i) if (spfa_dfs (i, mid)) return true; return false;&#125; 1234567891011121314151617181920212223242526while (true) &#123; n = read (); if (!n) return 0; memset (head, 0, sizeof head); memset (hash, 0, sizeof hash); ecnt = hhsh = 0; while (n --) &#123; c = gc(), len = 0; while (c == &#x27;\\n&#x27; || c == &#x27;\\r&#x27;) c = gc (); while ((c != &#x27;\\n&#x27;) &amp;&amp; (c != &#x27;\\r&#x27;)) s[++ len] = c, c = gc(); fr = calc(s[1], s[2]), to = calc(s[len-1], s[len]); if (!hash[fr]) hash[fr] = ++ hhsh; if (!hash[to]) hash[to] = ++ hhsh; addedge (hash[fr], hash[to], len); &#125; l = 0.0, r = 1000.0; while (r - l &gt;= eps) &#123; mid = (l + r) / 2; if (judge(mid)) l = mid; else r = mid; &#125; if (l == 0) puts (&quot;No solution.&quot;); else printf (&quot;%.2lf\\n&quot;, l); &#125; 祝大家 RP++ !","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"CF372B Counting Rectangles is Fun","slug":"CF372B-Counting-Rectangles-is-Fun","date":"2018-09-27T11:21:43.000Z","updated":"2020-09-02T14:55:12.878Z","comments":true,"path":"CF372B-Counting-Rectangles-is-Fun/","link":"","permalink":"https://brynhild.online/CF372B-Counting-Rectangles-is-Fun/","excerpt":"CF372B Counting Rectangles is Fun","text":"CF372B Counting Rectangles is Fun NULL Problem :题目描述给定一个${n* m}$的01矩阵, q次询问, 每次询问指定一个子矩形, 求该子矩形种有多少个只包含0的子矩阵.矩阵从上到下编号1n, 从左到右编号1m. 输入格式第一行三个整数n,m,q. 接下来n行, 每行m个整数描述该矩阵. 接下来q行, 每行四个整数a,b,c,d表示询问的子矩阵左上角为(a,b), 右下角为(c,d). 输出格式对于每个询问, 输出一个整数表示答案. EINS Solution看到本题很小的数据范围 ${1&lt;=n,m&lt;=40}$ , 内心或许会萌发一些类似于把整张图状压的想法. 但看到时限是 ${4s}$ , 当然会想到本题可以使用暴力求解. 本题要求两个点之间共有多少个全部为0的子矩阵,q的范围高达${3* 10^5}$, 不难想到, 可以通过暴力的dp打出表然后${O(1)}$查询. 令${dp[x1][y1][x2][y2]}$表示从(x1, y1)到(x2, y2)的答案, 不难得到状态转移方程: 约定${x1&lt;=x2, y1&lt;=y2}$ ${dp[x1][y1][x2][y2]=dp[x1][y1][x2-1][y2]+dp[x1][y1][x2][y2-1]-dp[x1][y1][x2-1][y2-1]}$ ${dp[x1][y1][x2][y2] +=}$ 该区域内能获得的矩形数量 ZWEI Code代码就比较好写: 1234567891011121314151617181920212223242526272829303132register int n = read (), m = read (), _ = read (), nico; for (Re int i = 1; i &lt;= n; ++ i) &#123; for (Re int j = 1; j &lt;= m; ++ j) &#123; scanf (&quot;%1d&quot;, &amp;nico); if (nico) lin[i][j] = 0; else lin[i][j] = lin[i-1][j] + 1; &#125; &#125; for (Re int frx = 1; frx &lt;= n; ++ frx) &#123; for (Re int fry = 1; fry &lt;= m; ++ fry) &#123; for (Re int tox = frx; tox &lt;= n; ++ tox) &#123; for (Re int toy = fry; toy &lt;= m; ++ toy) &#123; ans[frx][fry][tox][toy] = ans[frx][fry][tox-1][toy] + ans[frx][fry][tox][toy-1] - ans[frx][fry][tox-1][toy-1]; nico = tox - frx + 1; for (Re int k = toy; k &gt;= fry; -- k) &#123; nico = min (nico, lin[tox][k]); ans[frx][fry][tox][toy] += nico; &#125; &#125; &#125; &#125; &#125; while (_ --) writelen (ans[read()][read()][read()][read()]);","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"UVA1714 Keyboarding","slug":"UVA1714-Keyboarding","date":"2018-08-31T14:41:16.000Z","updated":"2020-09-02T14:51:08.089Z","comments":true,"path":"UVA1714-Keyboarding/","link":"","permalink":"https://brynhild.online/UVA1714-Keyboarding/","excerpt":"ACM-ICPC World Final: UVA1714 Keyboarding","text":"ACM-ICPC World Final: UVA1714 Keyboarding NULL这道题居然是ACM-ICPC World Final的题目 Description给定一个r行c列的在屏幕上的“虚拟键盘”，我们需要通过“上，下，左，右，选择”5个控制键来移动屏幕上的光标来打印文本。一开始，光标在键盘的左上 角，每次按方向键，光标总是跳到下一个在该方向上与当前位置不同的字符，若不存在则不移动。每次按选择键，则将光标所在位置的字符打印出来。现在求打印给定文本（要在结尾打印换行符）的最少按键次数。 Input第一行输入${r,c(1≤r,c≤50)}$ 接下来给出一个 ${r* c}$ 的键盘，包括大写字母，数字，横线以及星号（星号代表${Enter}$换行） 最后一行是要打印的文本串s，s的长度不超过10000. Output输出打印文本（包括结尾换行符）的最少按键次数。保证一定有解。 Sample Input 2 19 ABCDEFGHIJKLMNOPQZY X*****Y AZAZ Sample Output 19 注: 部分内容被省略 数据可能有多组 EINS用nxt[][]维护向四个方向能到的第一个非当前点字符的位置 BFS容器维护四个值:nowx 当前x坐标 nowy 当前y坐标 ste 当前有效字符长度 sum 总步数 先查看当前扩展的字符是否有效,有效则直接入队,判断是否结束,无效则考虑向周围移动. ZWEI直接上代码 next 处理部分 1234567891011121314151617181920212223for (rint i = 1; i &lt;= n; i ++) &#123; for (rint j = 1; j &lt;= m; j ++) &#123; ch = dat[i][j]; if (dat[i-1][j] != ch) nxt[i][j][0] = make_pair (i-1, j); else nxt[i][j][0] = nxt[i-1][j][0]; for (rint k = i + 1; k &lt;= n; k ++) &#123; if (dat[k][j] != ch) &#123;nxt[i][j][1] = make_pair (k, j); break;&#125; &#125; if (dat[i][j-1] != ch) nxt[i][j][2] = make_pair (i, j-1); else nxt[i][j][2] = nxt[i][j-1][2]; for (rint k = j + 1; k &lt;= m; k ++) &#123; if (dat[i][k] != ch) &#123;nxt[i][j][3] = make_pair (i, k); break;&#125; &#125; &#125; &#125; 左和上直接继承,右侧暴力枚举,顺便更新路过的点也可以,但是我太菜了没写 比较基本的BFS 12345678910111213141516171819while (!que.empty())&#123; fr = que.front(), que.pop (); nowx = fr.x, nowy = fr.y, nste = fr.ste, nsum = fr.sum; if (dat[nowx][nowy] == s[nste + 1]) &#123; que.push ((node) &#123;nowx, nowy, nste + 1, nsum + 1&#125;); if (nste + 1 == lens) &#123;printf (&quot;%d\\n&quot;, nsum + 1); break;&#125; &#125; else &#123; for (rint i = 0; i &lt;= 3; i ++) &#123; gox = nxt[nowx][nowy][i].first, goy = nxt[nowx][nowy][i].second; if(!gox || !goy) continue; if (vis[gox][goy] &lt; nste) &#123; vis[gox][goy] = nste; que.push ((node)&#123;gox, goy, nste, nsum + 1&#125;);&#125; &#125; &#125;&#125; DREI注意事项 可能有多组数据 最后不要忘记打空格 小心字符串的输入和各种换行符 留心初始化 VIER最后,祝大家 RP ++","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"Luogu P4289 [HAOI2008]移动玩具","slug":"Luogu-P4289","date":"2018-08-31T13:17:29.000Z","updated":"2020-09-02T14:53:55.588Z","comments":true,"path":"Luogu-P4289/","link":"","permalink":"https://brynhild.online/Luogu-P4289/","excerpt":"Luogu P4289 [HAOI2008]移动玩具","text":"Luogu P4289 [HAOI2008]移动玩具 NULL在一个4*4的方框内摆放了若干个相同的玩具，某人想将这些玩具重新摆放成为他心中理想的状态，规定移动时只能将玩具向上下左右四个方向移动，并且移动的位置不能有玩具，请你用最少的移动次数将初始的玩具状态移动到某人心中的目标状态。 EINS很显然地发现,这道题搜索树的深度几乎是无穷的,易于想到用BFS求解. ${4 * 4}$的方阵,总共状态的个数不过 ${65535}$ 种,这告诉我们很普通的BFS就能AC本题.看到题目中每个节点的状态只有 ${0, 1}$ 两种,不难想到使用二位(二进制)哈希判重.队列手写,减小一些常数. ZWEI每个状态的容器 1234567891011struct StandNode&#123; bool a[16]; inline int get_hash () &#123; register int ret &#x3D; a[0]; for (rint i &#x3D; 1; i &lt;&#x3D; 15; i ++) ret &#x3D; (ret&lt;&lt;1) + a[i]; return ret; &#125;&#125; nico_STA, nico_FIN; get_hash() 用来求解每个状态的哈希值, nico_STA 和 nico_nico_FIN 存储初始状态和结束状态. 队列元素 12345struct QueueNode&#123; StandNode a; int ste;&#125; que[65537]; 存储当前状态和步数 主程序 123456789101112131415161718192021int main ()&#123; input (); int FIN = nico_FIN.get_hash(); register int head = 0, tail = 1, diff, xpos, kiana; que[tail].a = nico_STA; sjb[nico_STA.get_hash()] = true; while (head &lt; tail) &#123; head ++; if (que[head].a.get_hash() == FIN) &#123; printf (&quot;%d&quot;, que[head].ste); return 0; &#125; for (rint i = 0; i &lt;= 15; i ++) nico_bfswork (i, i % 4, head, tail); &#125; puts (&quot;No Solution&quot;); return 0;&#125; BFS操作函数 12345678910111213141516171819202122232425262728inline void nico_bfswork (register int diff, register int xpos, register int head, register int &amp;tail)&#123; register StandNode ellias; register int kiana; if (xpos &amp;&amp; !que[head].a.a[diff - 1]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff - 1]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (xpos &lt;= 2 &amp;&amp; !que[head].a.a[diff + 1]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff + 1]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (diff &gt;= 4 &amp;&amp; !que[head].a.a[diff - 4]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff - 4]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (diff &lt;= 11 &amp;&amp; !que[head].a.a[diff + 4]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff + 4]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125;&#125; 枚举四种方向, 判断是否可行, 加入队列. 特别提醒: tail 一定要取地址 DREI代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma G++ optimize (&quot;Ofast&quot;, 3)#include &lt;cstdio&gt;#include &lt;map&gt;using namespace std;#define rint register int#define swap(x,y) ((y)^=(x)^=(y)^=(x))#define gc() getchar()struct StandNode&#123; bool a[16]; inline int get_hash () &#123; register int ret = a[0]; for (rint i = 1; i &lt;= 15; i ++) ret = (ret&lt;&lt;1) + a[i]; return ret; &#125;&#125; nico_STA, nico_FIN;struct QueueNode&#123; StandNode a; int ste;&#125; que[65537];inline void input ()&#123; register char c[5]; register int pos = 0; for (rint t = 1; t &lt;= 4; t ++) &#123; scanf (&quot;%s&quot;, c); for (rint i = 0; i &lt;= 3; i ++) nico_STA.a[pos ++] = c[i] - &#x27;0&#x27;; &#125; pos = 0; for (rint t = 1; t &lt;= 4; t ++) &#123; scanf (&quot;%s&quot;, c); for (rint i = 0; i &lt;= 3; i ++) nico_FIN.a[pos ++] = c[i] - &#x27;0&#x27;; &#125;&#125;map &lt;int, bool&gt; sjb;inline void nico_bfswork (register int diff, register int xpos, register int head, register int &amp;tail)&#123; register StandNode ellias; register int kiana; if (xpos &amp;&amp; !que[head].a.a[diff - 1]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff - 1]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (xpos &lt;= 2 &amp;&amp; !que[head].a.a[diff + 1]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff + 1]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (diff &gt;= 4 &amp;&amp; !que[head].a.a[diff - 4]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff - 4]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125; if (diff &lt;= 11 &amp;&amp; !que[head].a.a[diff + 4]) &#123; ellias = que[head].a, swap (ellias.a[diff], ellias.a[diff + 4]); kiana = ellias.get_hash (); if (!sjb[kiana]) que[++ tail].a = ellias, que[tail].ste = que[head].ste + 1, sjb[kiana] = true; &#125;&#125;signed main ()&#123; input (); int FIN = nico_FIN.get_hash(); register int head = 0, tail = 1, diff, xpos, kiana; que[tail].a = nico_STA; sjb[nico_STA.get_hash()] = true; while (head &lt; tail) &#123; head ++; if (que[head].a.get_hash() == FIN) &#123; printf (&quot;%d&quot;, que[head].ste); return 0; &#125; for (rint i = 0; i &lt;= 15; i ++) nico_bfswork (i, i % 4, head, tail); &#125; puts (&quot;No Solution&quot;); return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"CF749E Inversions After Shuffle","slug":"CF749E-Inversions-After-Shuffle","date":"2018-08-14T05:24:30.000Z","updated":"2020-09-02T14:54:46.098Z","comments":true,"path":"CF749E-Inversions-After-Shuffle/","link":"","permalink":"https://brynhild.online/CF749E-Inversions-After-Shuffle/","excerpt":"CF749E Inversions After Shuffle给出一个1~n的排列,从中等概率抽取一个连续的片段,并对其进行等概率全排列,求排列后整个序列的逆序对的期望个数.","text":"CF749E Inversions After Shuffle给出一个1~n的排列,从中等概率抽取一个连续的片段,并对其进行等概率全排列,求排列后整个序列的逆序对的期望个数. problem给出一个1~n的排列,从中等概率抽取一个连续的片段,并对其进行等概率全排列,求排列后整个序列的逆序对的期望个数. solution设所选的区间长度为l,考虑一个有序数对 ${a_i,a_j (i&lt;j)}$ 并计算其贡献.这样一来,就有两种情况: ${a_i,a_j}$在所选的连续段中 ${a_i,a_j}$在所选的连续段之外 对于情况2,当${a_i&lt;a_j}$时,很显然他们不会对答案有贡献.对于${a_i&gt;a_j}$,对于区间 ${[1,j-1],[i+1,n]}$ 才会有贡献.但很显然地看到,区间 ${[i+1,j-1]}$ 被重复计算,要在计算概率时将其剪掉.如果使用 ${O(n^2)}$暴力显然会超时,可以将其用树状数组维护. 对于情况1就很简单,满足全排列概率为${\\frac{1}{2}}$,满足连续段包含关系的概率为 ${2\\frac{i(n-j+1)}{n*(n+1)}}$,概率相乘结果 $${P_{i,j}=\\frac{i*(n-j+1)}{n*(n+1)}}$$ 那么总期望为 $${P=\\sum_{i=1}^n\\sum_{j=i+1}^n \\frac{i*(n-j+1)}{n*(n+1)}}$$ $${P=\\frac{1}{2}\\sum_{i=1}^n \\frac{i*(n-i)(n-i+1)}{n(n+1)}}$$ code加入操作 1234inline void add (int x, int w, ll *c)&#123; while (x) &#123; c[x] += w, x &amp;= x-1;&#125;&#125; 询问操作 12345678inline ll query (int x, ll *c)&#123; long long ret = 0; while (x&lt;=n) &#123; ret += c[x], x += lowbit(x); &#125; return ret;&#125; 主程序 1234567891011121314static int main ()&#123; n = read(); for (register int i = 1; i &lt;= n; ++ i) &#123; a = read(); tmp += query (a+1, c1); ans -= (double)query(a+1, c2)*(n-i+1); ans += (double)(n-i+1)*i*(i-1)/4.0; add (a, 1, c1); add (a, i, c2); &#125; printf (&quot;%.20lf&quot;, (double)(tmp+ans/((double)n*(n+1)/2.0))); return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"洛谷 P1654 OSU!","slug":"Luogu-P1654-OSU","date":"2018-07-27T11:18:52.000Z","updated":"2020-09-02T14:56:30.509Z","comments":true,"path":"Luogu-P1654-OSU/","link":"","permalink":"https://brynhild.online/Luogu-P1654-OSU/","excerpt":"洛谷 P1654 OSU! 滚动数组","text":"洛谷 P1654 OSU! 滚动数组 本题可以使用滚动数组进一步优化空间. 空间多精贵. 订正一下本题题干:小H和小Z正在玩一个取石子游戏。 取石子游戏的规则是这样的，每个人每次可以从一堆石子中取出若干个石子，每次取石子的个数有限制，谁不能取石子时就会输掉游戏。 小H先进行操作，他想问你他是否有必胜策略，如果有，第一步如何取石子。 优化分析看到楼下大佬的代码，用庞大的数组会造成大量的内存浪费. 从算法中可以看到，一个状态只从它前一个状态转移而来，就可以使用滚动数组节约空间. 第一次使用数组取 0 位， 每次转移将 pos ^ 1. 代码如下 12345678for (register int i = 1; i &lt;= n; ++ i, pos ^= 1)&#123; exp = !pos, k = getdou (); x[pos] = (x[exp] + 1) * k; y[pos] = (y[exp] + 2*x[exp] + 1) * k; v[pos] = v[exp] + (3*x[exp] + 3*y[exp]+1) * k;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[]},{"title":"洛谷 P2899 [USACO08JAN]手机网络Cell Phone Network","slug":"Luogu-P2899-Cell-Phone-Network","date":"2018-06-28T07:31:29.000Z","updated":"2020-09-02T14:55:56.914Z","comments":true,"path":"Luogu-P2899-Cell-Phone-Network/","link":"","permalink":"https://brynhild.online/Luogu-P2899-Cell-Phone-Network/","excerpt":"树状贪心洛谷 P2899 [USACO08JAN]手机网络Cell Phone Network","text":"树状贪心洛谷 P2899 [USACO08JAN]手机网络Cell Phone Network 题目Farmer John has decided to give each of his cows a cell phone in hopes to encourage their social interaction. This, however, requires him to set up cell phone towers on his N (1 ≤ N ≤ 10,000) pastures (conveniently numbered 1..N) so they can all communicate. Exactly N-1 pairs of pastures are adjacent, and for any two pastures A and B (1 ≤ A ≤ N; 1 ≤ B ≤ N; A ≠ B) there is a sequence of adjacent pastures such that A is the first pasture in the sequence and B is the last. Farmer John can only place cell phone towers in the pastures, and each tower has enough range to provide service to the pasture it is on and all pastures adjacent to the pasture with the cell tower. Help him determine the minimum number of towers he must install to provide cell phone service to each pasture. 分析本题要求使用最少的电磁塔, 把所有的节点覆盖掉. 由 N-1 条边我们可以了解到, 这是一棵树. 从树的叶子节点向上看, 显然在儿子节点摆电磁塔是不合算的. 所以很显然地, 从最后一层向上搜索, 每遇到一个儿子节点没有被覆盖, 就在他父亲上摆一个电磁塔. 很显然, 从下向上枚举, 对于本题的数据这种方法是成立的. 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#pragma GCC optimize (&quot;Ofast&quot;)#include &quot;iostream&quot;#include &quot;stdio.h&quot;#include &quot;vector&quot;#define rint register intusing namespace std;inline int read()&#123; int x=0ll,t=1ll; char ch=getchar(); while((ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;)&amp;&amp;ch!=&#x27;-&#x27;)ch=getchar(); if(ch==&#x27;-&#x27;)t=-1,ch=getchar(); while(ch&lt;=&#x27;9&#x27;&amp;&amp;ch&gt;=&#x27;0&#x27;)x=x*10+ch-48,ch=getchar(); return x*t;&#125;bool check[10001];int n, fa[10001], ans, mxdp;vector &lt;int&gt; mp[10001], fl[10001];inline void dfs (int u, int de)&#123; mxdp = max (mxdp, de); fl[de].push_back (u); int v; for (rint i = 0; i &lt; mp[u].size (); ++ i) &#123; v = mp[u][i]; if (!(v ^ fa[u])) continue; fa[v] = u; dfs (v, de + 1); &#125;&#125;inline void work (int u)&#123; check[u] = true; for (rint i = 0; i &lt; mp[u].size (); ++ i) check[mp[u][i]] = true;&#125;signed main ()&#123; n = read (); int u, v; for (rint i = 1; i &lt; n; ++ i) &#123; u = read (), v = read (); mp[u].push_back (v); mp[v].push_back (u); &#125; dfs (1, 0); for (rint i = mxdp; i &gt;= 0; -- i) &#123; for (rint j = 0; j &lt; fl[i].size (); ++ j) &#123; u = fl[i][j], v = fa[u]; if (check[u]) continue; ans ++; work (v); &#125; &#125; printf (&quot;%d&quot;, ans);&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"贪心","slug":"贪心","permalink":"https://brynhild.online/tags/%E8%B4%AA%E5%BF%83/"}]},{"title":"洛谷 线段树模板","slug":"luogu-segment-tree","date":"2018-06-08T11:29:26.000Z","updated":"2020-09-02T14:53:34.404Z","comments":true,"path":"luogu-segment-tree/","link":"","permalink":"https://brynhild.online/luogu-segment-tree/","excerpt":"洛谷 线段树1 线段树2 模板","text":"洛谷 线段树1 线段树2 模板 P3372 [模板] 线段树 1Luogu P3372 线段树加 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#pragma GCC optimize (2)//...略#pragma GCC target (&quot;f16c&quot;)#include &lt;cstdio&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline long long read ()&#123; register long long x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (long long x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (long long x) &#123;if(x&lt;0)x=-x,putchar(&#x27;-&#x27;); write (x); putchar (&#x27;\\n&#x27;);&#125;#define Re register#define maxn 100001#define dmax 400001typedef long long ll;#define swap(x,y) ((x)^=(y)^=(x)^=(y))struct SMT &#123; int l, r; long long sum, tag;&#125; tr[dmax];inline void update (Re int rt) &#123; tr[rt].sum = tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].sum;&#125;static void build (Re int rt, Re int l, Re int r)&#123; tr[rt].l = l, tr[rt].r = r; if (l == r) &#123;tr[rt].sum = read(); return;&#125; register int mid = (l + r) &gt;&gt; 1; build (rt&lt;&lt;1, l, mid), build (rt&lt;&lt;1|1, mid+1, r); update (rt);&#125;inline void pushdown (Re int rt)&#123; if (rt &gt; 200000 || !tr[rt].tag) return; register int ls = rt&lt;&lt;1, rs = rt&lt;&lt;1|1; tr[ls].tag += tr[rt].tag, tr[rs].tag += tr[rt].tag; tr[ls].sum += tr[rt].tag * (tr[ls].r - tr[ls].l + 1), tr[rs].sum += tr[rt].tag * (tr[rs].r - tr[rs].l + 1); tr[rt].tag = 0;&#125;static void modify (Re int rt, Re int l, Re int r, Re ll val)&#123; register int L = tr[rt].l, R = tr[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) &#123; tr[rt].sum += val * (R - L + 1), tr[rt].tag += val; return; &#125; register int mid = (L + R) &gt;&gt; 1; pushdown (rt); if (l &lt;= mid) modify (rt&lt;&lt;1, l, r, val); if (r &gt; mid) modify (rt&lt;&lt;1|1,l,r, val); update (rt);&#125;static long long query (Re int rt, Re int l, Re int r)&#123; register int L = tr[rt].l, R = tr[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) return tr[rt].sum; pushdown (rt); register int mid = (L+R)&gt;&gt;1; register long long ret = 0; if (l &lt;= mid) ret = query (rt&lt;&lt;1, l, r); if (r &gt; mid) ret += query (rt&lt;&lt;1|1,l,r); return ret;&#125;signed main ()&#123; register int n=read(), m=read(); register int opt, x, y; register long long z; build (1, 1, n); while (m --) &#123; opt=read(), x=read(), y=read(); if (x &gt; y) swap (x, y); if (opt == 2) writelen (query (1, x, y)); else z = read (), modify (1, x, y, z); &#125; return 0;&#125; P3373 [模板]线段树 2Luogu P3372 加 乘 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119#pragma GCC optimize (2)//..略#pragma GCC target (&quot;f16c&quot;)#include &lt;cstdio&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline long long read ()&#123; register long long x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (long long x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void writelen (long long x) &#123;if(x&lt;0)x=-x,putchar(&#x27;-&#x27;); write (x); putchar (&#x27;\\n&#x27;);&#125;inline long long mul_mod (register long long a,register long long b,register long long mo) &#123; register long long ret; __asm__ __volatile__ (&quot;\\tmull %%ebx\\n\\tdivl %%ecx\\n&quot; : &quot;=d&quot;(ret):&quot;a&quot;(a),&quot;b&quot;(b),&quot;c&quot;(mo)); return ret;&#125;#define Re register#define maxn 100001#define dmax 400001typedef long long ll;#define swap(x,y) ((x)^=(y)^=(x)^=(y))#define mod(x) (((x)%modn+modn)%modn)long long modn;struct SMT &#123; int l, r; long long sum, add, mul;&#125; tr[dmax];inline void update (Re int rt) &#123; tr[rt].sum = tr[rt&lt;&lt;1].sum + tr[rt&lt;&lt;1|1].sum;&#125;static void build (Re int rt, Re int l, Re int r)&#123; tr[rt] = &#123;l, r, 0ll, 0ll, 1ll&#125;; if (l == r) &#123;tr[rt].sum = read()%modn; return;&#125; register int mid = (l + r) &gt;&gt; 1; build (rt&lt;&lt;1, l, mid), build (rt&lt;&lt;1|1, mid+1, r); update (rt);&#125;inline void pushdown (Re int rt)&#123; if (rt &gt; 200000 || (!tr[rt].add &amp;&amp; tr[rt].mul == 1ll)) return; register int ls = rt &lt;&lt; 1, rs = rt &lt;&lt; 1 | 1; tr[ls].mul = mul_mod (tr[ls].mul, tr[rt].mul, modn); tr[rs].mul = mul_mod (tr[rs].mul, tr[rt].mul, modn); tr[ls].add = mod (mul_mod (tr[ls].add , tr[rt].mul, modn) + tr[rt].add); tr[rs].add = mod (mul_mod (tr[rs].add, tr[rt].mul, modn) + tr[rt].add); tr[ls].sum = mod (mul_mod (tr[ls].sum, tr[rt].mul, modn) + mul_mod (tr[rt].add, (tr[ls].r - tr[ls].l + 1), modn)); tr[rs].sum = mod (mul_mod (tr[rs].sum, tr[rt].mul, modn) + mul_mod (tr[rt].add, (tr[rs].r - tr[rs].l + 1), modn)); tr[rt].add = 0ll, tr[rt].mul = 1ll;&#125;// opt==1: mul opt==2: addstatic void modify (Re int rt, Re int l, Re int r, Re ll val, Re int opt)&#123; register int L = tr[rt].l, R = tr[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) &#123; if (opt == 2) &#123; tr[rt].add = mod (tr[rt].add + val),\\ tr[rt].sum = mod (tr[rt].sum + mul_mod (val, (R - L + 1), modn)); return; &#125; else &#123; tr[rt].mul = mul_mod (tr[rt].mul, val, modn),\\ tr[rt].sum = mul_mod (tr[rt].sum, val, modn),\\ tr[rt].add = mul_mod (tr[rt].add, val, modn); return; &#125; &#125; pushdown (rt); register int mid = (L + R) &gt;&gt; 1; if (l &lt;= mid) modify (rt&lt;&lt;1, l, r, val, opt); if (r &gt; mid) modify (rt&lt;&lt;1|1,l,r, val, opt); update (rt);&#125;static long long query (Re int rt, Re int l, Re int r)&#123; register int L = tr[rt].l, R = tr[rt].r; if (l &lt;= L &amp;&amp; R &lt;= r) return tr[rt].sum; pushdown (rt); register int mid = (L+R)&gt;&gt;1; register long long ret = 0; if (l &lt;= mid) ret = query (rt&lt;&lt;1, l, r); if (r &gt; mid) ret += query (rt&lt;&lt;1|1,l,r); return ret % modn;&#125;signed main ()&#123; register int n=read(), m=read(); modn=read(); register int opt, x, y; register long long z; build (1, 1, n); while (m --) &#123; opt=read(), x=read(), y=read(); if (x &gt; y) swap (x, y); if (opt == 3) writelen (query (1,x,y)); else z=read()%modn,modify(1,x,y,z,opt); &#125; return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"},{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"}]},{"title":"最短路模板","slug":"shortest-path","date":"2017-12-05T06:47:00.000Z","updated":"2020-09-02T14:51:35.546Z","comments":true,"path":"shortest-path/","link":"","permalink":"https://brynhild.online/shortest-path/","excerpt":"SPFA 堆优化迪杰斯特拉C++模板","text":"SPFA 堆优化迪杰斯特拉C++模板 SPFALuogu P3371 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#pragma G++ optimize (3)#include &lt;cstdio&gt;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline long long read ()&#123; register long long x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; c ^ &#x27;-&#x27;) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc(); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (long long x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;inline const int&amp; min (const int&amp; a, const int&amp; b) &#123;return a&lt;b? a:b;&#125;#define Re register#define maxn 10001#define maxm 500001int head[maxn], nxt[maxm], too[maxm], ecnt;long long wei[maxm], dis[maxn];int que[maxm*100 + 100];bool vis[maxn];signed main ()&#123; register int n = read (), m = read (), sta = read (); for (Re int i = 1; i &lt;= n; ++ i) dis[i] = 2147483647; register int fr, to, va; while (m --) &#123; fr = read (), to = read (), va = read (); nxt[++ ecnt] = head[fr], head[fr] = ecnt, too[ecnt] = to, wei[ecnt] = va; &#125; dis[sta] = 0; register int hd = 0, tl = 1; que[tl] = sta; while (hd &lt; tl) &#123; fr = que[++ hd], vis[fr] = false; for (Re int i = head[fr]; i; i = nxt[i]) &#123; to = too[i], va = wei[i]; if (dis[to] &gt; dis[fr] + va) &#123; dis[to] = dis[fr] + va; if (!vis[to]) vis[to] = true, que[++ tl] = to; &#125; &#125; &#125; for (Re int i = 1; i &lt;= n; ++ i) &#123; if (dis[i]&lt;0) dis[i] = -dis[i], putchar (&#x27;-&#x27;); write (dis[i]), putchar (&#x27; &#x27;); &#125; return 0;&#125; 堆优化迪杰斯特拉Luogu P4779 OLD (2017)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#pragma G++ optimize (3)#pragma GCC optimize (&quot;Ofast&quot;, 3)#pragma GCC target (&quot;avx&quot;,&quot;sse2&quot;)#include &lt;stdio.h&gt;#include &lt;ctype.h&gt;#include &lt;ext/pb_ds/priority_queue.hpp&gt;using namespace std;using namespace __gnu_pbds;#define maxn 100001#define maxm 200001#define inff 2147483647inline int read () &#123; int x = 0; char c = getchar(); bool m = false; while (!isdigit(c) &amp;&amp; c != &#x27;-&#x27;) c = getchar(); if (c == &#x27;-&#x27;) c = getchar(), m = true; while (isdigit(c)) x = x * 10 + c - 48, c = getchar(); if (m) return -x; else return x;&#125;inline void fastwrite (int x) &#123; if(x &lt; 0) x = -x, putchar(&#x27;-&#x27;); if(x &gt; 9) fastwrite(x / 10); putchar(x%10 + &#x27;0&#x27;);&#125;inline void fastwritespace (int x) &#123; fastwrite(x); putchar(&#x27; &#x27;);&#125;struct node &#123; int val, name;&#125;;struct cmp &#123; inline bool operator() (const node&amp; aa, const node&amp; bb) &#123; return aa.val &gt; bb.val; &#125;&#125;;int n, m, s, fro, to, w;int dis[maxn];bool visit[maxn];vector &lt;pair &lt;int, int&gt; &gt; data[maxn];__gnu_pbds::priority_queue &lt;node, cmp, pairing_heap_tag&gt; nico;int main () &#123; n = read (), m = read (), s = read (); for (int i = 1; i &lt;= m; i ++) &#123; fro = read (), to = read (), w = read (); data[fro].push_back (make_pair (to, w)); &#125; for (int i = 1; i &lt;= n; i ++) dis[i] = inff; dis[s] = 0; nico.push ((node) &#123; 0, s &#125;); while (!nico.empty ()) &#123; fro = nico.top ().name; nico.pop (); if (visit[fro]) continue; visit[fro] = true; for (int i = 0; i &lt; data[fro].size (); i ++) &#123; to = data[fro][i].first; w = data[fro][i].second; if (!visit[to] &amp;&amp; dis[fro] + w &lt; dis[to]) &#123; dis[to] = dis[fro] + w; nico.push ((node) &#123; dis[to], to &#125;); &#125; &#125; &#125; for (int i = 1; i &lt;= n; i ++) fastwritespace (dis[i]); return 0;&#125; NEW(2018/11/5)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#pragma G++ optimize (3)#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;queue&gt;using std::priority_queue;const int ELAS = 1&lt;&lt;14;static char buf[ELAS],*p1=buf,*p2=buf;inline char gc()&#123; return (p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,ELAS,stdin),p1==p2)?EOF:*p1++;&#125;inline int read ()&#123; register int x = 0; register char c = gc(); register bool m = false; while ((c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;) &amp;&amp; (c ^ &#x27;-&#x27;)) c = gc(); if (c == &#x27;-&#x27;) m = true, c = gc (); while (c&gt;=&#x27;0&#x27;&amp;&amp;c&lt;=&#x27;9&#x27;) x = (x&lt;&lt;3) + (x&lt;&lt;1) + (c^&#x27;0&#x27;), c = gc(); return m? -x:x;&#125;static void write (int x)&#123; if (x &gt; 9) write (x / 10); putchar (x % 10 + 48);&#125;static void nwrite (int x) &#123;write (x); putchar (&#x27; &#x27;);&#125;#define maxn 100001#define maxm 200001#define Re registerstruct node &#123; int id, val; friend bool operator &lt; (node a, node b) &#123; return a.val &gt; b.val; &#125;&#125;;priority_queue &lt;node&gt; que;int head[maxn], wei[maxm], too[maxm], nxt[maxm], ecnt;bool vis[maxn];int dis[maxn];signed main ()&#123; register int n = read (), m = read (), sta = read (); register int fr, to, va; while (m --) &#123; fr = read (), nxt[++ ecnt] = head[fr],\\ head[fr] = ecnt, too[ecnt] = read (), wei[ecnt] = read (); &#125; memset (dis, 0x3f3f3f3f, sizeof dis); dis[sta] = 0; que.push (&#123;sta, 0&#125;); while (!que.empty ()) &#123; fr = que.top ().id, que.pop (); if (!vis[fr]) &#123; vis[fr] = true; for (Re int i = head[fr]; i; i = nxt[i]) &#123; to = too[i], va = wei[i]; if (dis[fr] + va &lt; dis[to]) &#123; dis[to] = dis[fr] + va; que.push (&#123;to, dis[to]&#125;); &#125; &#125; &#125; &#125; for (Re int i = 1; i &lt;= n; ++ i) nwrite (dis[i]); return 0;&#125;","categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"最短路","slug":"最短路","permalink":"https://brynhild.online/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}]},{"title":"HEXO博客的基本搭建","slug":"hexo-buildup","date":"2017-11-13T03:10:00.000Z","updated":"2020-09-02T14:56:59.256Z","comments":true,"path":"hexo-buildup/","link":"","permalink":"https://brynhild.online/hexo-buildup/","excerpt":"HEXO 博客的基本搭建安装 初始化 部署","text":"HEXO 博客的基本搭建安装 初始化 部署 事前准备准备仓库在 GitHub 上注册账号并创建仓库 yourname.github.io 安装必要环境安装 node.js 及 git 完成后在命令窗口分别输入 123node -vnpm -vgit- version 如显示正确版本号即为成功. SSH授权在目录下右键,git bash 1ssh-keygen -t rsa 在C盘用户目录下用记事本打开公钥,复制内容添加到 GitHub. 在 git bash 中输入 1ssh -T git@github.com 测试是否成功. 安装及运行安装和初始化 HEXO1234$ npm install hexo-cli -g$ hexo init$ hexo g$ hexo s HEXO 命令一览12345678910111213141516171819202122Commands: clean Remove generated files and cache. config Get or set configurations. deploy Deploy your website. generate Generate static files. help Get help on a command. init Create a new Hexo folder. list List the information of the site migrate Migrate your site from other system to Hexo. new Create a new post. publish Moves a draft post from _drafts to _posts folder. render Render files with renderer plugins. server Start the server. version Display version information.Global Options: --config Specify config file instead of using _config.yml --cwd Specify the CWD --debug Display all verbose messages in the terminal --draft Display draft posts --safe Disable all plugins and scripts --silent Hide output on console","categories":[{"name":"HEXO","slug":"HEXO","permalink":"https://brynhild.online/categories/HEXO/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"https://brynhild.online/tags/HEXO/"}]}],"categories":[{"name":"Olympiad in Informatics","slug":"Olympiad-in-Informatics","permalink":"https://brynhild.online/categories/Olympiad-in-Informatics/"},{"name":"VPN","slug":"VPN","permalink":"https://brynhild.online/categories/VPN/"},{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/categories/Trick/"},{"name":"buzzer","slug":"buzzer","permalink":"https://brynhild.online/categories/buzzer/"},{"name":"memory","slug":"memory","permalink":"https://brynhild.online/categories/memory/"},{"name":"HEXO","slug":"HEXO","permalink":"https://brynhild.online/categories/HEXO/"}],"tags":[{"name":"Template","slug":"Template","permalink":"https://brynhild.online/tags/Template/"},{"name":"segment tree","slug":"segment-tree","permalink":"https://brynhild.online/tags/segment-tree/"},{"name":"VPN","slug":"VPN","permalink":"https://brynhild.online/tags/VPN/"},{"name":"VPS","slug":"VPS","permalink":"https://brynhild.online/tags/VPS/"},{"name":"OBS","slug":"OBS","permalink":"https://brynhild.online/tags/OBS/"},{"name":"Trick","slug":"Trick","permalink":"https://brynhild.online/tags/Trick/"},{"name":"buzzer","slug":"buzzer","permalink":"https://brynhild.online/tags/buzzer/"},{"name":"倍增","slug":"倍增","permalink":"https://brynhild.online/tags/%E5%80%8D%E5%A2%9E/"},{"name":"生成树","slug":"生成树","permalink":"https://brynhild.online/tags/%E7%94%9F%E6%88%90%E6%A0%91/"},{"name":"并查集","slug":"并查集","permalink":"https://brynhild.online/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"},{"name":"GSS","slug":"GSS","permalink":"https://brynhild.online/tags/GSS/"},{"name":"contest","slug":"contest","permalink":"https://brynhild.online/tags/contest/"},{"name":"DP","slug":"DP","permalink":"https://brynhild.online/tags/DP/"},{"name":"STL","slug":"STL","permalink":"https://brynhild.online/tags/STL/"},{"name":"贪心","slug":"贪心","permalink":"https://brynhild.online/tags/%E8%B4%AA%E5%BF%83/"},{"name":"最短路","slug":"最短路","permalink":"https://brynhild.online/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"name":"HEXO","slug":"HEXO","permalink":"https://brynhild.online/tags/HEXO/"}]}